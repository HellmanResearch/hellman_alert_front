{"version":3,"file":"static/js/5373.33aac10e.js","mappings":"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","sources":["../node_modules/echarts/lib/chart/gauge/PointerPath.js","../node_modules/echarts/lib/chart/gauge/GaugeView.js","../node_modules/echarts/lib/chart/gauge/GaugeSeries.js","../node_modules/echarts/lib/chart/gauge/install.js"],"sourcesContent":["\n/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\n\n\n/**\n * AUTO-GENERATED FILE. DO NOT MODIFY.\n */\n\n/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\nimport { __extends } from \"tslib\";\nimport Path from 'zrender/lib/graphic/Path.js';\n\nvar PointerShape =\n/** @class */\nfunction () {\n  function PointerShape() {\n    this.angle = 0;\n    this.width = 10;\n    this.r = 10;\n    this.x = 0;\n    this.y = 0;\n  }\n\n  return PointerShape;\n}();\n\nvar PointerPath =\n/** @class */\nfunction (_super) {\n  __extends(PointerPath, _super);\n\n  function PointerPath(opts) {\n    var _this = _super.call(this, opts) || this;\n\n    _this.type = 'pointer';\n    return _this;\n  }\n\n  PointerPath.prototype.getDefaultShape = function () {\n    return new PointerShape();\n  };\n\n  PointerPath.prototype.buildPath = function (ctx, shape) {\n    var mathCos = Math.cos;\n    var mathSin = Math.sin;\n    var r = shape.r;\n    var width = shape.width;\n    var angle = shape.angle;\n    var x = shape.x - mathCos(angle) * width * (width >= r / 3 ? 1 : 2);\n    var y = shape.y - mathSin(angle) * width * (width >= r / 3 ? 1 : 2);\n    angle = shape.angle - Math.PI / 2;\n    ctx.moveTo(x, y);\n    ctx.lineTo(shape.x + mathCos(angle) * width, shape.y + mathSin(angle) * width);\n    ctx.lineTo(shape.x + mathCos(shape.angle) * r, shape.y + mathSin(shape.angle) * r);\n    ctx.lineTo(shape.x - mathCos(angle) * width, shape.y - mathSin(angle) * width);\n    ctx.lineTo(x, y);\n  };\n\n  return PointerPath;\n}(Path);\n\nexport default PointerPath;","\n/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\n\n\n/**\n * AUTO-GENERATED FILE. DO NOT MODIFY.\n */\n\n/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\nimport { __extends } from \"tslib\";\nimport PointerPath from './PointerPath.js';\nimport * as graphic from '../../util/graphic.js';\nimport { setStatesStylesFromModel, toggleHoverEmphasis } from '../../util/states.js';\nimport { createTextStyle, setLabelValueAnimation, animateLabelValue } from '../../label/labelStyle.js';\nimport ChartView from '../../view/Chart.js';\nimport { parsePercent, round, linearMap } from '../../util/number.js';\nimport Sausage from '../../util/shape/sausage.js';\nimport { createSymbol } from '../../util/symbol.js';\nimport ZRImage from 'zrender/lib/graphic/Image.js';\nimport { extend, isFunction, isString, isNumber } from 'zrender/lib/core/util.js';\nimport { setCommonECData } from '../../util/innerStore.js';\nimport { normalizeArcAngles } from 'zrender/lib/core/PathProxy.js';\n\nfunction parsePosition(seriesModel, api) {\n  var center = seriesModel.get('center');\n  var width = api.getWidth();\n  var height = api.getHeight();\n  var size = Math.min(width, height);\n  var cx = parsePercent(center[0], api.getWidth());\n  var cy = parsePercent(center[1], api.getHeight());\n  var r = parsePercent(seriesModel.get('radius'), size / 2);\n  return {\n    cx: cx,\n    cy: cy,\n    r: r\n  };\n}\n\nfunction formatLabel(value, labelFormatter) {\n  var label = value == null ? '' : value + '';\n\n  if (labelFormatter) {\n    if (isString(labelFormatter)) {\n      label = labelFormatter.replace('{value}', label);\n    } else if (isFunction(labelFormatter)) {\n      label = labelFormatter(value);\n    }\n  }\n\n  return label;\n}\n\nvar GaugeView =\n/** @class */\nfunction (_super) {\n  __extends(GaugeView, _super);\n\n  function GaugeView() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n\n    _this.type = GaugeView.type;\n    return _this;\n  }\n\n  GaugeView.prototype.render = function (seriesModel, ecModel, api) {\n    this.group.removeAll();\n    var colorList = seriesModel.get(['axisLine', 'lineStyle', 'color']);\n    var posInfo = parsePosition(seriesModel, api);\n\n    this._renderMain(seriesModel, ecModel, api, colorList, posInfo);\n\n    this._data = seriesModel.getData();\n  };\n\n  GaugeView.prototype.dispose = function () {};\n\n  GaugeView.prototype._renderMain = function (seriesModel, ecModel, api, colorList, posInfo) {\n    var group = this.group;\n    var clockwise = seriesModel.get('clockwise');\n    var startAngle = -seriesModel.get('startAngle') / 180 * Math.PI;\n    var endAngle = -seriesModel.get('endAngle') / 180 * Math.PI;\n    var axisLineModel = seriesModel.getModel('axisLine');\n    var roundCap = axisLineModel.get('roundCap');\n    var MainPath = roundCap ? Sausage : graphic.Sector;\n    var showAxis = axisLineModel.get('show');\n    var lineStyleModel = axisLineModel.getModel('lineStyle');\n    var axisLineWidth = lineStyleModel.get('width');\n    var angles = [startAngle, endAngle];\n    normalizeArcAngles(angles, !clockwise);\n    startAngle = angles[0];\n    endAngle = angles[1];\n    var angleRangeSpan = endAngle - startAngle;\n    var prevEndAngle = startAngle;\n\n    for (var i = 0; showAxis && i < colorList.length; i++) {\n      // Clamp\n      var percent = Math.min(Math.max(colorList[i][0], 0), 1);\n      endAngle = startAngle + angleRangeSpan * percent;\n      var sector = new MainPath({\n        shape: {\n          startAngle: prevEndAngle,\n          endAngle: endAngle,\n          cx: posInfo.cx,\n          cy: posInfo.cy,\n          clockwise: clockwise,\n          r0: posInfo.r - axisLineWidth,\n          r: posInfo.r\n        },\n        silent: true\n      });\n      sector.setStyle({\n        fill: colorList[i][1]\n      });\n      sector.setStyle(lineStyleModel.getLineStyle( // Because we use sector to simulate arc\n      // so the properties for stroking are useless\n      ['color', 'width']));\n      group.add(sector);\n      prevEndAngle = endAngle;\n    }\n\n    var getColor = function (percent) {\n      // Less than 0\n      if (percent <= 0) {\n        return colorList[0][1];\n      }\n\n      var i;\n\n      for (i = 0; i < colorList.length; i++) {\n        if (colorList[i][0] >= percent && (i === 0 ? 0 : colorList[i - 1][0]) < percent) {\n          return colorList[i][1];\n        }\n      } // More than 1\n\n\n      return colorList[i - 1][1];\n    };\n\n    this._renderTicks(seriesModel, ecModel, api, getColor, posInfo, startAngle, endAngle, clockwise, axisLineWidth);\n\n    this._renderTitleAndDetail(seriesModel, ecModel, api, getColor, posInfo);\n\n    this._renderAnchor(seriesModel, posInfo);\n\n    this._renderPointer(seriesModel, ecModel, api, getColor, posInfo, startAngle, endAngle, clockwise, axisLineWidth);\n  };\n\n  GaugeView.prototype._renderTicks = function (seriesModel, ecModel, api, getColor, posInfo, startAngle, endAngle, clockwise, axisLineWidth) {\n    var group = this.group;\n    var cx = posInfo.cx;\n    var cy = posInfo.cy;\n    var r = posInfo.r;\n    var minVal = +seriesModel.get('min');\n    var maxVal = +seriesModel.get('max');\n    var splitLineModel = seriesModel.getModel('splitLine');\n    var tickModel = seriesModel.getModel('axisTick');\n    var labelModel = seriesModel.getModel('axisLabel');\n    var splitNumber = seriesModel.get('splitNumber');\n    var subSplitNumber = tickModel.get('splitNumber');\n    var splitLineLen = parsePercent(splitLineModel.get('length'), r);\n    var tickLen = parsePercent(tickModel.get('length'), r);\n    var angle = startAngle;\n    var step = (endAngle - startAngle) / splitNumber;\n    var subStep = step / subSplitNumber;\n    var splitLineStyle = splitLineModel.getModel('lineStyle').getLineStyle();\n    var tickLineStyle = tickModel.getModel('lineStyle').getLineStyle();\n    var splitLineDistance = splitLineModel.get('distance');\n    var unitX;\n    var unitY;\n\n    for (var i = 0; i <= splitNumber; i++) {\n      unitX = Math.cos(angle);\n      unitY = Math.sin(angle); // Split line\n\n      if (splitLineModel.get('show')) {\n        var distance = splitLineDistance ? splitLineDistance + axisLineWidth : axisLineWidth;\n        var splitLine = new graphic.Line({\n          shape: {\n            x1: unitX * (r - distance) + cx,\n            y1: unitY * (r - distance) + cy,\n            x2: unitX * (r - splitLineLen - distance) + cx,\n            y2: unitY * (r - splitLineLen - distance) + cy\n          },\n          style: splitLineStyle,\n          silent: true\n        });\n\n        if (splitLineStyle.stroke === 'auto') {\n          splitLine.setStyle({\n            stroke: getColor(i / splitNumber)\n          });\n        }\n\n        group.add(splitLine);\n      } // Label\n\n\n      if (labelModel.get('show')) {\n        var distance = labelModel.get('distance') + splitLineDistance;\n        var label = formatLabel(round(i / splitNumber * (maxVal - minVal) + minVal), labelModel.get('formatter'));\n        var autoColor = getColor(i / splitNumber);\n        var textStyleX = unitX * (r - splitLineLen - distance) + cx;\n        var textStyleY = unitY * (r - splitLineLen - distance) + cy;\n        var rotateType = labelModel.get('rotate');\n        var rotate = 0;\n\n        if (rotateType === 'radial') {\n          rotate = -angle + 2 * Math.PI;\n\n          if (rotate > Math.PI / 2) {\n            rotate += Math.PI;\n          }\n        } else if (rotateType === 'tangential') {\n          rotate = -angle - Math.PI / 2;\n        } else if (isNumber(rotateType)) {\n          rotate = rotateType * Math.PI / 180;\n        }\n\n        if (rotate === 0) {\n          group.add(new graphic.Text({\n            style: createTextStyle(labelModel, {\n              text: label,\n              x: textStyleX,\n              y: textStyleY,\n              verticalAlign: unitY < -0.8 ? 'top' : unitY > 0.8 ? 'bottom' : 'middle',\n              align: unitX < -0.4 ? 'left' : unitX > 0.4 ? 'right' : 'center'\n            }, {\n              inheritColor: autoColor\n            }),\n            silent: true\n          }));\n        } else {\n          group.add(new graphic.Text({\n            style: createTextStyle(labelModel, {\n              text: label,\n              x: textStyleX,\n              y: textStyleY,\n              verticalAlign: 'middle',\n              align: 'center'\n            }, {\n              inheritColor: autoColor\n            }),\n            silent: true,\n            originX: textStyleX,\n            originY: textStyleY,\n            rotation: rotate\n          }));\n        }\n      } // Axis tick\n\n\n      if (tickModel.get('show') && i !== splitNumber) {\n        var distance = tickModel.get('distance');\n        distance = distance ? distance + axisLineWidth : axisLineWidth;\n\n        for (var j = 0; j <= subSplitNumber; j++) {\n          unitX = Math.cos(angle);\n          unitY = Math.sin(angle);\n          var tickLine = new graphic.Line({\n            shape: {\n              x1: unitX * (r - distance) + cx,\n              y1: unitY * (r - distance) + cy,\n              x2: unitX * (r - tickLen - distance) + cx,\n              y2: unitY * (r - tickLen - distance) + cy\n            },\n            silent: true,\n            style: tickLineStyle\n          });\n\n          if (tickLineStyle.stroke === 'auto') {\n            tickLine.setStyle({\n              stroke: getColor((i + j / subSplitNumber) / splitNumber)\n            });\n          }\n\n          group.add(tickLine);\n          angle += subStep;\n        }\n\n        angle -= subStep;\n      } else {\n        angle += step;\n      }\n    }\n  };\n\n  GaugeView.prototype._renderPointer = function (seriesModel, ecModel, api, getColor, posInfo, startAngle, endAngle, clockwise, axisLineWidth) {\n    var group = this.group;\n    var oldData = this._data;\n    var oldProgressData = this._progressEls;\n    var progressList = [];\n    var showPointer = seriesModel.get(['pointer', 'show']);\n    var progressModel = seriesModel.getModel('progress');\n    var showProgress = progressModel.get('show');\n    var data = seriesModel.getData();\n    var valueDim = data.mapDimension('value');\n    var minVal = +seriesModel.get('min');\n    var maxVal = +seriesModel.get('max');\n    var valueExtent = [minVal, maxVal];\n    var angleExtent = [startAngle, endAngle];\n\n    function createPointer(idx, angle) {\n      var itemModel = data.getItemModel(idx);\n      var pointerModel = itemModel.getModel('pointer');\n      var pointerWidth = parsePercent(pointerModel.get('width'), posInfo.r);\n      var pointerLength = parsePercent(pointerModel.get('length'), posInfo.r);\n      var pointerStr = seriesModel.get(['pointer', 'icon']);\n      var pointerOffset = pointerModel.get('offsetCenter');\n      var pointerOffsetX = parsePercent(pointerOffset[0], posInfo.r);\n      var pointerOffsetY = parsePercent(pointerOffset[1], posInfo.r);\n      var pointerKeepAspect = pointerModel.get('keepAspect');\n      var pointer; // not exist icon type will be set 'rect'\n\n      if (pointerStr) {\n        pointer = createSymbol(pointerStr, pointerOffsetX - pointerWidth / 2, pointerOffsetY - pointerLength, pointerWidth, pointerLength, null, pointerKeepAspect);\n      } else {\n        pointer = new PointerPath({\n          shape: {\n            angle: -Math.PI / 2,\n            width: pointerWidth,\n            r: pointerLength,\n            x: pointerOffsetX,\n            y: pointerOffsetY\n          }\n        });\n      }\n\n      pointer.rotation = -(angle + Math.PI / 2);\n      pointer.x = posInfo.cx;\n      pointer.y = posInfo.cy;\n      return pointer;\n    }\n\n    function createProgress(idx, endAngle) {\n      var roundCap = progressModel.get('roundCap');\n      var ProgressPath = roundCap ? Sausage : graphic.Sector;\n      var isOverlap = progressModel.get('overlap');\n      var progressWidth = isOverlap ? progressModel.get('width') : axisLineWidth / data.count();\n      var r0 = isOverlap ? posInfo.r - progressWidth : posInfo.r - (idx + 1) * progressWidth;\n      var r = isOverlap ? posInfo.r : posInfo.r - idx * progressWidth;\n      var progress = new ProgressPath({\n        shape: {\n          startAngle: startAngle,\n          endAngle: endAngle,\n          cx: posInfo.cx,\n          cy: posInfo.cy,\n          clockwise: clockwise,\n          r0: r0,\n          r: r\n        }\n      });\n      isOverlap && (progress.z2 = maxVal - data.get(valueDim, idx) % maxVal);\n      return progress;\n    }\n\n    if (showProgress || showPointer) {\n      data.diff(oldData).add(function (idx) {\n        var val = data.get(valueDim, idx);\n\n        if (showPointer) {\n          var pointer = createPointer(idx, startAngle); // TODO hide pointer on NaN value?\n\n          graphic.initProps(pointer, {\n            rotation: -((isNaN(+val) ? angleExtent[0] : linearMap(val, valueExtent, angleExtent, true)) + Math.PI / 2)\n          }, seriesModel);\n          group.add(pointer);\n          data.setItemGraphicEl(idx, pointer);\n        }\n\n        if (showProgress) {\n          var progress = createProgress(idx, startAngle);\n          var isClip = progressModel.get('clip');\n          graphic.initProps(progress, {\n            shape: {\n              endAngle: linearMap(val, valueExtent, angleExtent, isClip)\n            }\n          }, seriesModel);\n          group.add(progress); // Add data index and series index for indexing the data by element\n          // Useful in tooltip\n\n          setCommonECData(seriesModel.seriesIndex, data.dataType, idx, progress);\n          progressList[idx] = progress;\n        }\n      }).update(function (newIdx, oldIdx) {\n        var val = data.get(valueDim, newIdx);\n\n        if (showPointer) {\n          var previousPointer = oldData.getItemGraphicEl(oldIdx);\n          var previousRotate = previousPointer ? previousPointer.rotation : startAngle;\n          var pointer = createPointer(newIdx, previousRotate);\n          pointer.rotation = previousRotate;\n          graphic.updateProps(pointer, {\n            rotation: -((isNaN(+val) ? angleExtent[0] : linearMap(val, valueExtent, angleExtent, true)) + Math.PI / 2)\n          }, seriesModel);\n          group.add(pointer);\n          data.setItemGraphicEl(newIdx, pointer);\n        }\n\n        if (showProgress) {\n          var previousProgress = oldProgressData[oldIdx];\n          var previousEndAngle = previousProgress ? previousProgress.shape.endAngle : startAngle;\n          var progress = createProgress(newIdx, previousEndAngle);\n          var isClip = progressModel.get('clip');\n          graphic.updateProps(progress, {\n            shape: {\n              endAngle: linearMap(val, valueExtent, angleExtent, isClip)\n            }\n          }, seriesModel);\n          group.add(progress); // Add data index and series index for indexing the data by element\n          // Useful in tooltip\n\n          setCommonECData(seriesModel.seriesIndex, data.dataType, newIdx, progress);\n          progressList[newIdx] = progress;\n        }\n      }).execute();\n      data.each(function (idx) {\n        var itemModel = data.getItemModel(idx);\n        var emphasisModel = itemModel.getModel('emphasis');\n        var focus = emphasisModel.get('focus');\n        var blurScope = emphasisModel.get('blurScope');\n        var emphasisDisabled = emphasisModel.get('disabled');\n\n        if (showPointer) {\n          var pointer = data.getItemGraphicEl(idx);\n          var symbolStyle = data.getItemVisual(idx, 'style');\n          var visualColor = symbolStyle.fill;\n\n          if (pointer instanceof ZRImage) {\n            var pathStyle = pointer.style;\n            pointer.useStyle(extend({\n              image: pathStyle.image,\n              x: pathStyle.x,\n              y: pathStyle.y,\n              width: pathStyle.width,\n              height: pathStyle.height\n            }, symbolStyle));\n          } else {\n            pointer.useStyle(symbolStyle);\n            pointer.type !== 'pointer' && pointer.setColor(visualColor);\n          }\n\n          pointer.setStyle(itemModel.getModel(['pointer', 'itemStyle']).getItemStyle());\n\n          if (pointer.style.fill === 'auto') {\n            pointer.setStyle('fill', getColor(linearMap(data.get(valueDim, idx), valueExtent, [0, 1], true)));\n          }\n\n          pointer.z2EmphasisLift = 0;\n          setStatesStylesFromModel(pointer, itemModel);\n          toggleHoverEmphasis(pointer, focus, blurScope, emphasisDisabled);\n        }\n\n        if (showProgress) {\n          var progress = progressList[idx];\n          progress.useStyle(data.getItemVisual(idx, 'style'));\n          progress.setStyle(itemModel.getModel(['progress', 'itemStyle']).getItemStyle());\n          progress.z2EmphasisLift = 0;\n          setStatesStylesFromModel(progress, itemModel);\n          toggleHoverEmphasis(progress, focus, blurScope, emphasisDisabled);\n        }\n      });\n      this._progressEls = progressList;\n    }\n  };\n\n  GaugeView.prototype._renderAnchor = function (seriesModel, posInfo) {\n    var anchorModel = seriesModel.getModel('anchor');\n    var showAnchor = anchorModel.get('show');\n\n    if (showAnchor) {\n      var anchorSize = anchorModel.get('size');\n      var anchorType = anchorModel.get('icon');\n      var offsetCenter = anchorModel.get('offsetCenter');\n      var anchorKeepAspect = anchorModel.get('keepAspect');\n      var anchor = createSymbol(anchorType, posInfo.cx - anchorSize / 2 + parsePercent(offsetCenter[0], posInfo.r), posInfo.cy - anchorSize / 2 + parsePercent(offsetCenter[1], posInfo.r), anchorSize, anchorSize, null, anchorKeepAspect);\n      anchor.z2 = anchorModel.get('showAbove') ? 1 : 0;\n      anchor.setStyle(anchorModel.getModel('itemStyle').getItemStyle());\n      this.group.add(anchor);\n    }\n  };\n\n  GaugeView.prototype._renderTitleAndDetail = function (seriesModel, ecModel, api, getColor, posInfo) {\n    var _this = this;\n\n    var data = seriesModel.getData();\n    var valueDim = data.mapDimension('value');\n    var minVal = +seriesModel.get('min');\n    var maxVal = +seriesModel.get('max');\n    var contentGroup = new graphic.Group();\n    var newTitleEls = [];\n    var newDetailEls = [];\n    var hasAnimation = seriesModel.isAnimationEnabled();\n    var showPointerAbove = seriesModel.get(['pointer', 'showAbove']);\n    data.diff(this._data).add(function (idx) {\n      newTitleEls[idx] = new graphic.Text({\n        silent: true\n      });\n      newDetailEls[idx] = new graphic.Text({\n        silent: true\n      });\n    }).update(function (idx, oldIdx) {\n      newTitleEls[idx] = _this._titleEls[oldIdx];\n      newDetailEls[idx] = _this._detailEls[oldIdx];\n    }).execute();\n    data.each(function (idx) {\n      var itemModel = data.getItemModel(idx);\n      var value = data.get(valueDim, idx);\n      var itemGroup = new graphic.Group();\n      var autoColor = getColor(linearMap(value, [minVal, maxVal], [0, 1], true));\n      var itemTitleModel = itemModel.getModel('title');\n\n      if (itemTitleModel.get('show')) {\n        var titleOffsetCenter = itemTitleModel.get('offsetCenter');\n        var titleX = posInfo.cx + parsePercent(titleOffsetCenter[0], posInfo.r);\n        var titleY = posInfo.cy + parsePercent(titleOffsetCenter[1], posInfo.r);\n        var labelEl = newTitleEls[idx];\n        labelEl.attr({\n          z2: showPointerAbove ? 0 : 2,\n          style: createTextStyle(itemTitleModel, {\n            x: titleX,\n            y: titleY,\n            text: data.getName(idx),\n            align: 'center',\n            verticalAlign: 'middle'\n          }, {\n            inheritColor: autoColor\n          })\n        });\n        itemGroup.add(labelEl);\n      }\n\n      var itemDetailModel = itemModel.getModel('detail');\n\n      if (itemDetailModel.get('show')) {\n        var detailOffsetCenter = itemDetailModel.get('offsetCenter');\n        var detailX = posInfo.cx + parsePercent(detailOffsetCenter[0], posInfo.r);\n        var detailY = posInfo.cy + parsePercent(detailOffsetCenter[1], posInfo.r);\n        var width = parsePercent(itemDetailModel.get('width'), posInfo.r);\n        var height = parsePercent(itemDetailModel.get('height'), posInfo.r);\n        var detailColor = seriesModel.get(['progress', 'show']) ? data.getItemVisual(idx, 'style').fill : autoColor;\n        var labelEl = newDetailEls[idx];\n        var formatter_1 = itemDetailModel.get('formatter');\n        labelEl.attr({\n          z2: showPointerAbove ? 0 : 2,\n          style: createTextStyle(itemDetailModel, {\n            x: detailX,\n            y: detailY,\n            text: formatLabel(value, formatter_1),\n            width: isNaN(width) ? null : width,\n            height: isNaN(height) ? null : height,\n            align: 'center',\n            verticalAlign: 'middle'\n          }, {\n            inheritColor: detailColor\n          })\n        });\n        setLabelValueAnimation(labelEl, {\n          normal: itemDetailModel\n        }, value, function (value) {\n          return formatLabel(value, formatter_1);\n        });\n        hasAnimation && animateLabelValue(labelEl, idx, data, seriesModel, {\n          getFormattedLabel: function (labelDataIndex, status, dataType, labelDimIndex, fmt, extendParams) {\n            return formatLabel(extendParams ? extendParams.interpolatedValue : value, formatter_1);\n          }\n        });\n        itemGroup.add(labelEl);\n      }\n\n      contentGroup.add(itemGroup);\n    });\n    this.group.add(contentGroup);\n    this._titleEls = newTitleEls;\n    this._detailEls = newDetailEls;\n  };\n\n  GaugeView.type = 'gauge';\n  return GaugeView;\n}(ChartView);\n\nexport default GaugeView;","\n/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\n\n\n/**\n * AUTO-GENERATED FILE. DO NOT MODIFY.\n */\n\n/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\nimport { __extends } from \"tslib\";\nimport createSeriesDataSimply from '../helper/createSeriesDataSimply.js';\nimport SeriesModel from '../../model/Series.js';\n\nvar GaugeSeriesModel =\n/** @class */\nfunction (_super) {\n  __extends(GaugeSeriesModel, _super);\n\n  function GaugeSeriesModel() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n\n    _this.type = GaugeSeriesModel.type;\n    _this.visualStyleAccessPath = 'itemStyle';\n    return _this;\n  }\n\n  GaugeSeriesModel.prototype.getInitialData = function (option, ecModel) {\n    return createSeriesDataSimply(this, ['value']);\n  };\n\n  GaugeSeriesModel.type = 'series.gauge';\n  GaugeSeriesModel.defaultOption = {\n    // zlevel: 0,\n    z: 2,\n    colorBy: 'data',\n    // 默认全局居中\n    center: ['50%', '50%'],\n    legendHoverLink: true,\n    radius: '75%',\n    startAngle: 225,\n    endAngle: -45,\n    clockwise: true,\n    // 最小值\n    min: 0,\n    // 最大值\n    max: 100,\n    // 分割段数，默认为10\n    splitNumber: 10,\n    // 坐标轴线\n    axisLine: {\n      // 默认显示，属性show控制显示与否\n      show: true,\n      roundCap: false,\n      lineStyle: {\n        color: [[1, '#E6EBF8']],\n        width: 10\n      }\n    },\n    // 坐标轴线\n    progress: {\n      // 默认显示，属性show控制显示与否\n      show: false,\n      overlap: true,\n      width: 10,\n      roundCap: false,\n      clip: true\n    },\n    // 分隔线\n    splitLine: {\n      // 默认显示，属性show控制显示与否\n      show: true,\n      // 属性length控制线长\n      length: 10,\n      distance: 10,\n      // 属性lineStyle（详见lineStyle）控制线条样式\n      lineStyle: {\n        color: '#63677A',\n        width: 3,\n        type: 'solid'\n      }\n    },\n    // 坐标轴小标记\n    axisTick: {\n      // 属性show控制显示与否，默认不显示\n      show: true,\n      // 每份split细分多少段\n      splitNumber: 5,\n      // 属性length控制线长\n      length: 6,\n      distance: 10,\n      // 属性lineStyle控制线条样式\n      lineStyle: {\n        color: '#63677A',\n        width: 1,\n        type: 'solid'\n      }\n    },\n    axisLabel: {\n      show: true,\n      distance: 15,\n      // formatter: null,\n      color: '#464646',\n      fontSize: 12,\n      rotate: 0\n    },\n    pointer: {\n      icon: null,\n      offsetCenter: [0, 0],\n      show: true,\n      showAbove: true,\n      length: '60%',\n      width: 6,\n      keepAspect: false\n    },\n    anchor: {\n      show: false,\n      showAbove: false,\n      size: 6,\n      icon: 'circle',\n      offsetCenter: [0, 0],\n      keepAspect: false,\n      itemStyle: {\n        color: '#fff',\n        borderWidth: 0,\n        borderColor: '#5470c6'\n      }\n    },\n    title: {\n      show: true,\n      // x, y，单位px\n      offsetCenter: [0, '20%'],\n      // 其余属性默认使用全局文本样式，详见TEXTSTYLE\n      color: '#464646',\n      fontSize: 16,\n      valueAnimation: false\n    },\n    detail: {\n      show: true,\n      backgroundColor: 'rgba(0,0,0,0)',\n      borderWidth: 0,\n      borderColor: '#ccc',\n      width: 100,\n      height: null,\n      padding: [5, 10],\n      // x, y，单位px\n      offsetCenter: [0, '40%'],\n      // formatter: null,\n      // 其余属性默认使用全局文本样式，详见TEXTSTYLE\n      color: '#464646',\n      fontSize: 30,\n      fontWeight: 'bold',\n      lineHeight: 30,\n      valueAnimation: false\n    }\n  };\n  return GaugeSeriesModel;\n}(SeriesModel);\n\nexport default GaugeSeriesModel;","\n/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\n\n\n/**\n * AUTO-GENERATED FILE. DO NOT MODIFY.\n */\n\n/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\nimport GaugeView from './GaugeView.js';\nimport GaugeSeriesModel from './GaugeSeries.js';\nexport function install(registers) {\n  registers.registerChartView(GaugeView);\n  registers.registerSeriesModel(GaugeSeriesModel);\n}"],"names":["PointerShape","this","angle","width","r","x","y","_super","PointerPath","opts","_this","call","type","__extends","prototype","getDefaultShape","buildPath","ctx","shape","mathCos","Math","cos","mathSin","sin","PI","moveTo","lineTo","Path","formatLabel","value","labelFormatter","label","isString","replace","isFunction","GaugeView","apply","arguments","render","seriesModel","ecModel","api","group","removeAll","colorList","get","posInfo","center","getWidth","height","getHeight","size","min","cx","parsePercent","cy","parsePosition","_renderMain","_data","getData","dispose","clockwise","startAngle","endAngle","axisLineModel","getModel","MainPath","Sausage","graphic","showAxis","lineStyleModel","axisLineWidth","angles","normalizeArcAngles","angleRangeSpan","prevEndAngle","i","length","sector","max","r0","silent","setStyle","fill","getLineStyle","add","getColor","percent","_renderTicks","_renderTitleAndDetail","_renderAnchor","_renderPointer","unitX","unitY","minVal","maxVal","splitLineModel","tickModel","labelModel","splitNumber","subSplitNumber","splitLineLen","tickLen","step","subStep","splitLineStyle","tickLineStyle","splitLineDistance","distance","splitLine","x1","y1","x2","y2","style","stroke","round","autoColor","textStyleX","textStyleY","rotateType","rotate","isNumber","createTextStyle","text","verticalAlign","align","inheritColor","originX","originY","rotation","j","tickLine","oldData","oldProgressData","_progressEls","progressList","showPointer","progressModel","showProgress","data","valueDim","mapDimension","valueExtent","angleExtent","createPointer","idx","pointer","pointerModel","getItemModel","pointerWidth","pointerLength","pointerStr","pointerOffset","pointerOffsetX","pointerOffsetY","pointerKeepAspect","createSymbol","createProgress","ProgressPath","isOverlap","progressWidth","count","progress","z2","diff","val","isNaN","linearMap","setItemGraphicEl","isClip","setCommonECData","seriesIndex","dataType","update","newIdx","oldIdx","previousPointer","getItemGraphicEl","previousRotate","previousProgress","execute","each","itemModel","emphasisModel","focus","blurScope","emphasisDisabled","symbolStyle","getItemVisual","visualColor","ZRImage","pathStyle","useStyle","extend","image","setColor","getItemStyle","z2EmphasisLift","setStatesStylesFromModel","toggleHoverEmphasis","anchorModel","anchorSize","anchorType","offsetCenter","anchorKeepAspect","anchor","contentGroup","newTitleEls","newDetailEls","hasAnimation","isAnimationEnabled","showPointerAbove","_titleEls","_detailEls","itemGroup","itemTitleModel","titleOffsetCenter","titleX","titleY","labelEl","attr","getName","itemDetailModel","detailOffsetCenter","detailX","detailY","detailColor","formatter_1","setLabelValueAnimation","normal","animateLabelValue","getFormattedLabel","labelDataIndex","status","labelDimIndex","fmt","extendParams","interpolatedValue","ChartView","GaugeSeriesModel","visualStyleAccessPath","getInitialData","option","createSeriesDataSimply","defaultOption","z","colorBy","legendHoverLink","radius","axisLine","show","roundCap","lineStyle","color","overlap","clip","axisTick","axisLabel","fontSize","icon","showAbove","keepAspect","itemStyle","borderWidth","borderColor","title","valueAnimation","detail","backgroundColor","padding","fontWeight","lineHeight","SeriesModel","install","registers","registerChartView","registerSeriesModel"],"sourceRoot":""}