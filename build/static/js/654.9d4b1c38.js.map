{"version":3,"file":"static/js/654.9d4b1c38.js","mappings":"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","sources":["../node_modules/echarts/lib/model/Series.js"],"sourcesContent":["\n/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\n\n\n/**\n * AUTO-GENERATED FILE. DO NOT MODIFY.\n */\n\n/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\nimport { __extends } from \"tslib\";\nimport * as zrUtil from 'zrender/lib/core/util.js';\nimport env from 'zrender/lib/core/env.js';\nimport * as modelUtil from '../util/model.js';\nimport ComponentModel from './Component.js';\nimport { PaletteMixin } from './mixin/palette.js';\nimport { DataFormatMixin } from '../model/mixin/dataFormat.js';\nimport { getLayoutParams, mergeLayoutParam, fetchLayoutMode } from '../util/layout.js';\nimport { createTask } from '../core/task.js';\nimport { mountExtend } from '../util/clazz.js';\nimport { SourceManager } from '../data/helper/sourceManager.js';\nimport { defaultSeriesFormatTooltip } from '../component/tooltip/seriesFormatTooltip.js';\nvar inner = modelUtil.makeInner();\n\nfunction getSelectionKey(data, dataIndex) {\n  return data.getName(dataIndex) || data.getId(dataIndex);\n}\n\nexport var SERIES_UNIVERSAL_TRANSITION_PROP = '__universalTransitionEnabled';\n\nvar SeriesModel =\n/** @class */\nfunction (_super) {\n  __extends(SeriesModel, _super);\n\n  function SeriesModel() {\n    // [Caution]: Becuase this class or desecendants can be used as `XXX.extend(subProto)`,\n    // the class members must not be initialized in constructor or declaration place.\n    // Otherwise there is bad case:\n    //   class A {xxx = 1;}\n    //   enableClassExtend(A);\n    //   class B extends A {}\n    //   var C = B.extend({xxx: 5});\n    //   var c = new C();\n    //   console.log(c.xxx); // expect 5 but always 1.\n    var _this = _super !== null && _super.apply(this, arguments) || this; // ---------------------------------------\n    // Props about data selection\n    // ---------------------------------------\n\n\n    _this._selectedDataIndicesMap = {};\n    return _this;\n  }\n\n  SeriesModel.prototype.init = function (option, parentModel, ecModel) {\n    this.seriesIndex = this.componentIndex;\n    this.dataTask = createTask({\n      count: dataTaskCount,\n      reset: dataTaskReset\n    });\n    this.dataTask.context = {\n      model: this\n    };\n    this.mergeDefaultAndTheme(option, ecModel);\n    var sourceManager = inner(this).sourceManager = new SourceManager(this);\n    sourceManager.prepareSource();\n    var data = this.getInitialData(option, ecModel);\n    wrapData(data, this);\n    this.dataTask.context.data = data;\n\n    if (process.env.NODE_ENV !== 'production') {\n      zrUtil.assert(data, 'getInitialData returned invalid data.');\n    }\n\n    inner(this).dataBeforeProcessed = data; // If we reverse the order (make data firstly, and then make\n    // dataBeforeProcessed by cloneShallow), cloneShallow will\n    // cause data.graph.data !== data when using\n    // module:echarts/data/Graph or module:echarts/data/Tree.\n    // See module:echarts/data/helper/linkSeriesData\n    // Theoretically, it is unreasonable to call `seriesModel.getData()` in the model\n    // init or merge stage, because the data can be restored. So we do not `restoreData`\n    // and `setData` here, which forbids calling `seriesModel.getData()` in this stage.\n    // Call `seriesModel.getRawData()` instead.\n    // this.restoreData();\n\n    autoSeriesName(this);\n\n    this._initSelectedMapFromData(data);\n  };\n  /**\n   * Util for merge default and theme to option\n   */\n\n\n  SeriesModel.prototype.mergeDefaultAndTheme = function (option, ecModel) {\n    var layoutMode = fetchLayoutMode(this);\n    var inputPositionParams = layoutMode ? getLayoutParams(option) : {}; // Backward compat: using subType on theme.\n    // But if name duplicate between series subType\n    // (for example: parallel) add component mainType,\n    // add suffix 'Series'.\n\n    var themeSubType = this.subType;\n\n    if (ComponentModel.hasClass(themeSubType)) {\n      themeSubType += 'Series';\n    }\n\n    zrUtil.merge(option, ecModel.getTheme().get(this.subType));\n    zrUtil.merge(option, this.getDefaultOption()); // Default label emphasis `show`\n\n    modelUtil.defaultEmphasis(option, 'label', ['show']);\n    this.fillDataTextStyle(option.data);\n\n    if (layoutMode) {\n      mergeLayoutParam(option, inputPositionParams, layoutMode);\n    }\n  };\n\n  SeriesModel.prototype.mergeOption = function (newSeriesOption, ecModel) {\n    // this.settingTask.dirty();\n    newSeriesOption = zrUtil.merge(this.option, newSeriesOption, true);\n    this.fillDataTextStyle(newSeriesOption.data);\n    var layoutMode = fetchLayoutMode(this);\n\n    if (layoutMode) {\n      mergeLayoutParam(this.option, newSeriesOption, layoutMode);\n    }\n\n    var sourceManager = inner(this).sourceManager;\n    sourceManager.dirty();\n    sourceManager.prepareSource();\n    var data = this.getInitialData(newSeriesOption, ecModel);\n    wrapData(data, this);\n    this.dataTask.dirty();\n    this.dataTask.context.data = data;\n    inner(this).dataBeforeProcessed = data;\n    autoSeriesName(this);\n\n    this._initSelectedMapFromData(data);\n  };\n\n  SeriesModel.prototype.fillDataTextStyle = function (data) {\n    // Default data label emphasis `show`\n    // FIXME Tree structure data ?\n    // FIXME Performance ?\n    if (data && !zrUtil.isTypedArray(data)) {\n      var props = ['show'];\n\n      for (var i = 0; i < data.length; i++) {\n        if (data[i] && data[i].label) {\n          modelUtil.defaultEmphasis(data[i], 'label', props);\n        }\n      }\n    }\n  };\n  /**\n   * Init a data structure from data related option in series\n   * Must be overriden.\n   */\n\n\n  SeriesModel.prototype.getInitialData = function (option, ecModel) {\n    return;\n  };\n  /**\n   * Append data to list\n   */\n\n\n  SeriesModel.prototype.appendData = function (params) {\n    // FIXME ???\n    // (1) If data from dataset, forbidden append.\n    // (2) support append data of dataset.\n    var data = this.getRawData();\n    data.appendData(params.data);\n  };\n  /**\n   * Consider some method like `filter`, `map` need make new data,\n   * We should make sure that `seriesModel.getData()` get correct\n   * data in the stream procedure. So we fetch data from upstream\n   * each time `task.perform` called.\n   */\n\n\n  SeriesModel.prototype.getData = function (dataType) {\n    var task = getCurrentTask(this);\n\n    if (task) {\n      var data = task.context.data;\n      return dataType == null ? data : data.getLinkedData(dataType);\n    } else {\n      // When series is not alive (that may happen when click toolbox\n      // restore or setOption with not merge mode), series data may\n      // be still need to judge animation or something when graphic\n      // elements want to know whether fade out.\n      return inner(this).data;\n    }\n  };\n\n  SeriesModel.prototype.getAllData = function () {\n    var mainData = this.getData();\n    return mainData && mainData.getLinkedDataAll ? mainData.getLinkedDataAll() : [{\n      data: mainData\n    }];\n  };\n\n  SeriesModel.prototype.setData = function (data) {\n    var task = getCurrentTask(this);\n\n    if (task) {\n      var context = task.context; // Consider case: filter, data sample.\n      // FIXME:TS never used, so comment it\n      // if (context.data !== data && task.modifyOutputEnd) {\n      //     task.setOutputEnd(data.count());\n      // }\n\n      context.outputData = data; // Caution: setData should update context.data,\n      // Because getData may be called multiply in a\n      // single stage and expect to get the data just\n      // set. (For example, AxisProxy, x y both call\n      // getData and setDate sequentially).\n      // So the context.data should be fetched from\n      // upstream each time when a stage starts to be\n      // performed.\n\n      if (task !== this.dataTask) {\n        context.data = data;\n      }\n    }\n\n    inner(this).data = data;\n  };\n\n  SeriesModel.prototype.getEncode = function () {\n    var encode = this.get('encode', true);\n\n    if (encode) {\n      return zrUtil.createHashMap(encode);\n    }\n  };\n\n  SeriesModel.prototype.getSourceManager = function () {\n    return inner(this).sourceManager;\n  };\n\n  SeriesModel.prototype.getSource = function () {\n    return this.getSourceManager().getSource();\n  };\n  /**\n   * Get data before processed\n   */\n\n\n  SeriesModel.prototype.getRawData = function () {\n    return inner(this).dataBeforeProcessed;\n  };\n\n  SeriesModel.prototype.getColorBy = function () {\n    var colorBy = this.get('colorBy');\n    return colorBy || 'series';\n  };\n\n  SeriesModel.prototype.isColorBySeries = function () {\n    return this.getColorBy() === 'series';\n  };\n  /**\n   * Get base axis if has coordinate system and has axis.\n   * By default use coordSys.getBaseAxis();\n   * Can be overrided for some chart.\n   * @return {type} description\n   */\n\n\n  SeriesModel.prototype.getBaseAxis = function () {\n    var coordSys = this.coordinateSystem; // @ts-ignore\n\n    return coordSys && coordSys.getBaseAxis && coordSys.getBaseAxis();\n  };\n  /**\n   * Default tooltip formatter\n   *\n   * @param dataIndex\n   * @param multipleSeries\n   * @param dataType\n   * @param renderMode valid values: 'html'(by default) and 'richText'.\n   *        'html' is used for rendering tooltip in extra DOM form, and the result\n   *        string is used as DOM HTML content.\n   *        'richText' is used for rendering tooltip in rich text form, for those where\n   *        DOM operation is not supported.\n   * @return formatted tooltip with `html` and `markers`\n   *        Notice: The override method can also return string\n   */\n\n\n  SeriesModel.prototype.formatTooltip = function (dataIndex, multipleSeries, dataType) {\n    return defaultSeriesFormatTooltip({\n      series: this,\n      dataIndex: dataIndex,\n      multipleSeries: multipleSeries\n    });\n  };\n\n  SeriesModel.prototype.isAnimationEnabled = function () {\n    var ecModel = this.ecModel; // Disable animation if using echarts in node but not give ssr flag.\n    // In ssr mode, renderToString will generate svg with css animation.\n\n    if (env.node && !(ecModel && ecModel.ssr)) {\n      return false;\n    }\n\n    var animationEnabled = this.getShallow('animation');\n\n    if (animationEnabled) {\n      if (this.getData().count() > this.getShallow('animationThreshold')) {\n        animationEnabled = false;\n      }\n    }\n\n    return !!animationEnabled;\n  };\n\n  SeriesModel.prototype.restoreData = function () {\n    this.dataTask.dirty();\n  };\n\n  SeriesModel.prototype.getColorFromPalette = function (name, scope, requestColorNum) {\n    var ecModel = this.ecModel; // PENDING\n\n    var color = PaletteMixin.prototype.getColorFromPalette.call(this, name, scope, requestColorNum);\n\n    if (!color) {\n      color = ecModel.getColorFromPalette(name, scope, requestColorNum);\n    }\n\n    return color;\n  };\n  /**\n   * Use `data.mapDimensionsAll(coordDim)` instead.\n   * @deprecated\n   */\n\n\n  SeriesModel.prototype.coordDimToDataDim = function (coordDim) {\n    return this.getRawData().mapDimensionsAll(coordDim);\n  };\n  /**\n   * Get progressive rendering count each step\n   */\n\n\n  SeriesModel.prototype.getProgressive = function () {\n    return this.get('progressive');\n  };\n  /**\n   * Get progressive rendering count each step\n   */\n\n\n  SeriesModel.prototype.getProgressiveThreshold = function () {\n    return this.get('progressiveThreshold');\n  }; // PENGING If selectedMode is null ?\n\n\n  SeriesModel.prototype.select = function (innerDataIndices, dataType) {\n    this._innerSelect(this.getData(dataType), innerDataIndices);\n  };\n\n  SeriesModel.prototype.unselect = function (innerDataIndices, dataType) {\n    var selectedMap = this.option.selectedMap;\n\n    if (!selectedMap) {\n      return;\n    }\n\n    var selectedMode = this.option.selectedMode;\n    var data = this.getData(dataType);\n\n    if (selectedMode === 'series' || selectedMap === 'all') {\n      this.option.selectedMap = {};\n      this._selectedDataIndicesMap = {};\n      return;\n    }\n\n    for (var i = 0; i < innerDataIndices.length; i++) {\n      var dataIndex = innerDataIndices[i];\n      var nameOrId = getSelectionKey(data, dataIndex);\n      selectedMap[nameOrId] = false;\n      this._selectedDataIndicesMap[nameOrId] = -1;\n    }\n  };\n\n  SeriesModel.prototype.toggleSelect = function (innerDataIndices, dataType) {\n    var tmpArr = [];\n\n    for (var i = 0; i < innerDataIndices.length; i++) {\n      tmpArr[0] = innerDataIndices[i];\n      this.isSelected(innerDataIndices[i], dataType) ? this.unselect(tmpArr, dataType) : this.select(tmpArr, dataType);\n    }\n  };\n\n  SeriesModel.prototype.getSelectedDataIndices = function () {\n    if (this.option.selectedMap === 'all') {\n      return [].slice.call(this.getData().getIndices());\n    }\n\n    var selectedDataIndicesMap = this._selectedDataIndicesMap;\n    var nameOrIds = zrUtil.keys(selectedDataIndicesMap);\n    var dataIndices = [];\n\n    for (var i = 0; i < nameOrIds.length; i++) {\n      var dataIndex = selectedDataIndicesMap[nameOrIds[i]];\n\n      if (dataIndex >= 0) {\n        dataIndices.push(dataIndex);\n      }\n    }\n\n    return dataIndices;\n  };\n\n  SeriesModel.prototype.isSelected = function (dataIndex, dataType) {\n    var selectedMap = this.option.selectedMap;\n\n    if (!selectedMap) {\n      return false;\n    }\n\n    var data = this.getData(dataType);\n    return (selectedMap === 'all' || selectedMap[getSelectionKey(data, dataIndex)]) && !data.getItemModel(dataIndex).get(['select', 'disabled']);\n  };\n\n  SeriesModel.prototype.isUniversalTransitionEnabled = function () {\n    if (this[SERIES_UNIVERSAL_TRANSITION_PROP]) {\n      return true;\n    }\n\n    var universalTransitionOpt = this.option.universalTransition; // Quick reject\n\n    if (!universalTransitionOpt) {\n      return false;\n    }\n\n    if (universalTransitionOpt === true) {\n      return true;\n    } // Can be simply 'universalTransition: true'\n\n\n    return universalTransitionOpt && universalTransitionOpt.enabled;\n  };\n\n  SeriesModel.prototype._innerSelect = function (data, innerDataIndices) {\n    var _a, _b;\n\n    var option = this.option;\n    var selectedMode = option.selectedMode;\n    var len = innerDataIndices.length;\n\n    if (!selectedMode || !len) {\n      return;\n    }\n\n    if (selectedMode === 'series') {\n      option.selectedMap = 'all';\n    } else if (selectedMode === 'multiple') {\n      if (!zrUtil.isObject(option.selectedMap)) {\n        option.selectedMap = {};\n      }\n\n      var selectedMap = option.selectedMap;\n\n      for (var i = 0; i < len; i++) {\n        var dataIndex = innerDataIndices[i]; // TODO diffrent types of data share same object.\n\n        var nameOrId = getSelectionKey(data, dataIndex);\n        selectedMap[nameOrId] = true;\n        this._selectedDataIndicesMap[nameOrId] = data.getRawIndex(dataIndex);\n      }\n    } else if (selectedMode === 'single' || selectedMode === true) {\n      var lastDataIndex = innerDataIndices[len - 1];\n      var nameOrId = getSelectionKey(data, lastDataIndex);\n      option.selectedMap = (_a = {}, _a[nameOrId] = true, _a);\n      this._selectedDataIndicesMap = (_b = {}, _b[nameOrId] = data.getRawIndex(lastDataIndex), _b);\n    }\n  };\n\n  SeriesModel.prototype._initSelectedMapFromData = function (data) {\n    // Ignore select info in data if selectedMap exists.\n    // NOTE It's only for legacy usage. edge data is not supported.\n    if (this.option.selectedMap) {\n      return;\n    }\n\n    var dataIndices = [];\n\n    if (data.hasItemOption) {\n      data.each(function (idx) {\n        var rawItem = data.getRawDataItem(idx);\n\n        if (rawItem && rawItem.selected) {\n          dataIndices.push(idx);\n        }\n      });\n    }\n\n    if (dataIndices.length > 0) {\n      this._innerSelect(data, dataIndices);\n    }\n  }; // /**\n  //  * @see {module:echarts/stream/Scheduler}\n  //  */\n  // abstract pipeTask: null\n\n\n  SeriesModel.registerClass = function (clz) {\n    return ComponentModel.registerClass(clz);\n  };\n\n  SeriesModel.protoInitialize = function () {\n    var proto = SeriesModel.prototype;\n    proto.type = 'series.__base__';\n    proto.seriesIndex = 0;\n    proto.ignoreStyleOnData = false;\n    proto.hasSymbolVisual = false;\n    proto.defaultSymbol = 'circle'; // Make sure the values can be accessed!\n\n    proto.visualStyleAccessPath = 'itemStyle';\n    proto.visualDrawType = 'fill';\n  }();\n\n  return SeriesModel;\n}(ComponentModel);\n\nzrUtil.mixin(SeriesModel, DataFormatMixin);\nzrUtil.mixin(SeriesModel, PaletteMixin);\nmountExtend(SeriesModel, ComponentModel);\n/**\n * MUST be called after `prepareSource` called\n * Here we need to make auto series, especially for auto legend. But we\n * do not modify series.name in option to avoid side effects.\n */\n\nfunction autoSeriesName(seriesModel) {\n  // User specified name has higher priority, otherwise it may cause\n  // series can not be queried unexpectedly.\n  var name = seriesModel.name;\n\n  if (!modelUtil.isNameSpecified(seriesModel)) {\n    seriesModel.name = getSeriesAutoName(seriesModel) || name;\n  }\n}\n\nfunction getSeriesAutoName(seriesModel) {\n  var data = seriesModel.getRawData();\n  var dataDims = data.mapDimensionsAll('seriesName');\n  var nameArr = [];\n  zrUtil.each(dataDims, function (dataDim) {\n    var dimInfo = data.getDimensionInfo(dataDim);\n    dimInfo.displayName && nameArr.push(dimInfo.displayName);\n  });\n  return nameArr.join(' ');\n}\n\nfunction dataTaskCount(context) {\n  return context.model.getRawData().count();\n}\n\nfunction dataTaskReset(context) {\n  var seriesModel = context.model;\n  seriesModel.setData(seriesModel.getRawData().cloneShallow());\n  return dataTaskProgress;\n}\n\nfunction dataTaskProgress(param, context) {\n  // Avoid repead cloneShallow when data just created in reset.\n  if (context.outputData && param.end > context.outputData.count()) {\n    context.model.getRawData().cloneShallow(context.outputData);\n  }\n} // TODO refactor\n\n\nfunction wrapData(data, seriesModel) {\n  zrUtil.each(zrUtil.concatArray(data.CHANGABLE_METHODS, data.DOWNSAMPLE_METHODS), function (methodName) {\n    data.wrapMethod(methodName, zrUtil.curry(onDataChange, seriesModel));\n  });\n}\n\nfunction onDataChange(seriesModel, newList) {\n  var task = getCurrentTask(seriesModel);\n\n  if (task) {\n    // Consider case: filter, selectRange\n    task.setOutputEnd((newList || this).count());\n  }\n\n  return newList;\n}\n\nfunction getCurrentTask(seriesModel) {\n  var scheduler = (seriesModel.ecModel || {}).scheduler;\n  var pipeline = scheduler && scheduler.getPipeline(seriesModel.uid);\n\n  if (pipeline) {\n    // When pipline finished, the currrentTask keep the last\n    // task (renderTask).\n    var task = pipeline.currentTask;\n\n    if (task) {\n      var agentStubMap = task.agentStubMap;\n\n      if (agentStubMap) {\n        task = agentStubMap.get(seriesModel.uid);\n      }\n    }\n\n    return task;\n  }\n}\n\nexport default SeriesModel;"],"names":["inner","modelUtil","getSelectionKey","data","dataIndex","getName","getId","SERIES_UNIVERSAL_TRANSITION_PROP","SeriesModel","_super","_this","apply","this","arguments","_selectedDataIndicesMap","proto","__extends","prototype","init","option","parentModel","ecModel","seriesIndex","componentIndex","dataTask","createTask","count","dataTaskCount","reset","dataTaskReset","context","model","mergeDefaultAndTheme","sourceManager","SourceManager","prepareSource","getInitialData","wrapData","dataBeforeProcessed","autoSeriesName","_initSelectedMapFromData","layoutMode","fetchLayoutMode","inputPositionParams","getLayoutParams","themeSubType","subType","ComponentModel","zrUtil","getTheme","get","getDefaultOption","fillDataTextStyle","mergeLayoutParam","mergeOption","newSeriesOption","dirty","props","i","length","label","appendData","params","getRawData","getData","dataType","task","getCurrentTask","getLinkedData","getAllData","mainData","getLinkedDataAll","setData","outputData","getEncode","encode","getSourceManager","getSource","getColorBy","isColorBySeries","getBaseAxis","coordSys","coordinateSystem","formatTooltip","multipleSeries","defaultSeriesFormatTooltip","series","isAnimationEnabled","env","ssr","animationEnabled","getShallow","restoreData","getColorFromPalette","name","scope","requestColorNum","color","PaletteMixin","coordDimToDataDim","coordDim","mapDimensionsAll","getProgressive","getProgressiveThreshold","select","innerDataIndices","_innerSelect","unselect","selectedMap","selectedMode","nameOrId","toggleSelect","tmpArr","isSelected","getSelectedDataIndices","slice","call","getIndices","selectedDataIndicesMap","nameOrIds","dataIndices","push","getItemModel","isUniversalTransitionEnabled","universalTransitionOpt","universalTransition","enabled","_a","_b","len","getRawIndex","lastDataIndex","hasItemOption","each","idx","rawItem","getRawDataItem","selected","registerClass","clz","protoInitialize","type","ignoreStyleOnData","hasSymbolVisual","defaultSymbol","visualStyleAccessPath","visualDrawType","seriesModel","dataDims","nameArr","dataDim","dimInfo","getDimensionInfo","displayName","join","getSeriesAutoName","cloneShallow","dataTaskProgress","param","end","CHANGABLE_METHODS","DOWNSAMPLE_METHODS","methodName","wrapMethod","onDataChange","newList","setOutputEnd","scheduler","pipeline","getPipeline","uid","currentTask","agentStubMap","DataFormatMixin","mountExtend"],"sourceRoot":""}