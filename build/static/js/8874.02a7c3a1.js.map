{"version":3,"file":"static/js/8874.02a7c3a1.js","mappings":"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","sources":["../node_modules/zrender/lib/Storage.js"],"sourcesContent":["import * as util from './core/util.js';\nimport timsort from './core/timsort.js';\nimport { REDRAW_BIT } from './graphic/constants.js';\nvar invalidZErrorLogged = false;\nfunction logInvalidZError() {\n    if (invalidZErrorLogged) {\n        return;\n    }\n    invalidZErrorLogged = true;\n    console.warn('z / z2 / zlevel of displayable is invalid, which may cause unexpected errors');\n}\nfunction shapeCompareFunc(a, b) {\n    if (a.zlevel === b.zlevel) {\n        if (a.z === b.z) {\n            return a.z2 - b.z2;\n        }\n        return a.z - b.z;\n    }\n    return a.zlevel - b.zlevel;\n}\nvar Storage = (function () {\n    function Storage() {\n        this._roots = [];\n        this._displayList = [];\n        this._displayListLen = 0;\n        this.displayableSortFunc = shapeCompareFunc;\n    }\n    Storage.prototype.traverse = function (cb, context) {\n        for (var i = 0; i < this._roots.length; i++) {\n            this._roots[i].traverse(cb, context);\n        }\n    };\n    Storage.prototype.getDisplayList = function (update, includeIgnore) {\n        includeIgnore = includeIgnore || false;\n        var displayList = this._displayList;\n        if (update || !displayList.length) {\n            this.updateDisplayList(includeIgnore);\n        }\n        return displayList;\n    };\n    Storage.prototype.updateDisplayList = function (includeIgnore) {\n        this._displayListLen = 0;\n        var roots = this._roots;\n        var displayList = this._displayList;\n        for (var i = 0, len = roots.length; i < len; i++) {\n            this._updateAndAddDisplayable(roots[i], null, includeIgnore);\n        }\n        displayList.length = this._displayListLen;\n        timsort(displayList, shapeCompareFunc);\n    };\n    Storage.prototype._updateAndAddDisplayable = function (el, clipPaths, includeIgnore) {\n        if (el.ignore && !includeIgnore) {\n            return;\n        }\n        el.beforeUpdate();\n        el.update();\n        el.afterUpdate();\n        var userSetClipPath = el.getClipPath();\n        if (el.ignoreClip) {\n            clipPaths = null;\n        }\n        else if (userSetClipPath) {\n            if (clipPaths) {\n                clipPaths = clipPaths.slice();\n            }\n            else {\n                clipPaths = [];\n            }\n            var currentClipPath = userSetClipPath;\n            var parentClipPath = el;\n            while (currentClipPath) {\n                currentClipPath.parent = parentClipPath;\n                currentClipPath.updateTransform();\n                clipPaths.push(currentClipPath);\n                parentClipPath = currentClipPath;\n                currentClipPath = currentClipPath.getClipPath();\n            }\n        }\n        if (el.childrenRef) {\n            var children = el.childrenRef();\n            for (var i = 0; i < children.length; i++) {\n                var child = children[i];\n                if (el.__dirty) {\n                    child.__dirty |= REDRAW_BIT;\n                }\n                this._updateAndAddDisplayable(child, clipPaths, includeIgnore);\n            }\n            el.__dirty = 0;\n        }\n        else {\n            var disp = el;\n            if (clipPaths && clipPaths.length) {\n                disp.__clipPaths = clipPaths;\n            }\n            else if (disp.__clipPaths && disp.__clipPaths.length > 0) {\n                disp.__clipPaths = [];\n            }\n            if (isNaN(disp.z)) {\n                logInvalidZError();\n                disp.z = 0;\n            }\n            if (isNaN(disp.z2)) {\n                logInvalidZError();\n                disp.z2 = 0;\n            }\n            if (isNaN(disp.zlevel)) {\n                logInvalidZError();\n                disp.zlevel = 0;\n            }\n            this._displayList[this._displayListLen++] = disp;\n        }\n        var decalEl = el.getDecalElement && el.getDecalElement();\n        if (decalEl) {\n            this._updateAndAddDisplayable(decalEl, clipPaths, includeIgnore);\n        }\n        var textGuide = el.getTextGuideLine();\n        if (textGuide) {\n            this._updateAndAddDisplayable(textGuide, clipPaths, includeIgnore);\n        }\n        var textEl = el.getTextContent();\n        if (textEl) {\n            this._updateAndAddDisplayable(textEl, clipPaths, includeIgnore);\n        }\n    };\n    Storage.prototype.addRoot = function (el) {\n        if (el.__zr && el.__zr.storage === this) {\n            return;\n        }\n        this._roots.push(el);\n    };\n    Storage.prototype.delRoot = function (el) {\n        if (el instanceof Array) {\n            for (var i = 0, l = el.length; i < l; i++) {\n                this.delRoot(el[i]);\n            }\n            return;\n        }\n        var idx = util.indexOf(this._roots, el);\n        if (idx >= 0) {\n            this._roots.splice(idx, 1);\n        }\n    };\n    Storage.prototype.delAllRoots = function () {\n        this._roots = [];\n        this._displayList = [];\n        this._displayListLen = 0;\n        return;\n    };\n    Storage.prototype.getRoots = function () {\n        return this._roots;\n    };\n    Storage.prototype.dispose = function () {\n        this._displayList = null;\n        this._roots = null;\n    };\n    return Storage;\n}());\nexport default Storage;\n"],"names":["invalidZErrorLogged","logInvalidZError","console","warn","shapeCompareFunc","a","b","zlevel","z","z2","Storage","this","_roots","_displayList","_displayListLen","displayableSortFunc","prototype","traverse","cb","context","i","length","getDisplayList","update","includeIgnore","displayList","updateDisplayList","roots","len","_updateAndAddDisplayable","timsort","el","clipPaths","ignore","beforeUpdate","afterUpdate","userSetClipPath","getClipPath","ignoreClip","slice","currentClipPath","parentClipPath","parent","updateTransform","push","childrenRef","children","child","__dirty","REDRAW_BIT","disp","__clipPaths","isNaN","decalEl","getDecalElement","textGuide","getTextGuideLine","textEl","getTextContent","addRoot","__zr","storage","delRoot","Array","l","idx","util","splice","delAllRoots","getRoots","dispose"],"sourceRoot":""}