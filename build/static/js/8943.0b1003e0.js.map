{"version":3,"file":"static/js/8943.0b1003e0.js","mappings":"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","sources":["../node_modules/echarts/lib/label/labelStyle.js"],"sourcesContent":["\n/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\n\n\n/**\n * AUTO-GENERATED FILE. DO NOT MODIFY.\n */\n\n/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\nimport ZRText from 'zrender/lib/graphic/Text.js';\nimport { isFunction, retrieve2, extend, keys, trim } from 'zrender/lib/core/util.js';\nimport { SPECIAL_STATES, DISPLAY_STATES } from '../util/states.js';\nimport { deprecateReplaceLog } from '../util/log.js';\nimport { makeInner, interpolateRawValues } from '../util/model.js';\nimport { initProps, updateProps } from '../util/graphic.js';\nvar EMPTY_OBJ = {};\nexport function setLabelText(label, labelTexts) {\n  for (var i = 0; i < SPECIAL_STATES.length; i++) {\n    var stateName = SPECIAL_STATES[i];\n    var text = labelTexts[stateName];\n    var state = label.ensureState(stateName);\n    state.style = state.style || {};\n    state.style.text = text;\n  }\n\n  var oldStates = label.currentStates.slice();\n  label.clearStates(true);\n  label.setStyle({\n    text: labelTexts.normal\n  });\n  label.useStates(oldStates, true);\n}\n\nfunction getLabelText(opt, stateModels, interpolatedValue) {\n  var labelFetcher = opt.labelFetcher;\n  var labelDataIndex = opt.labelDataIndex;\n  var labelDimIndex = opt.labelDimIndex;\n  var normalModel = stateModels.normal;\n  var baseText;\n\n  if (labelFetcher) {\n    baseText = labelFetcher.getFormattedLabel(labelDataIndex, 'normal', null, labelDimIndex, normalModel && normalModel.get('formatter'), interpolatedValue != null ? {\n      interpolatedValue: interpolatedValue\n    } : null);\n  }\n\n  if (baseText == null) {\n    baseText = isFunction(opt.defaultText) ? opt.defaultText(labelDataIndex, opt, interpolatedValue) : opt.defaultText;\n  }\n\n  var statesText = {\n    normal: baseText\n  };\n\n  for (var i = 0; i < SPECIAL_STATES.length; i++) {\n    var stateName = SPECIAL_STATES[i];\n    var stateModel = stateModels[stateName];\n    statesText[stateName] = retrieve2(labelFetcher ? labelFetcher.getFormattedLabel(labelDataIndex, stateName, null, labelDimIndex, stateModel && stateModel.get('formatter')) : null, baseText);\n  }\n\n  return statesText;\n}\n\nfunction setLabelStyle(targetEl, labelStatesModels, opt, stateSpecified // TODO specified position?\n) {\n  opt = opt || EMPTY_OBJ;\n  var isSetOnText = targetEl instanceof ZRText;\n  var needsCreateText = false;\n\n  for (var i = 0; i < DISPLAY_STATES.length; i++) {\n    var stateModel = labelStatesModels[DISPLAY_STATES[i]];\n\n    if (stateModel && stateModel.getShallow('show')) {\n      needsCreateText = true;\n      break;\n    }\n  }\n\n  var textContent = isSetOnText ? targetEl : targetEl.getTextContent();\n\n  if (needsCreateText) {\n    if (!isSetOnText) {\n      // Reuse the previous\n      if (!textContent) {\n        textContent = new ZRText();\n        targetEl.setTextContent(textContent);\n      } // Use same state proxy\n\n\n      if (targetEl.stateProxy) {\n        textContent.stateProxy = targetEl.stateProxy;\n      }\n    }\n\n    var labelStatesTexts = getLabelText(opt, labelStatesModels);\n    var normalModel = labelStatesModels.normal;\n    var showNormal = !!normalModel.getShallow('show');\n    var normalStyle = createTextStyle(normalModel, stateSpecified && stateSpecified.normal, opt, false, !isSetOnText);\n    normalStyle.text = labelStatesTexts.normal;\n\n    if (!isSetOnText) {\n      // Always create new\n      targetEl.setTextConfig(createTextConfig(normalModel, opt, false));\n    }\n\n    for (var i = 0; i < SPECIAL_STATES.length; i++) {\n      var stateName = SPECIAL_STATES[i];\n      var stateModel = labelStatesModels[stateName];\n\n      if (stateModel) {\n        var stateObj = textContent.ensureState(stateName);\n        var stateShow = !!retrieve2(stateModel.getShallow('show'), showNormal);\n\n        if (stateShow !== showNormal) {\n          stateObj.ignore = !stateShow;\n        }\n\n        stateObj.style = createTextStyle(stateModel, stateSpecified && stateSpecified[stateName], opt, true, !isSetOnText);\n        stateObj.style.text = labelStatesTexts[stateName];\n\n        if (!isSetOnText) {\n          var targetElEmphasisState = targetEl.ensureState(stateName);\n          targetElEmphasisState.textConfig = createTextConfig(stateModel, opt, true);\n        }\n      }\n    } // PENDING: if there is many requirements that emphasis position\n    // need to be different from normal position, we might consider\n    // auto slient is those cases.\n\n\n    textContent.silent = !!normalModel.getShallow('silent'); // Keep x and y\n\n    if (textContent.style.x != null) {\n      normalStyle.x = textContent.style.x;\n    }\n\n    if (textContent.style.y != null) {\n      normalStyle.y = textContent.style.y;\n    }\n\n    textContent.ignore = !showNormal; // Always create new style.\n\n    textContent.useStyle(normalStyle);\n    textContent.dirty();\n\n    if (opt.enableTextSetter) {\n      labelInner(textContent).setLabelText = function (interpolatedValue) {\n        var labelStatesTexts = getLabelText(opt, labelStatesModels, interpolatedValue);\n        setLabelText(textContent, labelStatesTexts);\n      };\n    }\n  } else if (textContent) {\n    // Not display rich text.\n    textContent.ignore = true;\n  }\n\n  targetEl.dirty();\n}\n\nexport { setLabelStyle };\nexport function getLabelStatesModels(itemModel, labelName) {\n  labelName = labelName || 'label';\n  var statesModels = {\n    normal: itemModel.getModel(labelName)\n  };\n\n  for (var i = 0; i < SPECIAL_STATES.length; i++) {\n    var stateName = SPECIAL_STATES[i];\n    statesModels[stateName] = itemModel.getModel([stateName, labelName]);\n  }\n\n  return statesModels;\n}\n/**\n * Set basic textStyle properties.\n */\n\nexport function createTextStyle(textStyleModel, specifiedTextStyle, // Fixed style in the code. Can't be set by model.\nopt, isNotNormal, isAttached // If text is attached on an element. If so, auto color will handling in zrender.\n) {\n  var textStyle = {};\n  setTextStyleCommon(textStyle, textStyleModel, opt, isNotNormal, isAttached);\n  specifiedTextStyle && extend(textStyle, specifiedTextStyle); // textStyle.host && textStyle.host.dirty && textStyle.host.dirty(false);\n\n  return textStyle;\n}\nexport function createTextConfig(textStyleModel, opt, isNotNormal) {\n  opt = opt || {};\n  var textConfig = {};\n  var labelPosition;\n  var labelRotate = textStyleModel.getShallow('rotate');\n  var labelDistance = retrieve2(textStyleModel.getShallow('distance'), isNotNormal ? null : 5);\n  var labelOffset = textStyleModel.getShallow('offset');\n  labelPosition = textStyleModel.getShallow('position') || (isNotNormal ? null : 'inside'); // 'outside' is not a valid zr textPostion value, but used\n  // in bar series, and magric type should be considered.\n\n  labelPosition === 'outside' && (labelPosition = opt.defaultOutsidePosition || 'top');\n\n  if (labelPosition != null) {\n    textConfig.position = labelPosition;\n  }\n\n  if (labelOffset != null) {\n    textConfig.offset = labelOffset;\n  }\n\n  if (labelRotate != null) {\n    labelRotate *= Math.PI / 180;\n    textConfig.rotation = labelRotate;\n  }\n\n  if (labelDistance != null) {\n    textConfig.distance = labelDistance;\n  } // fill and auto is determined by the color of path fill if it's not specified by developers.\n\n\n  textConfig.outsideFill = textStyleModel.get('color') === 'inherit' ? opt.inheritColor || null : 'auto';\n  return textConfig;\n}\n/**\n * The uniform entry of set text style, that is, retrieve style definitions\n * from `model` and set to `textStyle` object.\n *\n * Never in merge mode, but in overwrite mode, that is, all of the text style\n * properties will be set. (Consider the states of normal and emphasis and\n * default value can be adopted, merge would make the logic too complicated\n * to manage.)\n */\n\nfunction setTextStyleCommon(textStyle, textStyleModel, opt, isNotNormal, isAttached) {\n  // Consider there will be abnormal when merge hover style to normal style if given default value.\n  opt = opt || EMPTY_OBJ;\n  var ecModel = textStyleModel.ecModel;\n  var globalTextStyle = ecModel && ecModel.option.textStyle; // Consider case:\n  // {\n  //     data: [{\n  //         value: 12,\n  //         label: {\n  //             rich: {\n  //                 // no 'a' here but using parent 'a'.\n  //             }\n  //         }\n  //     }],\n  //     rich: {\n  //         a: { ... }\n  //     }\n  // }\n\n  var richItemNames = getRichItemNames(textStyleModel);\n  var richResult;\n\n  if (richItemNames) {\n    richResult = {};\n\n    for (var name_1 in richItemNames) {\n      if (richItemNames.hasOwnProperty(name_1)) {\n        // Cascade is supported in rich.\n        var richTextStyle = textStyleModel.getModel(['rich', name_1]); // In rich, never `disableBox`.\n        // FIXME: consider `label: {formatter: '{a|xx}', color: 'blue', rich: {a: {}}}`,\n        // the default color `'blue'` will not be adopted if no color declared in `rich`.\n        // That might confuses users. So probably we should put `textStyleModel` as the\n        // root ancestor of the `richTextStyle`. But that would be a break change.\n\n        setTokenTextStyle(richResult[name_1] = {}, richTextStyle, globalTextStyle, opt, isNotNormal, isAttached, false, true);\n      }\n    }\n  }\n\n  if (richResult) {\n    textStyle.rich = richResult;\n  }\n\n  var overflow = textStyleModel.get('overflow');\n\n  if (overflow) {\n    textStyle.overflow = overflow;\n  }\n\n  var margin = textStyleModel.get('minMargin');\n\n  if (margin != null) {\n    textStyle.margin = margin;\n  }\n\n  setTokenTextStyle(textStyle, textStyleModel, globalTextStyle, opt, isNotNormal, isAttached, true, false);\n} // Consider case:\n// {\n//     data: [{\n//         value: 12,\n//         label: {\n//             rich: {\n//                 // no 'a' here but using parent 'a'.\n//             }\n//         }\n//     }],\n//     rich: {\n//         a: { ... }\n//     }\n// }\n// TODO TextStyleModel\n\n\nfunction getRichItemNames(textStyleModel) {\n  // Use object to remove duplicated names.\n  var richItemNameMap;\n\n  while (textStyleModel && textStyleModel !== textStyleModel.ecModel) {\n    var rich = (textStyleModel.option || EMPTY_OBJ).rich;\n\n    if (rich) {\n      richItemNameMap = richItemNameMap || {};\n      var richKeys = keys(rich);\n\n      for (var i = 0; i < richKeys.length; i++) {\n        var richKey = richKeys[i];\n        richItemNameMap[richKey] = 1;\n      }\n    }\n\n    textStyleModel = textStyleModel.parentModel;\n  }\n\n  return richItemNameMap;\n}\n\nvar TEXT_PROPS_WITH_GLOBAL = ['fontStyle', 'fontWeight', 'fontSize', 'fontFamily', 'textShadowColor', 'textShadowBlur', 'textShadowOffsetX', 'textShadowOffsetY'];\nvar TEXT_PROPS_SELF = ['align', 'lineHeight', 'width', 'height', 'tag', 'verticalAlign'];\nvar TEXT_PROPS_BOX = ['padding', 'borderWidth', 'borderRadius', 'borderDashOffset', 'backgroundColor', 'borderColor', 'shadowColor', 'shadowBlur', 'shadowOffsetX', 'shadowOffsetY'];\n\nfunction setTokenTextStyle(textStyle, textStyleModel, globalTextStyle, opt, isNotNormal, isAttached, isBlock, inRich) {\n  // In merge mode, default value should not be given.\n  globalTextStyle = !isNotNormal && globalTextStyle || EMPTY_OBJ;\n  var inheritColor = opt && opt.inheritColor;\n  var fillColor = textStyleModel.getShallow('color');\n  var strokeColor = textStyleModel.getShallow('textBorderColor');\n  var opacity = retrieve2(textStyleModel.getShallow('opacity'), globalTextStyle.opacity);\n\n  if (fillColor === 'inherit' || fillColor === 'auto') {\n    if (process.env.NODE_ENV !== 'production') {\n      if (fillColor === 'auto') {\n        deprecateReplaceLog('color: \\'auto\\'', 'color: \\'inherit\\'');\n      }\n    }\n\n    if (inheritColor) {\n      fillColor = inheritColor;\n    } else {\n      fillColor = null;\n    }\n  }\n\n  if (strokeColor === 'inherit' || strokeColor === 'auto') {\n    if (process.env.NODE_ENV !== 'production') {\n      if (strokeColor === 'auto') {\n        deprecateReplaceLog('color: \\'auto\\'', 'color: \\'inherit\\'');\n      }\n    }\n\n    if (inheritColor) {\n      strokeColor = inheritColor;\n    } else {\n      strokeColor = null;\n    }\n  }\n\n  if (!isAttached) {\n    // Only use default global textStyle.color if text is individual.\n    // Otherwise it will use the strategy of attached text color because text may be on a path.\n    fillColor = fillColor || globalTextStyle.color;\n    strokeColor = strokeColor || globalTextStyle.textBorderColor;\n  }\n\n  if (fillColor != null) {\n    textStyle.fill = fillColor;\n  }\n\n  if (strokeColor != null) {\n    textStyle.stroke = strokeColor;\n  }\n\n  var textBorderWidth = retrieve2(textStyleModel.getShallow('textBorderWidth'), globalTextStyle.textBorderWidth);\n\n  if (textBorderWidth != null) {\n    textStyle.lineWidth = textBorderWidth;\n  }\n\n  var textBorderType = retrieve2(textStyleModel.getShallow('textBorderType'), globalTextStyle.textBorderType);\n\n  if (textBorderType != null) {\n    textStyle.lineDash = textBorderType;\n  }\n\n  var textBorderDashOffset = retrieve2(textStyleModel.getShallow('textBorderDashOffset'), globalTextStyle.textBorderDashOffset);\n\n  if (textBorderDashOffset != null) {\n    textStyle.lineDashOffset = textBorderDashOffset;\n  }\n\n  if (!isNotNormal && opacity == null && !inRich) {\n    opacity = opt && opt.defaultOpacity;\n  }\n\n  if (opacity != null) {\n    textStyle.opacity = opacity;\n  } // TODO\n\n\n  if (!isNotNormal && !isAttached) {\n    // Set default finally.\n    if (textStyle.fill == null && opt.inheritColor) {\n      textStyle.fill = opt.inheritColor;\n    }\n  } // Do not use `getFont` here, because merge should be supported, where\n  // part of these properties may be changed in emphasis style, and the\n  // others should remain their original value got from normal style.\n\n\n  for (var i = 0; i < TEXT_PROPS_WITH_GLOBAL.length; i++) {\n    var key = TEXT_PROPS_WITH_GLOBAL[i];\n    var val = retrieve2(textStyleModel.getShallow(key), globalTextStyle[key]);\n\n    if (val != null) {\n      textStyle[key] = val;\n    }\n  }\n\n  for (var i = 0; i < TEXT_PROPS_SELF.length; i++) {\n    var key = TEXT_PROPS_SELF[i];\n    var val = textStyleModel.getShallow(key);\n\n    if (val != null) {\n      textStyle[key] = val;\n    }\n  }\n\n  if (textStyle.verticalAlign == null) {\n    var baseline = textStyleModel.getShallow('baseline');\n\n    if (baseline != null) {\n      textStyle.verticalAlign = baseline;\n    }\n  }\n\n  if (!isBlock || !opt.disableBox) {\n    for (var i = 0; i < TEXT_PROPS_BOX.length; i++) {\n      var key = TEXT_PROPS_BOX[i];\n      var val = textStyleModel.getShallow(key);\n\n      if (val != null) {\n        textStyle[key] = val;\n      }\n    }\n\n    var borderType = textStyleModel.getShallow('borderType');\n\n    if (borderType != null) {\n      textStyle.borderDash = borderType;\n    }\n\n    if ((textStyle.backgroundColor === 'auto' || textStyle.backgroundColor === 'inherit') && inheritColor) {\n      if (process.env.NODE_ENV !== 'production') {\n        if (textStyle.backgroundColor === 'auto') {\n          deprecateReplaceLog('backgroundColor: \\'auto\\'', 'backgroundColor: \\'inherit\\'');\n        }\n      }\n\n      textStyle.backgroundColor = inheritColor;\n    }\n\n    if ((textStyle.borderColor === 'auto' || textStyle.borderColor === 'inherit') && inheritColor) {\n      if (process.env.NODE_ENV !== 'production') {\n        if (textStyle.borderColor === 'auto') {\n          deprecateReplaceLog('borderColor: \\'auto\\'', 'borderColor: \\'inherit\\'');\n        }\n      }\n\n      textStyle.borderColor = inheritColor;\n    }\n  }\n}\n\nexport function getFont(opt, ecModel) {\n  var gTextStyleModel = ecModel && ecModel.getModel('textStyle');\n  return trim([// FIXME in node-canvas fontWeight is before fontStyle\n  opt.fontStyle || gTextStyleModel && gTextStyleModel.getShallow('fontStyle') || '', opt.fontWeight || gTextStyleModel && gTextStyleModel.getShallow('fontWeight') || '', (opt.fontSize || gTextStyleModel && gTextStyleModel.getShallow('fontSize') || 12) + 'px', opt.fontFamily || gTextStyleModel && gTextStyleModel.getShallow('fontFamily') || 'sans-serif'].join(' '));\n}\nexport var labelInner = makeInner();\nexport function setLabelValueAnimation(label, labelStatesModels, value, getDefaultText) {\n  if (!label) {\n    return;\n  }\n\n  var obj = labelInner(label);\n  obj.prevValue = obj.value;\n  obj.value = value;\n  var normalLabelModel = labelStatesModels.normal;\n  obj.valueAnimation = normalLabelModel.get('valueAnimation');\n\n  if (obj.valueAnimation) {\n    obj.precision = normalLabelModel.get('precision');\n    obj.defaultInterpolatedText = getDefaultText;\n    obj.statesModels = labelStatesModels;\n  }\n}\nexport function animateLabelValue(textEl, dataIndex, data, animatableModel, labelFetcher) {\n  var labelInnerStore = labelInner(textEl);\n\n  if (!labelInnerStore.valueAnimation || labelInnerStore.prevValue === labelInnerStore.value) {\n    // Value not changed, no new label animation\n    return;\n  }\n\n  var defaultInterpolatedText = labelInnerStore.defaultInterpolatedText; // Consider the case that being animating, do not use the `obj.value`,\n  // Otherwise it will jump to the `obj.value` when this new animation started.\n\n  var currValue = retrieve2(labelInnerStore.interpolatedValue, labelInnerStore.prevValue);\n  var targetValue = labelInnerStore.value;\n\n  function during(percent) {\n    var interpolated = interpolateRawValues(data, labelInnerStore.precision, currValue, targetValue, percent);\n    labelInnerStore.interpolatedValue = percent === 1 ? null : interpolated;\n    var labelText = getLabelText({\n      labelDataIndex: dataIndex,\n      labelFetcher: labelFetcher,\n      defaultText: defaultInterpolatedText ? defaultInterpolatedText(interpolated) : interpolated + ''\n    }, labelInnerStore.statesModels, interpolated);\n    setLabelText(textEl, labelText);\n  }\n\n  textEl.percent = 0;\n  (labelInnerStore.prevValue == null ? initProps : updateProps)(textEl, {\n    // percent is used to prevent animation from being aborted #15916\n    percent: 1\n  }, animatableModel, dataIndex, null, during);\n}"],"names":["EMPTY_OBJ","setLabelText","label","labelTexts","i","SPECIAL_STATES","stateName","text","state","ensureState","style","oldStates","currentStates","slice","clearStates","setStyle","normal","useStates","getLabelText","opt","stateModels","interpolatedValue","baseText","labelFetcher","labelDataIndex","labelDimIndex","normalModel","getFormattedLabel","get","isFunction","defaultText","statesText","stateModel","retrieve2","setLabelStyle","targetEl","labelStatesModels","stateSpecified","isSetOnText","ZRText","needsCreateText","DISPLAY_STATES","getShallow","textContent","getTextContent","setTextContent","stateProxy","labelStatesTexts","showNormal","normalStyle","createTextStyle","setTextConfig","createTextConfig","stateObj","stateShow","ignore","textConfig","silent","x","y","useStyle","dirty","enableTextSetter","labelInner","getLabelStatesModels","itemModel","labelName","statesModels","getModel","textStyleModel","specifiedTextStyle","isNotNormal","isAttached","textStyle","richResult","ecModel","globalTextStyle","option","richItemNames","richItemNameMap","rich","richKeys","keys","length","parentModel","getRichItemNames","name_1","hasOwnProperty","richTextStyle","setTokenTextStyle","overflow","margin","setTextStyleCommon","extend","labelPosition","labelRotate","labelDistance","labelOffset","defaultOutsidePosition","position","offset","Math","PI","rotation","distance","outsideFill","inheritColor","TEXT_PROPS_WITH_GLOBAL","TEXT_PROPS_SELF","TEXT_PROPS_BOX","isBlock","inRich","fillColor","strokeColor","opacity","color","textBorderColor","fill","stroke","textBorderWidth","lineWidth","textBorderType","lineDash","textBorderDashOffset","lineDashOffset","defaultOpacity","key","val","verticalAlign","baseline","disableBox","borderType","borderDash","backgroundColor","borderColor","getFont","gTextStyleModel","trim","fontStyle","fontWeight","fontSize","fontFamily","join","makeInner","setLabelValueAnimation","value","getDefaultText","obj","prevValue","normalLabelModel","valueAnimation","precision","defaultInterpolatedText","animateLabelValue","textEl","dataIndex","data","animatableModel","labelInnerStore","currValue","targetValue","percent","initProps","updateProps","interpolated","interpolateRawValues","labelText"],"sourceRoot":""}