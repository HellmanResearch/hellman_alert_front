{"version":3,"file":"static/js/3684.1864e63a.js","mappings":"4HAiDIA,GAAQC,E,SAAAA,MAkCZ,SAASC,EAAkBC,EAAKC,GAC9B,GA0DOJ,EADWK,EAzDHC,MA0DIC,WAAaF,EA1DV,CAEpB,IAAIG,GAAQC,EAAAA,EAAAA,IAAO,CAAC,EAAGT,EAAMM,MAAME,OACnCA,EAAMF,KAAKI,UAAYN,EACvBO,EAAQP,EAAKI,EAAOL,EACtB,MAEES,EAAWR,EAAKE,KAAKI,SAAUV,EAAMM,MAAMC,SAAUJ,GAkDzD,IAAoBE,EA/ClB,OAAOD,CACT,CAEA,SAASS,EAAgBV,EAAKC,GAE5B,OADAD,EAAIW,QAAUX,EAAIW,OAAOC,SAClBX,CACT,CAEA,SAASY,EAAsBb,EAAKC,GAQlC,OAHAa,EAAAA,EAAAA,IAAKjB,EAAMI,GAAKI,OAAO,SAAUH,EAAMK,GACrCL,IAASD,GAAOQ,EAAWP,EAAKa,eAAgBR,EAAUN,EAAKD,EACjE,IACOC,CACT,CASA,SAASe,EAAcT,GACrB,IAAIH,EAAWP,EAAMM,MAAMC,SAC3B,OAAmB,MAAZG,GAAgC,MAAZH,EAAmBA,EAAWP,EAAMO,GAAUC,MAAME,EACjF,CAMA,SAASU,IACP,IAAIb,EAAWP,EAAMM,MAAMC,SAC3B,OAAmB,MAAZA,EAAmB,CAAC,CACzBF,KAAME,KACHc,EAAAA,EAAAA,KAAIC,EAAAA,EAAAA,IAAKtB,EAAMO,GAAUC,QAAQ,SAAUe,GAC9C,MAAO,CACLA,KAAMA,EACNlB,KAAML,EAAMO,GAAUC,MAAMe,GAEhC,GACF,CAMA,SAASZ,EAAQJ,EAAUC,EAAOL,GAChCH,EAAMO,GAAUC,MAAQ,CAAC,GACzBS,EAAAA,EAAAA,IAAKT,GAAO,SAAUH,EAAMK,GAC1BE,EAAWP,EAAMK,EAAUH,EAAUJ,EACvC,GACF,CAEA,SAASS,EAAWP,EAAMK,EAAUH,EAAUJ,GAC5CH,EAAMO,GAAUC,MAAME,GAAYL,EAClCL,EAAMK,GAAME,SAAWA,EACvBF,EAAKK,SAAWA,EAEZP,EAAIW,SACNT,EAAKF,EAAIqB,YAAcrB,EAAIW,OAC3BX,EAAIW,OAAOX,EAAIsB,UAAUf,IAAaL,GAIxCA,EAAKc,cAAgBA,EACrBd,EAAKe,iBAAmBA,CAC1B,CAEA,IApHA,SAAwBjB,GACtB,IAAII,EAAWJ,EAAII,SACfC,EAAQL,EAAIK,MAEXA,IACHA,EAAQ,CACNkB,KAAMnB,GAERJ,EAAIsB,UAAY,CACdC,KAAM,SAIVvB,EAAIK,MAAQL,EAAII,SAAW,KAC3BI,EAAQJ,EAAUC,EAAOL,IAEzBc,EAAAA,EAAAA,IAAKT,GAAO,SAAUH,IACpBY,EAAAA,EAAAA,IAAKV,EAASoB,sBAAsB,SAAUC,GAC5CvB,EAAKwB,WAAWD,GAAYE,EAAAA,EAAAA,IAAM5B,EAAmBC,GACvD,GACF,IAEAI,EAASsB,WAAW,gBAAgBC,EAAAA,EAAAA,IAAMd,EAAuBb,KAGjEc,EAAAA,EAAAA,IAAKV,EAASwB,mBAAmB,SAAUH,GACzCrB,EAASsB,WAAWD,GAAYE,EAAAA,EAAAA,IAAMjB,EAAiBV,GACzD,KAEA6B,EAAAA,EAAAA,IAAOxB,EAAMD,EAASG,YAAcH,EACtC,C","sources":["../node_modules/echarts/lib/data/helper/linkSeriesData.js"],"sourcesContent":["\n/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\n\n\n/**\n * AUTO-GENERATED FILE. DO NOT MODIFY.\n */\n\n/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\n\n/**\n * Link lists and struct (graph or tree)\n */\nimport { curry, each, assert, extend, map, keys } from 'zrender/lib/core/util.js';\nimport { makeInner } from '../../util/model.js';\nvar inner = makeInner();\n\nfunction linkSeriesData(opt) {\n  var mainData = opt.mainData;\n  var datas = opt.datas;\n\n  if (!datas) {\n    datas = {\n      main: mainData\n    };\n    opt.datasAttr = {\n      main: 'data'\n    };\n  }\n\n  opt.datas = opt.mainData = null;\n  linkAll(mainData, datas, opt); // Porxy data original methods.\n\n  each(datas, function (data) {\n    each(mainData.TRANSFERABLE_METHODS, function (methodName) {\n      data.wrapMethod(methodName, curry(transferInjection, opt));\n    });\n  }); // Beyond transfer, additional features should be added to `cloneShallow`.\n\n  mainData.wrapMethod('cloneShallow', curry(cloneShallowInjection, opt)); // Only mainData trigger change, because struct.update may trigger\n  // another changable methods, which may bring about dead lock.\n\n  each(mainData.CHANGABLE_METHODS, function (methodName) {\n    mainData.wrapMethod(methodName, curry(changeInjection, opt));\n  }); // Make sure datas contains mainData.\n\n  assert(datas[mainData.dataType] === mainData);\n}\n\nfunction transferInjection(opt, res) {\n  if (isMainData(this)) {\n    // Transfer datas to new main data.\n    var datas = extend({}, inner(this).datas);\n    datas[this.dataType] = res;\n    linkAll(res, datas, opt);\n  } else {\n    // Modify the reference in main data to point newData.\n    linkSingle(res, this.dataType, inner(this).mainData, opt);\n  }\n\n  return res;\n}\n\nfunction changeInjection(opt, res) {\n  opt.struct && opt.struct.update();\n  return res;\n}\n\nfunction cloneShallowInjection(opt, res) {\n  // cloneShallow, which brings about some fragilities, may be inappropriate\n  // to be exposed as an API. So for implementation simplicity we can make\n  // the restriction that cloneShallow of not-mainData should not be invoked\n  // outside, but only be invoked here.\n  each(inner(res).datas, function (data, dataType) {\n    data !== res && linkSingle(data.cloneShallow(), dataType, res, opt);\n  });\n  return res;\n}\n/**\n * Supplement method to List.\n *\n * @public\n * @param [dataType] If not specified, return mainData.\n */\n\n\nfunction getLinkedData(dataType) {\n  var mainData = inner(this).mainData;\n  return dataType == null || mainData == null ? mainData : inner(mainData).datas[dataType];\n}\n/**\n * Get list of all linked data\n */\n\n\nfunction getLinkedDataAll() {\n  var mainData = inner(this).mainData;\n  return mainData == null ? [{\n    data: mainData\n  }] : map(keys(inner(mainData).datas), function (type) {\n    return {\n      type: type,\n      data: inner(mainData).datas[type]\n    };\n  });\n}\n\nfunction isMainData(data) {\n  return inner(data).mainData === data;\n}\n\nfunction linkAll(mainData, datas, opt) {\n  inner(mainData).datas = {};\n  each(datas, function (data, dataType) {\n    linkSingle(data, dataType, mainData, opt);\n  });\n}\n\nfunction linkSingle(data, dataType, mainData, opt) {\n  inner(mainData).datas[dataType] = data;\n  inner(data).mainData = mainData;\n  data.dataType = dataType;\n\n  if (opt.struct) {\n    data[opt.structAttr] = opt.struct;\n    opt.struct[opt.datasAttr[dataType]] = data;\n  } // Supplement method.\n\n\n  data.getLinkedData = getLinkedData;\n  data.getLinkedDataAll = getLinkedDataAll;\n}\n\nexport default linkSeriesData;"],"names":["inner","makeInner","transferInjection","opt","res","data","this","mainData","datas","extend","dataType","linkAll","linkSingle","changeInjection","struct","update","cloneShallowInjection","each","cloneShallow","getLinkedData","getLinkedDataAll","map","keys","type","structAttr","datasAttr","main","TRANSFERABLE_METHODS","methodName","wrapMethod","curry","CHANGABLE_METHODS","assert"],"sourceRoot":""}