{"version":3,"file":"static/js/8063.febdfd57.js","mappings":"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","sources":["../node_modules/echarts/lib/scale/Interval.js","../node_modules/echarts/lib/scale/Log.js","../node_modules/echarts/lib/scale/Ordinal.js","../node_modules/echarts/lib/scale/Scale.js"],"sourcesContent":["\n/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\n\n\n/**\n * AUTO-GENERATED FILE. DO NOT MODIFY.\n */\n\n/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\nimport { __extends } from \"tslib\";\nimport * as numberUtil from '../util/number.js';\nimport * as formatUtil from '../util/format.js';\nimport Scale from './Scale.js';\nimport * as helper from './helper.js';\nvar roundNumber = numberUtil.round;\n\nvar IntervalScale =\n/** @class */\nfunction (_super) {\n  __extends(IntervalScale, _super);\n\n  function IntervalScale() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n\n    _this.type = 'interval'; // Step is calculated in adjustExtent.\n\n    _this._interval = 0;\n    _this._intervalPrecision = 2;\n    return _this;\n  }\n\n  IntervalScale.prototype.parse = function (val) {\n    return val;\n  };\n\n  IntervalScale.prototype.contain = function (val) {\n    return helper.contain(val, this._extent);\n  };\n\n  IntervalScale.prototype.normalize = function (val) {\n    return helper.normalize(val, this._extent);\n  };\n\n  IntervalScale.prototype.scale = function (val) {\n    return helper.scale(val, this._extent);\n  };\n\n  IntervalScale.prototype.setExtent = function (start, end) {\n    var thisExtent = this._extent; // start,end may be a Number like '25',so...\n\n    if (!isNaN(start)) {\n      thisExtent[0] = parseFloat(start);\n    }\n\n    if (!isNaN(end)) {\n      thisExtent[1] = parseFloat(end);\n    }\n  };\n\n  IntervalScale.prototype.unionExtent = function (other) {\n    var extent = this._extent;\n    other[0] < extent[0] && (extent[0] = other[0]);\n    other[1] > extent[1] && (extent[1] = other[1]); // unionExtent may called by it's sub classes\n\n    this.setExtent(extent[0], extent[1]);\n  };\n\n  IntervalScale.prototype.getInterval = function () {\n    return this._interval;\n  };\n\n  IntervalScale.prototype.setInterval = function (interval) {\n    this._interval = interval; // Dropped auto calculated niceExtent and use user setted extent\n    // We assume user wan't to set both interval, min, max to get a better result\n\n    this._niceExtent = this._extent.slice();\n    this._intervalPrecision = helper.getIntervalPrecision(interval);\n  };\n  /**\n   * @param expandToNicedExtent Whether expand the ticks to niced extent.\n   */\n\n\n  IntervalScale.prototype.getTicks = function (expandToNicedExtent) {\n    var interval = this._interval;\n    var extent = this._extent;\n    var niceTickExtent = this._niceExtent;\n    var intervalPrecision = this._intervalPrecision;\n    var ticks = []; // If interval is 0, return [];\n\n    if (!interval) {\n      return ticks;\n    } // Consider this case: using dataZoom toolbox, zoom and zoom.\n\n\n    var safeLimit = 10000;\n\n    if (extent[0] < niceTickExtent[0]) {\n      if (expandToNicedExtent) {\n        ticks.push({\n          value: roundNumber(niceTickExtent[0] - interval, intervalPrecision)\n        });\n      } else {\n        ticks.push({\n          value: extent[0]\n        });\n      }\n    }\n\n    var tick = niceTickExtent[0];\n\n    while (tick <= niceTickExtent[1]) {\n      ticks.push({\n        value: tick\n      }); // Avoid rounding error\n\n      tick = roundNumber(tick + interval, intervalPrecision);\n\n      if (tick === ticks[ticks.length - 1].value) {\n        // Consider out of safe float point, e.g.,\n        // -3711126.9907707 + 2e-10 === -3711126.9907707\n        break;\n      }\n\n      if (ticks.length > safeLimit) {\n        return [];\n      }\n    } // Consider this case: the last item of ticks is smaller\n    // than niceTickExtent[1] and niceTickExtent[1] === extent[1].\n\n\n    var lastNiceTick = ticks.length ? ticks[ticks.length - 1].value : niceTickExtent[1];\n\n    if (extent[1] > lastNiceTick) {\n      if (expandToNicedExtent) {\n        ticks.push({\n          value: roundNumber(lastNiceTick + interval, intervalPrecision)\n        });\n      } else {\n        ticks.push({\n          value: extent[1]\n        });\n      }\n    }\n\n    return ticks;\n  };\n\n  IntervalScale.prototype.getMinorTicks = function (splitNumber) {\n    var ticks = this.getTicks(true);\n    var minorTicks = [];\n    var extent = this.getExtent();\n\n    for (var i = 1; i < ticks.length; i++) {\n      var nextTick = ticks[i];\n      var prevTick = ticks[i - 1];\n      var count = 0;\n      var minorTicksGroup = [];\n      var interval = nextTick.value - prevTick.value;\n      var minorInterval = interval / splitNumber;\n\n      while (count < splitNumber - 1) {\n        var minorTick = roundNumber(prevTick.value + (count + 1) * minorInterval); // For the first and last interval. The count may be less than splitNumber.\n\n        if (minorTick > extent[0] && minorTick < extent[1]) {\n          minorTicksGroup.push(minorTick);\n        }\n\n        count++;\n      }\n\n      minorTicks.push(minorTicksGroup);\n    }\n\n    return minorTicks;\n  };\n  /**\n   * @param opt.precision If 'auto', use nice presision.\n   * @param opt.pad returns 1.50 but not 1.5 if precision is 2.\n   */\n\n\n  IntervalScale.prototype.getLabel = function (data, opt) {\n    if (data == null) {\n      return '';\n    }\n\n    var precision = opt && opt.precision;\n\n    if (precision == null) {\n      precision = numberUtil.getPrecision(data.value) || 0;\n    } else if (precision === 'auto') {\n      // Should be more precise then tick.\n      precision = this._intervalPrecision;\n    } // (1) If `precision` is set, 12.005 should be display as '12.00500'.\n    // (2) Use roundNumber (toFixed) to avoid scientific notation like '3.5e-7'.\n\n\n    var dataNum = roundNumber(data.value, precision, true);\n    return formatUtil.addCommas(dataNum);\n  };\n  /**\n   * @param splitNumber By default `5`.\n   */\n\n\n  IntervalScale.prototype.calcNiceTicks = function (splitNumber, minInterval, maxInterval) {\n    splitNumber = splitNumber || 5;\n    var extent = this._extent;\n    var span = extent[1] - extent[0];\n\n    if (!isFinite(span)) {\n      return;\n    } // User may set axis min 0 and data are all negative\n    // FIXME If it needs to reverse ?\n\n\n    if (span < 0) {\n      span = -span;\n      extent.reverse();\n    }\n\n    var result = helper.intervalScaleNiceTicks(extent, splitNumber, minInterval, maxInterval);\n    this._intervalPrecision = result.intervalPrecision;\n    this._interval = result.interval;\n    this._niceExtent = result.niceTickExtent;\n  };\n\n  IntervalScale.prototype.calcNiceExtent = function (opt) {\n    var extent = this._extent; // If extent start and end are same, expand them\n\n    if (extent[0] === extent[1]) {\n      if (extent[0] !== 0) {\n        // Expand extent\n        // Note that extents can be both negative. See #13154\n        var expandSize = Math.abs(extent[0]); // In the fowllowing case\n        //      Axis has been fixed max 100\n        //      Plus data are all 100 and axis extent are [100, 100].\n        // Extend to the both side will cause expanded max is larger than fixed max.\n        // So only expand to the smaller side.\n\n        if (!opt.fixMax) {\n          extent[1] += expandSize / 2;\n          extent[0] -= expandSize / 2;\n        } else {\n          extent[0] -= expandSize / 2;\n        }\n      } else {\n        extent[1] = 1;\n      }\n    }\n\n    var span = extent[1] - extent[0]; // If there are no data and extent are [Infinity, -Infinity]\n\n    if (!isFinite(span)) {\n      extent[0] = 0;\n      extent[1] = 1;\n    }\n\n    this.calcNiceTicks(opt.splitNumber, opt.minInterval, opt.maxInterval); // let extent = this._extent;\n\n    var interval = this._interval;\n\n    if (!opt.fixMin) {\n      extent[0] = roundNumber(Math.floor(extent[0] / interval) * interval);\n    }\n\n    if (!opt.fixMax) {\n      extent[1] = roundNumber(Math.ceil(extent[1] / interval) * interval);\n    }\n  };\n\n  IntervalScale.prototype.setNiceExtent = function (min, max) {\n    this._niceExtent = [min, max];\n  };\n\n  IntervalScale.type = 'interval';\n  return IntervalScale;\n}(Scale);\n\nScale.registerClass(IntervalScale);\nexport default IntervalScale;","\n/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\n\n\n/**\n * AUTO-GENERATED FILE. DO NOT MODIFY.\n */\n\n/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\nimport { __extends } from \"tslib\";\nimport * as zrUtil from 'zrender/lib/core/util.js';\nimport Scale from './Scale.js';\nimport * as numberUtil from '../util/number.js';\nimport * as scaleHelper from './helper.js'; // Use some method of IntervalScale\n\nimport IntervalScale from './Interval.js';\nvar scaleProto = Scale.prototype; // FIXME:TS refactor: not good to call it directly with `this`?\n\nvar intervalScaleProto = IntervalScale.prototype;\nvar roundingErrorFix = numberUtil.round;\nvar mathFloor = Math.floor;\nvar mathCeil = Math.ceil;\nvar mathPow = Math.pow;\nvar mathLog = Math.log;\n\nvar LogScale =\n/** @class */\nfunction (_super) {\n  __extends(LogScale, _super);\n\n  function LogScale() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n\n    _this.type = 'log';\n    _this.base = 10;\n    _this._originalScale = new IntervalScale(); // FIXME:TS actually used by `IntervalScale`\n\n    _this._interval = 0;\n    return _this;\n  }\n  /**\n   * @param Whether expand the ticks to niced extent.\n   */\n\n\n  LogScale.prototype.getTicks = function (expandToNicedExtent) {\n    var originalScale = this._originalScale;\n    var extent = this._extent;\n    var originalExtent = originalScale.getExtent();\n    var ticks = intervalScaleProto.getTicks.call(this, expandToNicedExtent);\n    return zrUtil.map(ticks, function (tick) {\n      var val = tick.value;\n      var powVal = numberUtil.round(mathPow(this.base, val)); // Fix #4158\n\n      powVal = val === extent[0] && this._fixMin ? fixRoundingError(powVal, originalExtent[0]) : powVal;\n      powVal = val === extent[1] && this._fixMax ? fixRoundingError(powVal, originalExtent[1]) : powVal;\n      return {\n        value: powVal\n      };\n    }, this);\n  };\n\n  LogScale.prototype.setExtent = function (start, end) {\n    var base = mathLog(this.base); // log(-Infinity) is NaN, so safe guard here\n\n    start = mathLog(Math.max(0, start)) / base;\n    end = mathLog(Math.max(0, end)) / base;\n    intervalScaleProto.setExtent.call(this, start, end);\n  };\n  /**\n   * @return {number} end\n   */\n\n\n  LogScale.prototype.getExtent = function () {\n    var base = this.base;\n    var extent = scaleProto.getExtent.call(this);\n    extent[0] = mathPow(base, extent[0]);\n    extent[1] = mathPow(base, extent[1]); // Fix #4158\n\n    var originalScale = this._originalScale;\n    var originalExtent = originalScale.getExtent();\n    this._fixMin && (extent[0] = fixRoundingError(extent[0], originalExtent[0]));\n    this._fixMax && (extent[1] = fixRoundingError(extent[1], originalExtent[1]));\n    return extent;\n  };\n\n  LogScale.prototype.unionExtent = function (extent) {\n    this._originalScale.unionExtent(extent);\n\n    var base = this.base;\n    extent[0] = mathLog(extent[0]) / mathLog(base);\n    extent[1] = mathLog(extent[1]) / mathLog(base);\n    scaleProto.unionExtent.call(this, extent);\n  };\n\n  LogScale.prototype.unionExtentFromData = function (data, dim) {\n    // TODO\n    // filter value that <= 0\n    this.unionExtent(data.getApproximateExtent(dim));\n  };\n  /**\n   * Update interval and extent of intervals for nice ticks\n   * @param approxTickNum default 10 Given approx tick number\n   */\n\n\n  LogScale.prototype.calcNiceTicks = function (approxTickNum) {\n    approxTickNum = approxTickNum || 10;\n    var extent = this._extent;\n    var span = extent[1] - extent[0];\n\n    if (span === Infinity || span <= 0) {\n      return;\n    }\n\n    var interval = numberUtil.quantity(span);\n    var err = approxTickNum / span * interval; // Filter ticks to get closer to the desired count.\n\n    if (err <= 0.5) {\n      interval *= 10;\n    } // Interval should be integer\n\n\n    while (!isNaN(interval) && Math.abs(interval) < 1 && Math.abs(interval) > 0) {\n      interval *= 10;\n    }\n\n    var niceExtent = [numberUtil.round(mathCeil(extent[0] / interval) * interval), numberUtil.round(mathFloor(extent[1] / interval) * interval)];\n    this._interval = interval;\n    this._niceExtent = niceExtent;\n  };\n\n  LogScale.prototype.calcNiceExtent = function (opt) {\n    intervalScaleProto.calcNiceExtent.call(this, opt);\n    this._fixMin = opt.fixMin;\n    this._fixMax = opt.fixMax;\n  };\n\n  LogScale.prototype.parse = function (val) {\n    return val;\n  };\n\n  LogScale.prototype.contain = function (val) {\n    val = mathLog(val) / mathLog(this.base);\n    return scaleHelper.contain(val, this._extent);\n  };\n\n  LogScale.prototype.normalize = function (val) {\n    val = mathLog(val) / mathLog(this.base);\n    return scaleHelper.normalize(val, this._extent);\n  };\n\n  LogScale.prototype.scale = function (val) {\n    val = scaleHelper.scale(val, this._extent);\n    return mathPow(this.base, val);\n  };\n\n  LogScale.type = 'log';\n  return LogScale;\n}(Scale);\n\nvar proto = LogScale.prototype;\nproto.getMinorTicks = intervalScaleProto.getMinorTicks;\nproto.getLabel = intervalScaleProto.getLabel;\n\nfunction fixRoundingError(val, originalVal) {\n  return roundingErrorFix(val, numberUtil.getPrecision(originalVal));\n}\n\nScale.registerClass(LogScale);\nexport default LogScale;","\n/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\n\n\n/**\n * AUTO-GENERATED FILE. DO NOT MODIFY.\n */\n\n/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\nimport { __extends } from \"tslib\";\n/**\n * Linear continuous scale\n * http://en.wikipedia.org/wiki/Level_of_measurement\n */\n// FIXME only one data\n\nimport Scale from './Scale.js';\nimport OrdinalMeta from '../data/OrdinalMeta.js';\nimport * as scaleHelper from './helper.js';\nimport { isArray, map, isObject, isString } from 'zrender/lib/core/util.js';\n\nvar OrdinalScale =\n/** @class */\nfunction (_super) {\n  __extends(OrdinalScale, _super);\n\n  function OrdinalScale(setting) {\n    var _this = _super.call(this, setting) || this;\n\n    _this.type = 'ordinal';\n\n    var ordinalMeta = _this.getSetting('ordinalMeta'); // Caution: Should not use instanceof, consider ec-extensions using\n    // import approach to get OrdinalMeta class.\n\n\n    if (!ordinalMeta) {\n      ordinalMeta = new OrdinalMeta({});\n    }\n\n    if (isArray(ordinalMeta)) {\n      ordinalMeta = new OrdinalMeta({\n        categories: map(ordinalMeta, function (item) {\n          return isObject(item) ? item.value : item;\n        })\n      });\n    }\n\n    _this._ordinalMeta = ordinalMeta;\n    _this._extent = _this.getSetting('extent') || [0, ordinalMeta.categories.length - 1];\n    return _this;\n  }\n\n  OrdinalScale.prototype.parse = function (val) {\n    // Caution: Math.round(null) will return `0` rather than `NaN`\n    if (val == null) {\n      return NaN;\n    }\n\n    return isString(val) ? this._ordinalMeta.getOrdinal(val) // val might be float.\n    : Math.round(val);\n  };\n\n  OrdinalScale.prototype.contain = function (rank) {\n    rank = this.parse(rank);\n    return scaleHelper.contain(rank, this._extent) && this._ordinalMeta.categories[rank] != null;\n  };\n  /**\n   * Normalize given rank or name to linear [0, 1]\n   * @param val raw ordinal number.\n   * @return normalized value in [0, 1].\n   */\n\n\n  OrdinalScale.prototype.normalize = function (val) {\n    val = this._getTickNumber(this.parse(val));\n    return scaleHelper.normalize(val, this._extent);\n  };\n  /**\n   * @param val normalized value in [0, 1].\n   * @return raw ordinal number.\n   */\n\n\n  OrdinalScale.prototype.scale = function (val) {\n    val = Math.round(scaleHelper.scale(val, this._extent));\n    return this.getRawOrdinalNumber(val);\n  };\n\n  OrdinalScale.prototype.getTicks = function () {\n    var ticks = [];\n    var extent = this._extent;\n    var rank = extent[0];\n\n    while (rank <= extent[1]) {\n      ticks.push({\n        value: rank\n      });\n      rank++;\n    }\n\n    return ticks;\n  };\n\n  OrdinalScale.prototype.getMinorTicks = function (splitNumber) {\n    // Not support.\n    return;\n  };\n  /**\n   * @see `Ordinal['_ordinalNumbersByTick']`\n   */\n\n\n  OrdinalScale.prototype.setSortInfo = function (info) {\n    if (info == null) {\n      this._ordinalNumbersByTick = this._ticksByOrdinalNumber = null;\n      return;\n    }\n\n    var infoOrdinalNumbers = info.ordinalNumbers;\n    var ordinalsByTick = this._ordinalNumbersByTick = [];\n    var ticksByOrdinal = this._ticksByOrdinalNumber = []; // Unnecessary support negative tick in `realtimeSort`.\n\n    var tickNum = 0;\n    var allCategoryLen = this._ordinalMeta.categories.length;\n\n    for (var len = Math.min(allCategoryLen, infoOrdinalNumbers.length); tickNum < len; ++tickNum) {\n      var ordinalNumber = infoOrdinalNumbers[tickNum];\n      ordinalsByTick[tickNum] = ordinalNumber;\n      ticksByOrdinal[ordinalNumber] = tickNum;\n    } // Handle that `series.data` only covers part of the `axis.category.data`.\n\n\n    var unusedOrdinal = 0;\n\n    for (; tickNum < allCategoryLen; ++tickNum) {\n      while (ticksByOrdinal[unusedOrdinal] != null) {\n        unusedOrdinal++;\n      }\n\n      ;\n      ordinalsByTick.push(unusedOrdinal);\n      ticksByOrdinal[unusedOrdinal] = tickNum;\n    }\n  };\n\n  OrdinalScale.prototype._getTickNumber = function (ordinal) {\n    var ticksByOrdinalNumber = this._ticksByOrdinalNumber; // also support ordinal out of range of `ordinalMeta.categories.length`,\n    // where ordinal numbers are used as tick value directly.\n\n    return ticksByOrdinalNumber && ordinal >= 0 && ordinal < ticksByOrdinalNumber.length ? ticksByOrdinalNumber[ordinal] : ordinal;\n  };\n  /**\n   * @usage\n   * ```js\n   * const ordinalNumber = ordinalScale.getRawOrdinalNumber(tickVal);\n   *\n   * // case0\n   * const rawOrdinalValue = axisModel.getCategories()[ordinalNumber];\n   * // case1\n   * const rawOrdinalValue = this._ordinalMeta.categories[ordinalNumber];\n   * // case2\n   * const coord = axis.dataToCoord(ordinalNumber);\n   * ```\n   *\n   * @param {OrdinalNumber} tickNumber index of display\n   */\n\n\n  OrdinalScale.prototype.getRawOrdinalNumber = function (tickNumber) {\n    var ordinalNumbersByTick = this._ordinalNumbersByTick; // tickNumber may be out of range, e.g., when axis max is larger than `ordinalMeta.categories.length`.,\n    // where ordinal numbers are used as tick value directly.\n\n    return ordinalNumbersByTick && tickNumber >= 0 && tickNumber < ordinalNumbersByTick.length ? ordinalNumbersByTick[tickNumber] : tickNumber;\n  };\n  /**\n   * Get item on tick\n   */\n\n\n  OrdinalScale.prototype.getLabel = function (tick) {\n    if (!this.isBlank()) {\n      var ordinalNumber = this.getRawOrdinalNumber(tick.value);\n      var cateogry = this._ordinalMeta.categories[ordinalNumber]; // Note that if no data, ordinalMeta.categories is an empty array.\n      // Return empty if it's not exist.\n\n      return cateogry == null ? '' : cateogry + '';\n    }\n  };\n\n  OrdinalScale.prototype.count = function () {\n    return this._extent[1] - this._extent[0] + 1;\n  };\n\n  OrdinalScale.prototype.unionExtentFromData = function (data, dim) {\n    this.unionExtent(data.getApproximateExtent(dim));\n  };\n  /**\n   * @override\n   * If value is in extent range\n   */\n\n\n  OrdinalScale.prototype.isInExtentRange = function (value) {\n    value = this._getTickNumber(value);\n    return this._extent[0] <= value && this._extent[1] >= value;\n  };\n\n  OrdinalScale.prototype.getOrdinalMeta = function () {\n    return this._ordinalMeta;\n  };\n\n  OrdinalScale.prototype.calcNiceTicks = function () {};\n\n  OrdinalScale.prototype.calcNiceExtent = function () {};\n\n  OrdinalScale.type = 'ordinal';\n  return OrdinalScale;\n}(Scale);\n\nScale.registerClass(OrdinalScale);\nexport default OrdinalScale;","\n/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\n\n\n/**\n * AUTO-GENERATED FILE. DO NOT MODIFY.\n */\n\n/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\nimport * as clazzUtil from '../util/clazz.js';\n\nvar Scale =\n/** @class */\nfunction () {\n  function Scale(setting) {\n    this._setting = setting || {};\n    this._extent = [Infinity, -Infinity];\n  }\n\n  Scale.prototype.getSetting = function (name) {\n    return this._setting[name];\n  };\n  /**\n   * Set extent from data\n   */\n\n\n  Scale.prototype.unionExtent = function (other) {\n    var extent = this._extent;\n    other[0] < extent[0] && (extent[0] = other[0]);\n    other[1] > extent[1] && (extent[1] = other[1]); // not setExtent because in log axis it may transformed to power\n    // this.setExtent(extent[0], extent[1]);\n  };\n  /**\n   * Set extent from data\n   */\n\n\n  Scale.prototype.unionExtentFromData = function (data, dim) {\n    this.unionExtent(data.getApproximateExtent(dim));\n  };\n  /**\n   * Get extent\n   *\n   * Extent is always in increase order.\n   */\n\n\n  Scale.prototype.getExtent = function () {\n    return this._extent.slice();\n  };\n  /**\n   * Set extent\n   */\n\n\n  Scale.prototype.setExtent = function (start, end) {\n    var thisExtent = this._extent;\n\n    if (!isNaN(start)) {\n      thisExtent[0] = start;\n    }\n\n    if (!isNaN(end)) {\n      thisExtent[1] = end;\n    }\n  };\n  /**\n   * If value is in extent range\n   */\n\n\n  Scale.prototype.isInExtentRange = function (value) {\n    return this._extent[0] <= value && this._extent[1] >= value;\n  };\n  /**\n   * When axis extent depends on data and no data exists,\n   * axis ticks should not be drawn, which is named 'blank'.\n   */\n\n\n  Scale.prototype.isBlank = function () {\n    return this._isBlank;\n  };\n  /**\n   * When axis extent depends on data and no data exists,\n   * axis ticks should not be drawn, which is named 'blank'.\n   */\n\n\n  Scale.prototype.setBlank = function (isBlank) {\n    this._isBlank = isBlank;\n  };\n\n  return Scale;\n}();\n\nclazzUtil.enableClassManagement(Scale);\nexport default Scale;"],"names":["roundNumber","numberUtil","IntervalScale","_super","_this","apply","this","arguments","type","_interval","_intervalPrecision","__extends","prototype","parse","val","contain","helper","_extent","normalize","scale","setExtent","start","end","thisExtent","isNaN","parseFloat","unionExtent","other","extent","getInterval","setInterval","interval","_niceExtent","slice","getTicks","expandToNicedExtent","niceTickExtent","intervalPrecision","ticks","push","value","tick","length","lastNiceTick","getMinorTicks","splitNumber","minorTicks","getExtent","i","nextTick","prevTick","count","minorTicksGroup","minorInterval","minorTick","getLabel","data","opt","precision","dataNum","formatUtil","calcNiceTicks","minInterval","maxInterval","span","isFinite","reverse","result","calcNiceExtent","expandSize","Math","abs","fixMax","fixMin","floor","ceil","setNiceExtent","min","max","Scale","scaleProto","intervalScaleProto","roundingErrorFix","mathFloor","mathCeil","mathPow","pow","mathLog","log","LogScale","base","_originalScale","originalScale","originalExtent","call","zrUtil","powVal","_fixMin","fixRoundingError","_fixMax","unionExtentFromData","dim","getApproximateExtent","approxTickNum","Infinity","niceExtent","scaleHelper","proto","originalVal","OrdinalScale","setting","ordinalMeta","getSetting","OrdinalMeta","isArray","categories","map","item","isObject","_ordinalMeta","NaN","isString","getOrdinal","round","rank","_getTickNumber","getRawOrdinalNumber","setSortInfo","info","infoOrdinalNumbers","ordinalNumbers","ordinalsByTick","_ordinalNumbersByTick","ticksByOrdinal","_ticksByOrdinalNumber","tickNum","allCategoryLen","len","ordinalNumber","unusedOrdinal","ordinal","ticksByOrdinalNumber","tickNumber","ordinalNumbersByTick","isBlank","cateogry","isInExtentRange","getOrdinalMeta","_setting","name","_isBlank","setBlank","clazzUtil"],"sourceRoot":""}