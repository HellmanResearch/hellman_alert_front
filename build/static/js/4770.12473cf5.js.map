{"version":3,"file":"static/js/4770.12473cf5.js","mappings":"2LA+CWA,EAA4B,CAAC,CACtCC,mBAAmB,EACnBC,MAAO,SAAUC,EAAaC,GAC5B,IAAIC,EAAe,GAUnB,OATAD,EAAQE,cAAc,aAAa,SAAUC,GAC3C,IAAIC,EAAkBL,EAAYK,iBAE7BD,EAAeE,eAAeN,IAAgBK,GAAmBA,EAAgBE,OAItFL,EAAaM,KAAKC,EAAAA,GAAsCL,EAAeM,UAAWN,EAAeO,cAAeC,EAAAA,GAAYR,EAAeS,cAAeT,GAAiBA,EAAeU,sBAAsBd,EAAYe,YAC9N,IACOb,CACT,GAEF,CACEJ,mBAAmB,EACnBC,MAAO,SAAUC,EAAaC,GAC5B,IAAIe,EAAOhB,EAAYe,UACnBE,EAAiB,GACrBhB,EAAQE,cAAc,aAAa,SAAUC,GAC3C,GAAIA,EAAeE,eAAeN,GAAc,CAC9C,IAAIkB,EAAad,EAAee,cAAcP,EAAAA,GAAYQ,EAAgB,KAAMpB,EAAaI,KAAoB,CAC/GiB,MAAO,GACPC,YAAa,IAEXC,EAASnB,EAAeU,sBAAsBE,GAE9CO,GAAU,IAEZL,EAAWM,UAAYD,EACvBN,EAAeT,KAAKU,GAExB,CACF,IAEAlB,EAAYe,UAAUU,UAAU,aAAcR,EAChD,IAKF,SAASG,EAAepB,EAAaI,EAAgBsB,EAAOC,GAQ1D,IAPA,IAAIC,EAAWxB,EAAeO,cAAcgB,GACxCE,EAAcC,EAAAA,EAAAA,mBAAiCF,GAC/CG,EAAe,CACjBC,OAAOC,EAAAA,EAAAA,IAAkBjC,EAAYe,UAAW,UAIzCmB,EAAI,EAAGC,EAAMN,EAAYO,OAAQF,EAAIC,EAAKD,IAAK,CACtD,IAAIG,EAAOR,EAAYK,GACnBI,EAAUV,EAAkB,YAATS,EAAqB,oBAAsBA,GAClEC,GAAWA,EAAQC,YAAYb,EAAOc,EAAWf,EACnD,CAEA,OAAOM,EAAaC,MAEpB,SAASQ,EAAUC,GACjB,OAAOV,EAAaU,EACtB,CAEA,SAAShB,EAAUgB,EAAKf,GACtBK,EAAaU,GAAOf,CACtB,CACF,C,+ECtEO,IAAIgB,EAAsB,CAC/BL,KAAM,kBACNM,MAAO,oBAEPC,OAAQ,UAECC,EAAwB,SAAUC,EAAS7C,GACpDA,EAAQE,cAAc,CACpB4C,SAAU,YACVC,MAAOF,IACN,SAAUG,GACXA,EAAMC,YAAYJ,EAAQK,SAC5B,GACF,C","sources":["../node_modules/echarts/lib/component/visualMap/visualEncoding.js","../node_modules/echarts/lib/component/visualMap/visualMapAction.js"],"sourcesContent":["\n/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\n\n\n/**\n * AUTO-GENERATED FILE. DO NOT MODIFY.\n */\n\n/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\nimport * as zrUtil from 'zrender/lib/core/util.js';\nimport * as visualSolution from '../../visual/visualSolution.js';\nimport VisualMapping from '../../visual/VisualMapping.js';\nimport { getVisualFromData } from '../../visual/helper.js';\nexport var visualMapEncodingHandlers = [{\n  createOnAllSeries: true,\n  reset: function (seriesModel, ecModel) {\n    var resetDefines = [];\n    ecModel.eachComponent('visualMap', function (visualMapModel) {\n      var pipelineContext = seriesModel.pipelineContext;\n\n      if (!visualMapModel.isTargetSeries(seriesModel) || pipelineContext && pipelineContext.large) {\n        return;\n      }\n\n      resetDefines.push(visualSolution.incrementalApplyVisual(visualMapModel.stateList, visualMapModel.targetVisuals, zrUtil.bind(visualMapModel.getValueState, visualMapModel), visualMapModel.getDataDimensionIndex(seriesModel.getData())));\n    });\n    return resetDefines;\n  }\n}, // Only support color.\n{\n  createOnAllSeries: true,\n  reset: function (seriesModel, ecModel) {\n    var data = seriesModel.getData();\n    var visualMetaList = [];\n    ecModel.eachComponent('visualMap', function (visualMapModel) {\n      if (visualMapModel.isTargetSeries(seriesModel)) {\n        var visualMeta = visualMapModel.getVisualMeta(zrUtil.bind(getColorVisual, null, seriesModel, visualMapModel)) || {\n          stops: [],\n          outerColors: []\n        };\n        var dimIdx = visualMapModel.getDataDimensionIndex(data);\n\n        if (dimIdx >= 0) {\n          // visualMeta.dimension should be dimension index, but not concrete dimension.\n          visualMeta.dimension = dimIdx;\n          visualMetaList.push(visualMeta);\n        }\n      }\n    }); // console.log(JSON.stringify(visualMetaList.map(a => a.stops)));\n\n    seriesModel.getData().setVisual('visualMeta', visualMetaList);\n  }\n}]; // FIXME\n// performance and export for heatmap?\n// value can be Infinity or -Infinity\n\nfunction getColorVisual(seriesModel, visualMapModel, value, valueState) {\n  var mappings = visualMapModel.targetVisuals[valueState];\n  var visualTypes = VisualMapping.prepareVisualTypes(mappings);\n  var resultVisual = {\n    color: getVisualFromData(seriesModel.getData(), 'color') // default color.\n\n  };\n\n  for (var i = 0, len = visualTypes.length; i < len; i++) {\n    var type = visualTypes[i];\n    var mapping = mappings[type === 'opacity' ? '__alphaForOpacity' : type];\n    mapping && mapping.applyVisual(value, getVisual, setVisual);\n  }\n\n  return resultVisual.color;\n\n  function getVisual(key) {\n    return resultVisual[key];\n  }\n\n  function setVisual(key, value) {\n    resultVisual[key] = value;\n  }\n}","\n/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\n\n\n/**\n * AUTO-GENERATED FILE. DO NOT MODIFY.\n */\n\n/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\nexport var visualMapActionInfo = {\n  type: 'selectDataRange',\n  event: 'dataRangeSelected',\n  // FIXME use updateView appears wrong\n  update: 'update'\n};\nexport var visualMapActionHander = function (payload, ecModel) {\n  ecModel.eachComponent({\n    mainType: 'visualMap',\n    query: payload\n  }, function (model) {\n    model.setSelected(payload.selected);\n  });\n};"],"names":["visualMapEncodingHandlers","createOnAllSeries","reset","seriesModel","ecModel","resetDefines","eachComponent","visualMapModel","pipelineContext","isTargetSeries","large","push","visualSolution","stateList","targetVisuals","zrUtil","getValueState","getDataDimensionIndex","getData","data","visualMetaList","visualMeta","getVisualMeta","getColorVisual","stops","outerColors","dimIdx","dimension","setVisual","value","valueState","mappings","visualTypes","VisualMapping","resultVisual","color","getVisualFromData","i","len","length","type","mapping","applyVisual","getVisual","key","visualMapActionInfo","event","update","visualMapActionHander","payload","mainType","query","model","setSelected","selected"],"sourceRoot":""}