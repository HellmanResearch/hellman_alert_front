{"version":3,"file":"static/js/5310.15c4b158.js","mappings":"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","sources":["../node_modules/zrender/lib/canvas/Layer.js","../node_modules/zrender/lib/canvas/Painter.js","../node_modules/zrender/lib/canvas/dashStyle.js"],"sourcesContent":["import { __extends } from \"tslib\";\nimport * as util from '../core/util.js';\nimport { devicePixelRatio } from '../config.js';\nimport Eventful from '../core/Eventful.js';\nimport { getCanvasGradient } from './helper.js';\nimport { createCanvasPattern } from './graphic.js';\nimport BoundingRect from '../core/BoundingRect.js';\nimport { REDRAW_BIT } from '../graphic/constants.js';\nimport { platformApi } from '../core/platform.js';\nfunction createDom(id, painter, dpr) {\n    var newDom = platformApi.createCanvas();\n    var width = painter.getWidth();\n    var height = painter.getHeight();\n    var newDomStyle = newDom.style;\n    if (newDomStyle) {\n        newDomStyle.position = 'absolute';\n        newDomStyle.left = '0';\n        newDomStyle.top = '0';\n        newDomStyle.width = width + 'px';\n        newDomStyle.height = height + 'px';\n        newDom.setAttribute('data-zr-dom-id', id);\n    }\n    newDom.width = width * dpr;\n    newDom.height = height * dpr;\n    return newDom;\n}\n;\nvar Layer = (function (_super) {\n    __extends(Layer, _super);\n    function Layer(id, painter, dpr) {\n        var _this = _super.call(this) || this;\n        _this.motionBlur = false;\n        _this.lastFrameAlpha = 0.7;\n        _this.dpr = 1;\n        _this.virtual = false;\n        _this.config = {};\n        _this.incremental = false;\n        _this.zlevel = 0;\n        _this.maxRepaintRectCount = 5;\n        _this.__dirty = true;\n        _this.__firstTimePaint = true;\n        _this.__used = false;\n        _this.__drawIndex = 0;\n        _this.__startIndex = 0;\n        _this.__endIndex = 0;\n        _this.__prevStartIndex = null;\n        _this.__prevEndIndex = null;\n        var dom;\n        dpr = dpr || devicePixelRatio;\n        if (typeof id === 'string') {\n            dom = createDom(id, painter, dpr);\n        }\n        else if (util.isObject(id)) {\n            dom = id;\n            id = dom.id;\n        }\n        _this.id = id;\n        _this.dom = dom;\n        var domStyle = dom.style;\n        if (domStyle) {\n            util.disableUserSelect(dom);\n            dom.onselectstart = function () { return false; };\n            domStyle.padding = '0';\n            domStyle.margin = '0';\n            domStyle.borderWidth = '0';\n        }\n        _this.painter = painter;\n        _this.dpr = dpr;\n        return _this;\n    }\n    Layer.prototype.getElementCount = function () {\n        return this.__endIndex - this.__startIndex;\n    };\n    Layer.prototype.afterBrush = function () {\n        this.__prevStartIndex = this.__startIndex;\n        this.__prevEndIndex = this.__endIndex;\n    };\n    Layer.prototype.initContext = function () {\n        this.ctx = this.dom.getContext('2d');\n        this.ctx.dpr = this.dpr;\n    };\n    Layer.prototype.setUnpainted = function () {\n        this.__firstTimePaint = true;\n    };\n    Layer.prototype.createBackBuffer = function () {\n        var dpr = this.dpr;\n        this.domBack = createDom('back-' + this.id, this.painter, dpr);\n        this.ctxBack = this.domBack.getContext('2d');\n        if (dpr !== 1) {\n            this.ctxBack.scale(dpr, dpr);\n        }\n    };\n    Layer.prototype.createRepaintRects = function (displayList, prevList, viewWidth, viewHeight) {\n        if (this.__firstTimePaint) {\n            this.__firstTimePaint = false;\n            return null;\n        }\n        var mergedRepaintRects = [];\n        var maxRepaintRectCount = this.maxRepaintRectCount;\n        var full = false;\n        var pendingRect = new BoundingRect(0, 0, 0, 0);\n        function addRectToMergePool(rect) {\n            if (!rect.isFinite() || rect.isZero()) {\n                return;\n            }\n            if (mergedRepaintRects.length === 0) {\n                var boundingRect = new BoundingRect(0, 0, 0, 0);\n                boundingRect.copy(rect);\n                mergedRepaintRects.push(boundingRect);\n            }\n            else {\n                var isMerged = false;\n                var minDeltaArea = Infinity;\n                var bestRectToMergeIdx = 0;\n                for (var i = 0; i < mergedRepaintRects.length; ++i) {\n                    var mergedRect = mergedRepaintRects[i];\n                    if (mergedRect.intersect(rect)) {\n                        var pendingRect_1 = new BoundingRect(0, 0, 0, 0);\n                        pendingRect_1.copy(mergedRect);\n                        pendingRect_1.union(rect);\n                        mergedRepaintRects[i] = pendingRect_1;\n                        isMerged = true;\n                        break;\n                    }\n                    else if (full) {\n                        pendingRect.copy(rect);\n                        pendingRect.union(mergedRect);\n                        var aArea = rect.width * rect.height;\n                        var bArea = mergedRect.width * mergedRect.height;\n                        var pendingArea = pendingRect.width * pendingRect.height;\n                        var deltaArea = pendingArea - aArea - bArea;\n                        if (deltaArea < minDeltaArea) {\n                            minDeltaArea = deltaArea;\n                            bestRectToMergeIdx = i;\n                        }\n                    }\n                }\n                if (full) {\n                    mergedRepaintRects[bestRectToMergeIdx].union(rect);\n                    isMerged = true;\n                }\n                if (!isMerged) {\n                    var boundingRect = new BoundingRect(0, 0, 0, 0);\n                    boundingRect.copy(rect);\n                    mergedRepaintRects.push(boundingRect);\n                }\n                if (!full) {\n                    full = mergedRepaintRects.length >= maxRepaintRectCount;\n                }\n            }\n        }\n        for (var i = this.__startIndex; i < this.__endIndex; ++i) {\n            var el = displayList[i];\n            if (el) {\n                var shouldPaint = el.shouldBePainted(viewWidth, viewHeight, true, true);\n                var prevRect = el.__isRendered && ((el.__dirty & REDRAW_BIT) || !shouldPaint)\n                    ? el.getPrevPaintRect()\n                    : null;\n                if (prevRect) {\n                    addRectToMergePool(prevRect);\n                }\n                var curRect = shouldPaint && ((el.__dirty & REDRAW_BIT) || !el.__isRendered)\n                    ? el.getPaintRect()\n                    : null;\n                if (curRect) {\n                    addRectToMergePool(curRect);\n                }\n            }\n        }\n        for (var i = this.__prevStartIndex; i < this.__prevEndIndex; ++i) {\n            var el = prevList[i];\n            var shouldPaint = el.shouldBePainted(viewWidth, viewHeight, true, true);\n            if (el && (!shouldPaint || !el.__zr) && el.__isRendered) {\n                var prevRect = el.getPrevPaintRect();\n                if (prevRect) {\n                    addRectToMergePool(prevRect);\n                }\n            }\n        }\n        var hasIntersections;\n        do {\n            hasIntersections = false;\n            for (var i = 0; i < mergedRepaintRects.length;) {\n                if (mergedRepaintRects[i].isZero()) {\n                    mergedRepaintRects.splice(i, 1);\n                    continue;\n                }\n                for (var j = i + 1; j < mergedRepaintRects.length;) {\n                    if (mergedRepaintRects[i].intersect(mergedRepaintRects[j])) {\n                        hasIntersections = true;\n                        mergedRepaintRects[i].union(mergedRepaintRects[j]);\n                        mergedRepaintRects.splice(j, 1);\n                    }\n                    else {\n                        j++;\n                    }\n                }\n                i++;\n            }\n        } while (hasIntersections);\n        this._paintRects = mergedRepaintRects;\n        return mergedRepaintRects;\n    };\n    Layer.prototype.debugGetPaintRects = function () {\n        return (this._paintRects || []).slice();\n    };\n    Layer.prototype.resize = function (width, height) {\n        var dpr = this.dpr;\n        var dom = this.dom;\n        var domStyle = dom.style;\n        var domBack = this.domBack;\n        if (domStyle) {\n            domStyle.width = width + 'px';\n            domStyle.height = height + 'px';\n        }\n        dom.width = width * dpr;\n        dom.height = height * dpr;\n        if (domBack) {\n            domBack.width = width * dpr;\n            domBack.height = height * dpr;\n            if (dpr !== 1) {\n                this.ctxBack.scale(dpr, dpr);\n            }\n        }\n    };\n    Layer.prototype.clear = function (clearAll, clearColor, repaintRects) {\n        var dom = this.dom;\n        var ctx = this.ctx;\n        var width = dom.width;\n        var height = dom.height;\n        clearColor = clearColor || this.clearColor;\n        var haveMotionBLur = this.motionBlur && !clearAll;\n        var lastFrameAlpha = this.lastFrameAlpha;\n        var dpr = this.dpr;\n        var self = this;\n        if (haveMotionBLur) {\n            if (!this.domBack) {\n                this.createBackBuffer();\n            }\n            this.ctxBack.globalCompositeOperation = 'copy';\n            this.ctxBack.drawImage(dom, 0, 0, width / dpr, height / dpr);\n        }\n        var domBack = this.domBack;\n        function doClear(x, y, width, height) {\n            ctx.clearRect(x, y, width, height);\n            if (clearColor && clearColor !== 'transparent') {\n                var clearColorGradientOrPattern = void 0;\n                if (util.isGradientObject(clearColor)) {\n                    clearColorGradientOrPattern = clearColor.__canvasGradient\n                        || getCanvasGradient(ctx, clearColor, {\n                            x: 0,\n                            y: 0,\n                            width: width,\n                            height: height\n                        });\n                    clearColor.__canvasGradient = clearColorGradientOrPattern;\n                }\n                else if (util.isImagePatternObject(clearColor)) {\n                    clearColor.scaleX = clearColor.scaleX || dpr;\n                    clearColor.scaleY = clearColor.scaleY || dpr;\n                    clearColorGradientOrPattern = createCanvasPattern(ctx, clearColor, {\n                        dirty: function () {\n                            self.setUnpainted();\n                            self.__painter.refresh();\n                        }\n                    });\n                }\n                ctx.save();\n                ctx.fillStyle = clearColorGradientOrPattern || clearColor;\n                ctx.fillRect(x, y, width, height);\n                ctx.restore();\n            }\n            if (haveMotionBLur) {\n                ctx.save();\n                ctx.globalAlpha = lastFrameAlpha;\n                ctx.drawImage(domBack, x, y, width, height);\n                ctx.restore();\n            }\n        }\n        ;\n        if (!repaintRects || haveMotionBLur) {\n            doClear(0, 0, width, height);\n        }\n        else if (repaintRects.length) {\n            util.each(repaintRects, function (rect) {\n                doClear(rect.x * dpr, rect.y * dpr, rect.width * dpr, rect.height * dpr);\n            });\n        }\n    };\n    return Layer;\n}(Eventful));\nexport default Layer;\n","import { devicePixelRatio } from '../config.js';\nimport * as util from '../core/util.js';\nimport Layer from './Layer.js';\nimport requestAnimationFrame from '../animation/requestAnimationFrame.js';\nimport env from '../core/env.js';\nimport { brush, brushSingle } from './graphic.js';\nimport { REDRAW_BIT } from '../graphic/constants.js';\nimport { getSize } from './helper.js';\nvar HOVER_LAYER_ZLEVEL = 1e5;\nvar CANVAS_ZLEVEL = 314159;\nvar EL_AFTER_INCREMENTAL_INC = 0.01;\nvar INCREMENTAL_INC = 0.001;\nfunction isLayerValid(layer) {\n    if (!layer) {\n        return false;\n    }\n    if (layer.__builtin__) {\n        return true;\n    }\n    if (typeof (layer.resize) !== 'function'\n        || typeof (layer.refresh) !== 'function') {\n        return false;\n    }\n    return true;\n}\nfunction createRoot(width, height) {\n    var domRoot = document.createElement('div');\n    domRoot.style.cssText = [\n        'position:relative',\n        'width:' + width + 'px',\n        'height:' + height + 'px',\n        'padding:0',\n        'margin:0',\n        'border-width:0'\n    ].join(';') + ';';\n    return domRoot;\n}\nvar CanvasPainter = (function () {\n    function CanvasPainter(root, storage, opts, id) {\n        this.type = 'canvas';\n        this._zlevelList = [];\n        this._prevDisplayList = [];\n        this._layers = {};\n        this._layerConfig = {};\n        this._needsManuallyCompositing = false;\n        this.type = 'canvas';\n        var singleCanvas = !root.nodeName\n            || root.nodeName.toUpperCase() === 'CANVAS';\n        this._opts = opts = util.extend({}, opts || {});\n        this.dpr = opts.devicePixelRatio || devicePixelRatio;\n        this._singleCanvas = singleCanvas;\n        this.root = root;\n        var rootStyle = root.style;\n        if (rootStyle) {\n            util.disableUserSelect(root);\n            root.innerHTML = '';\n        }\n        this.storage = storage;\n        var zlevelList = this._zlevelList;\n        this._prevDisplayList = [];\n        var layers = this._layers;\n        if (!singleCanvas) {\n            this._width = getSize(root, 0, opts);\n            this._height = getSize(root, 1, opts);\n            var domRoot = this._domRoot = createRoot(this._width, this._height);\n            root.appendChild(domRoot);\n        }\n        else {\n            var rootCanvas = root;\n            var width = rootCanvas.width;\n            var height = rootCanvas.height;\n            if (opts.width != null) {\n                width = opts.width;\n            }\n            if (opts.height != null) {\n                height = opts.height;\n            }\n            this.dpr = opts.devicePixelRatio || 1;\n            rootCanvas.width = width * this.dpr;\n            rootCanvas.height = height * this.dpr;\n            this._width = width;\n            this._height = height;\n            var mainLayer = new Layer(rootCanvas, this, this.dpr);\n            mainLayer.__builtin__ = true;\n            mainLayer.initContext();\n            layers[CANVAS_ZLEVEL] = mainLayer;\n            mainLayer.zlevel = CANVAS_ZLEVEL;\n            zlevelList.push(CANVAS_ZLEVEL);\n            this._domRoot = root;\n        }\n    }\n    CanvasPainter.prototype.getType = function () {\n        return 'canvas';\n    };\n    CanvasPainter.prototype.isSingleCanvas = function () {\n        return this._singleCanvas;\n    };\n    CanvasPainter.prototype.getViewportRoot = function () {\n        return this._domRoot;\n    };\n    CanvasPainter.prototype.getViewportRootOffset = function () {\n        var viewportRoot = this.getViewportRoot();\n        if (viewportRoot) {\n            return {\n                offsetLeft: viewportRoot.offsetLeft || 0,\n                offsetTop: viewportRoot.offsetTop || 0\n            };\n        }\n    };\n    CanvasPainter.prototype.refresh = function (paintAll) {\n        var list = this.storage.getDisplayList(true);\n        var prevList = this._prevDisplayList;\n        var zlevelList = this._zlevelList;\n        this._redrawId = Math.random();\n        this._paintList(list, prevList, paintAll, this._redrawId);\n        for (var i = 0; i < zlevelList.length; i++) {\n            var z = zlevelList[i];\n            var layer = this._layers[z];\n            if (!layer.__builtin__ && layer.refresh) {\n                var clearColor = i === 0 ? this._backgroundColor : null;\n                layer.refresh(clearColor);\n            }\n        }\n        if (this._opts.useDirtyRect) {\n            this._prevDisplayList = list.slice();\n        }\n        return this;\n    };\n    CanvasPainter.prototype.refreshHover = function () {\n        this._paintHoverList(this.storage.getDisplayList(false));\n    };\n    CanvasPainter.prototype._paintHoverList = function (list) {\n        var len = list.length;\n        var hoverLayer = this._hoverlayer;\n        hoverLayer && hoverLayer.clear();\n        if (!len) {\n            return;\n        }\n        var scope = {\n            inHover: true,\n            viewWidth: this._width,\n            viewHeight: this._height\n        };\n        var ctx;\n        for (var i = 0; i < len; i++) {\n            var el = list[i];\n            if (el.__inHover) {\n                if (!hoverLayer) {\n                    hoverLayer = this._hoverlayer = this.getLayer(HOVER_LAYER_ZLEVEL);\n                }\n                if (!ctx) {\n                    ctx = hoverLayer.ctx;\n                    ctx.save();\n                }\n                brush(ctx, el, scope, i === len - 1);\n            }\n        }\n        if (ctx) {\n            ctx.restore();\n        }\n    };\n    CanvasPainter.prototype.getHoverLayer = function () {\n        return this.getLayer(HOVER_LAYER_ZLEVEL);\n    };\n    CanvasPainter.prototype.paintOne = function (ctx, el) {\n        brushSingle(ctx, el);\n    };\n    CanvasPainter.prototype._paintList = function (list, prevList, paintAll, redrawId) {\n        if (this._redrawId !== redrawId) {\n            return;\n        }\n        paintAll = paintAll || false;\n        this._updateLayerStatus(list);\n        var _a = this._doPaintList(list, prevList, paintAll), finished = _a.finished, needsRefreshHover = _a.needsRefreshHover;\n        if (this._needsManuallyCompositing) {\n            this._compositeManually();\n        }\n        if (needsRefreshHover) {\n            this._paintHoverList(list);\n        }\n        if (!finished) {\n            var self_1 = this;\n            requestAnimationFrame(function () {\n                self_1._paintList(list, prevList, paintAll, redrawId);\n            });\n        }\n        else {\n            this.eachLayer(function (layer) {\n                layer.afterBrush && layer.afterBrush();\n            });\n        }\n    };\n    CanvasPainter.prototype._compositeManually = function () {\n        var ctx = this.getLayer(CANVAS_ZLEVEL).ctx;\n        var width = this._domRoot.width;\n        var height = this._domRoot.height;\n        ctx.clearRect(0, 0, width, height);\n        this.eachBuiltinLayer(function (layer) {\n            if (layer.virtual) {\n                ctx.drawImage(layer.dom, 0, 0, width, height);\n            }\n        });\n    };\n    CanvasPainter.prototype._doPaintList = function (list, prevList, paintAll) {\n        var _this = this;\n        var layerList = [];\n        var useDirtyRect = this._opts.useDirtyRect;\n        for (var zi = 0; zi < this._zlevelList.length; zi++) {\n            var zlevel = this._zlevelList[zi];\n            var layer = this._layers[zlevel];\n            if (layer.__builtin__\n                && layer !== this._hoverlayer\n                && (layer.__dirty || paintAll)) {\n                layerList.push(layer);\n            }\n        }\n        var finished = true;\n        var needsRefreshHover = false;\n        var _loop_1 = function (k) {\n            var layer = layerList[k];\n            var ctx = layer.ctx;\n            var repaintRects = useDirtyRect\n                && layer.createRepaintRects(list, prevList, this_1._width, this_1._height);\n            var start = paintAll ? layer.__startIndex : layer.__drawIndex;\n            var useTimer = !paintAll && layer.incremental && Date.now;\n            var startTime = useTimer && Date.now();\n            var clearColor = layer.zlevel === this_1._zlevelList[0]\n                ? this_1._backgroundColor : null;\n            if (layer.__startIndex === layer.__endIndex) {\n                layer.clear(false, clearColor, repaintRects);\n            }\n            else if (start === layer.__startIndex) {\n                var firstEl = list[start];\n                if (!firstEl.incremental || !firstEl.notClear || paintAll) {\n                    layer.clear(false, clearColor, repaintRects);\n                }\n            }\n            if (start === -1) {\n                console.error('For some unknown reason. drawIndex is -1');\n                start = layer.__startIndex;\n            }\n            var i;\n            var repaint = function (repaintRect) {\n                var scope = {\n                    inHover: false,\n                    allClipped: false,\n                    prevEl: null,\n                    viewWidth: _this._width,\n                    viewHeight: _this._height\n                };\n                for (i = start; i < layer.__endIndex; i++) {\n                    var el = list[i];\n                    if (el.__inHover) {\n                        needsRefreshHover = true;\n                    }\n                    _this._doPaintEl(el, layer, useDirtyRect, repaintRect, scope, i === layer.__endIndex - 1);\n                    if (useTimer) {\n                        var dTime = Date.now() - startTime;\n                        if (dTime > 15) {\n                            break;\n                        }\n                    }\n                }\n                if (scope.prevElClipPaths) {\n                    ctx.restore();\n                }\n            };\n            if (repaintRects) {\n                if (repaintRects.length === 0) {\n                    i = layer.__endIndex;\n                }\n                else {\n                    var dpr = this_1.dpr;\n                    for (var r = 0; r < repaintRects.length; ++r) {\n                        var rect = repaintRects[r];\n                        ctx.save();\n                        ctx.beginPath();\n                        ctx.rect(rect.x * dpr, rect.y * dpr, rect.width * dpr, rect.height * dpr);\n                        ctx.clip();\n                        repaint(rect);\n                        ctx.restore();\n                    }\n                }\n            }\n            else {\n                ctx.save();\n                repaint();\n                ctx.restore();\n            }\n            layer.__drawIndex = i;\n            if (layer.__drawIndex < layer.__endIndex) {\n                finished = false;\n            }\n        };\n        var this_1 = this;\n        for (var k = 0; k < layerList.length; k++) {\n            _loop_1(k);\n        }\n        if (env.wxa) {\n            util.each(this._layers, function (layer) {\n                if (layer && layer.ctx && layer.ctx.draw) {\n                    layer.ctx.draw();\n                }\n            });\n        }\n        return {\n            finished: finished,\n            needsRefreshHover: needsRefreshHover\n        };\n    };\n    CanvasPainter.prototype._doPaintEl = function (el, currentLayer, useDirtyRect, repaintRect, scope, isLast) {\n        var ctx = currentLayer.ctx;\n        if (useDirtyRect) {\n            var paintRect = el.getPaintRect();\n            if (!repaintRect || paintRect && paintRect.intersect(repaintRect)) {\n                brush(ctx, el, scope, isLast);\n                el.setPrevPaintRect(paintRect);\n            }\n        }\n        else {\n            brush(ctx, el, scope, isLast);\n        }\n    };\n    CanvasPainter.prototype.getLayer = function (zlevel, virtual) {\n        if (this._singleCanvas && !this._needsManuallyCompositing) {\n            zlevel = CANVAS_ZLEVEL;\n        }\n        var layer = this._layers[zlevel];\n        if (!layer) {\n            layer = new Layer('zr_' + zlevel, this, this.dpr);\n            layer.zlevel = zlevel;\n            layer.__builtin__ = true;\n            if (this._layerConfig[zlevel]) {\n                util.merge(layer, this._layerConfig[zlevel], true);\n            }\n            else if (this._layerConfig[zlevel - EL_AFTER_INCREMENTAL_INC]) {\n                util.merge(layer, this._layerConfig[zlevel - EL_AFTER_INCREMENTAL_INC], true);\n            }\n            if (virtual) {\n                layer.virtual = virtual;\n            }\n            this.insertLayer(zlevel, layer);\n            layer.initContext();\n        }\n        return layer;\n    };\n    CanvasPainter.prototype.insertLayer = function (zlevel, layer) {\n        var layersMap = this._layers;\n        var zlevelList = this._zlevelList;\n        var len = zlevelList.length;\n        var domRoot = this._domRoot;\n        var prevLayer = null;\n        var i = -1;\n        if (layersMap[zlevel]) {\n            if (process.env.NODE_ENV !== 'production') {\n                util.logError('ZLevel ' + zlevel + ' has been used already');\n            }\n            return;\n        }\n        if (!isLayerValid(layer)) {\n            if (process.env.NODE_ENV !== 'production') {\n                util.logError('Layer of zlevel ' + zlevel + ' is not valid');\n            }\n            return;\n        }\n        if (len > 0 && zlevel > zlevelList[0]) {\n            for (i = 0; i < len - 1; i++) {\n                if (zlevelList[i] < zlevel\n                    && zlevelList[i + 1] > zlevel) {\n                    break;\n                }\n            }\n            prevLayer = layersMap[zlevelList[i]];\n        }\n        zlevelList.splice(i + 1, 0, zlevel);\n        layersMap[zlevel] = layer;\n        if (!layer.virtual) {\n            if (prevLayer) {\n                var prevDom = prevLayer.dom;\n                if (prevDom.nextSibling) {\n                    domRoot.insertBefore(layer.dom, prevDom.nextSibling);\n                }\n                else {\n                    domRoot.appendChild(layer.dom);\n                }\n            }\n            else {\n                if (domRoot.firstChild) {\n                    domRoot.insertBefore(layer.dom, domRoot.firstChild);\n                }\n                else {\n                    domRoot.appendChild(layer.dom);\n                }\n            }\n        }\n        layer.__painter = this;\n    };\n    CanvasPainter.prototype.eachLayer = function (cb, context) {\n        var zlevelList = this._zlevelList;\n        for (var i = 0; i < zlevelList.length; i++) {\n            var z = zlevelList[i];\n            cb.call(context, this._layers[z], z);\n        }\n    };\n    CanvasPainter.prototype.eachBuiltinLayer = function (cb, context) {\n        var zlevelList = this._zlevelList;\n        for (var i = 0; i < zlevelList.length; i++) {\n            var z = zlevelList[i];\n            var layer = this._layers[z];\n            if (layer.__builtin__) {\n                cb.call(context, layer, z);\n            }\n        }\n    };\n    CanvasPainter.prototype.eachOtherLayer = function (cb, context) {\n        var zlevelList = this._zlevelList;\n        for (var i = 0; i < zlevelList.length; i++) {\n            var z = zlevelList[i];\n            var layer = this._layers[z];\n            if (!layer.__builtin__) {\n                cb.call(context, layer, z);\n            }\n        }\n    };\n    CanvasPainter.prototype.getLayers = function () {\n        return this._layers;\n    };\n    CanvasPainter.prototype._updateLayerStatus = function (list) {\n        this.eachBuiltinLayer(function (layer, z) {\n            layer.__dirty = layer.__used = false;\n        });\n        function updatePrevLayer(idx) {\n            if (prevLayer) {\n                if (prevLayer.__endIndex !== idx) {\n                    prevLayer.__dirty = true;\n                }\n                prevLayer.__endIndex = idx;\n            }\n        }\n        if (this._singleCanvas) {\n            for (var i_1 = 1; i_1 < list.length; i_1++) {\n                var el = list[i_1];\n                if (el.zlevel !== list[i_1 - 1].zlevel || el.incremental) {\n                    this._needsManuallyCompositing = true;\n                    break;\n                }\n            }\n        }\n        var prevLayer = null;\n        var incrementalLayerCount = 0;\n        var prevZlevel;\n        var i;\n        for (i = 0; i < list.length; i++) {\n            var el = list[i];\n            var zlevel = el.zlevel;\n            var layer = void 0;\n            if (prevZlevel !== zlevel) {\n                prevZlevel = zlevel;\n                incrementalLayerCount = 0;\n            }\n            if (el.incremental) {\n                layer = this.getLayer(zlevel + INCREMENTAL_INC, this._needsManuallyCompositing);\n                layer.incremental = true;\n                incrementalLayerCount = 1;\n            }\n            else {\n                layer = this.getLayer(zlevel + (incrementalLayerCount > 0 ? EL_AFTER_INCREMENTAL_INC : 0), this._needsManuallyCompositing);\n            }\n            if (!layer.__builtin__) {\n                util.logError('ZLevel ' + zlevel + ' has been used by unkown layer ' + layer.id);\n            }\n            if (layer !== prevLayer) {\n                layer.__used = true;\n                if (layer.__startIndex !== i) {\n                    layer.__dirty = true;\n                }\n                layer.__startIndex = i;\n                if (!layer.incremental) {\n                    layer.__drawIndex = i;\n                }\n                else {\n                    layer.__drawIndex = -1;\n                }\n                updatePrevLayer(i);\n                prevLayer = layer;\n            }\n            if ((el.__dirty & REDRAW_BIT) && !el.__inHover) {\n                layer.__dirty = true;\n                if (layer.incremental && layer.__drawIndex < 0) {\n                    layer.__drawIndex = i;\n                }\n            }\n        }\n        updatePrevLayer(i);\n        this.eachBuiltinLayer(function (layer, z) {\n            if (!layer.__used && layer.getElementCount() > 0) {\n                layer.__dirty = true;\n                layer.__startIndex = layer.__endIndex = layer.__drawIndex = 0;\n            }\n            if (layer.__dirty && layer.__drawIndex < 0) {\n                layer.__drawIndex = layer.__startIndex;\n            }\n        });\n    };\n    CanvasPainter.prototype.clear = function () {\n        this.eachBuiltinLayer(this._clearLayer);\n        return this;\n    };\n    CanvasPainter.prototype._clearLayer = function (layer) {\n        layer.clear();\n    };\n    CanvasPainter.prototype.setBackgroundColor = function (backgroundColor) {\n        this._backgroundColor = backgroundColor;\n        util.each(this._layers, function (layer) {\n            layer.setUnpainted();\n        });\n    };\n    CanvasPainter.prototype.configLayer = function (zlevel, config) {\n        if (config) {\n            var layerConfig = this._layerConfig;\n            if (!layerConfig[zlevel]) {\n                layerConfig[zlevel] = config;\n            }\n            else {\n                util.merge(layerConfig[zlevel], config, true);\n            }\n            for (var i = 0; i < this._zlevelList.length; i++) {\n                var _zlevel = this._zlevelList[i];\n                if (_zlevel === zlevel || _zlevel === zlevel + EL_AFTER_INCREMENTAL_INC) {\n                    var layer = this._layers[_zlevel];\n                    util.merge(layer, layerConfig[zlevel], true);\n                }\n            }\n        }\n    };\n    CanvasPainter.prototype.delLayer = function (zlevel) {\n        var layers = this._layers;\n        var zlevelList = this._zlevelList;\n        var layer = layers[zlevel];\n        if (!layer) {\n            return;\n        }\n        layer.dom.parentNode.removeChild(layer.dom);\n        delete layers[zlevel];\n        zlevelList.splice(util.indexOf(zlevelList, zlevel), 1);\n    };\n    CanvasPainter.prototype.resize = function (width, height) {\n        if (!this._domRoot.style) {\n            if (width == null || height == null) {\n                return;\n            }\n            this._width = width;\n            this._height = height;\n            this.getLayer(CANVAS_ZLEVEL).resize(width, height);\n        }\n        else {\n            var domRoot = this._domRoot;\n            domRoot.style.display = 'none';\n            var opts = this._opts;\n            var root = this.root;\n            width != null && (opts.width = width);\n            height != null && (opts.height = height);\n            width = getSize(root, 0, opts);\n            height = getSize(root, 1, opts);\n            domRoot.style.display = '';\n            if (this._width !== width || height !== this._height) {\n                domRoot.style.width = width + 'px';\n                domRoot.style.height = height + 'px';\n                for (var id in this._layers) {\n                    if (this._layers.hasOwnProperty(id)) {\n                        this._layers[id].resize(width, height);\n                    }\n                }\n                this.refresh(true);\n            }\n            this._width = width;\n            this._height = height;\n        }\n        return this;\n    };\n    CanvasPainter.prototype.clearLayer = function (zlevel) {\n        var layer = this._layers[zlevel];\n        if (layer) {\n            layer.clear();\n        }\n    };\n    CanvasPainter.prototype.dispose = function () {\n        this.root.innerHTML = '';\n        this.root =\n            this.storage =\n                this._domRoot =\n                    this._layers = null;\n    };\n    CanvasPainter.prototype.getRenderedCanvas = function (opts) {\n        opts = opts || {};\n        if (this._singleCanvas && !this._compositeManually) {\n            return this._layers[CANVAS_ZLEVEL].dom;\n        }\n        var imageLayer = new Layer('image', this, opts.pixelRatio || this.dpr);\n        imageLayer.initContext();\n        imageLayer.clear(false, opts.backgroundColor || this._backgroundColor);\n        var ctx = imageLayer.ctx;\n        if (opts.pixelRatio <= this.dpr) {\n            this.refresh();\n            var width_1 = imageLayer.dom.width;\n            var height_1 = imageLayer.dom.height;\n            this.eachLayer(function (layer) {\n                if (layer.__builtin__) {\n                    ctx.drawImage(layer.dom, 0, 0, width_1, height_1);\n                }\n                else if (layer.renderToCanvas) {\n                    ctx.save();\n                    layer.renderToCanvas(ctx);\n                    ctx.restore();\n                }\n            });\n        }\n        else {\n            var scope = {\n                inHover: false,\n                viewWidth: this._width,\n                viewHeight: this._height\n            };\n            var displayList = this.storage.getDisplayList(true);\n            for (var i = 0, len = displayList.length; i < len; i++) {\n                var el = displayList[i];\n                brush(ctx, el, scope, i === len - 1);\n            }\n        }\n        return imageLayer.dom;\n    };\n    CanvasPainter.prototype.getWidth = function () {\n        return this._width;\n    };\n    CanvasPainter.prototype.getHeight = function () {\n        return this._height;\n    };\n    return CanvasPainter;\n}());\nexport default CanvasPainter;\n;\n","import { isArray, isNumber, map } from '../core/util.js';\nexport function normalizeLineDash(lineType, lineWidth) {\n    if (!lineType || lineType === 'solid' || !(lineWidth > 0)) {\n        return null;\n    }\n    return lineType === 'dashed'\n        ? [4 * lineWidth, 2 * lineWidth]\n        : lineType === 'dotted'\n            ? [lineWidth]\n            : isNumber(lineType)\n                ? [lineType] : isArray(lineType) ? lineType : null;\n}\nexport function getLineDash(el) {\n    var style = el.style;\n    var lineDash = style.lineDash && style.lineWidth > 0 && normalizeLineDash(style.lineDash, style.lineWidth);\n    var lineDashOffset = style.lineDashOffset;\n    if (lineDash) {\n        var lineScale_1 = (style.strokeNoScale && el.getLineScale) ? el.getLineScale() : 1;\n        if (lineScale_1 && lineScale_1 !== 1) {\n            lineDash = map(lineDash, function (rawVal) {\n                return rawVal / lineScale_1;\n            });\n            lineDashOffset /= lineScale_1;\n        }\n    }\n    return [lineDash, lineDashOffset];\n}\n"],"names":["createDom","id","painter","dpr","newDom","platformApi","width","getWidth","height","getHeight","newDomStyle","style","position","left","top","setAttribute","_super","Layer","dom","_this","call","this","motionBlur","lastFrameAlpha","virtual","config","incremental","zlevel","maxRepaintRectCount","__dirty","__firstTimePaint","__used","__drawIndex","__startIndex","__endIndex","__prevStartIndex","__prevEndIndex","devicePixelRatio","util","domStyle","onselectstart","padding","margin","borderWidth","__extends","prototype","getElementCount","afterBrush","initContext","ctx","getContext","setUnpainted","createBackBuffer","domBack","ctxBack","scale","createRepaintRects","displayList","prevList","viewWidth","viewHeight","hasIntersections","mergedRepaintRects","full","pendingRect","BoundingRect","addRectToMergePool","rect","isFinite","isZero","length","boundingRect","copy","push","isMerged","minDeltaArea","Infinity","bestRectToMergeIdx","i","mergedRect","intersect","pendingRect_1","union","aArea","bArea","deltaArea","el","shouldPaint","shouldBePainted","prevRect","__isRendered","REDRAW_BIT","getPrevPaintRect","curRect","getPaintRect","__zr","splice","j","_paintRects","debugGetPaintRects","slice","resize","clear","clearAll","clearColor","repaintRects","haveMotionBLur","self","globalCompositeOperation","drawImage","doClear","x","y","clearRect","clearColorGradientOrPattern","__canvasGradient","getCanvasGradient","scaleX","scaleY","createCanvasPattern","dirty","__painter","refresh","save","fillStyle","fillRect","restore","globalAlpha","Eventful","HOVER_LAYER_ZLEVEL","CANVAS_ZLEVEL","EL_AFTER_INCREMENTAL_INC","CanvasPainter","root","storage","opts","type","_zlevelList","_prevDisplayList","_layers","_layerConfig","_needsManuallyCompositing","singleCanvas","nodeName","toUpperCase","_opts","_singleCanvas","innerHTML","zlevelList","layers","rootCanvas","_width","_height","mainLayer","__builtin__","_domRoot","getSize","domRoot","document","createElement","cssText","join","createRoot","appendChild","getType","isSingleCanvas","getViewportRoot","getViewportRootOffset","viewportRoot","offsetLeft","offsetTop","paintAll","list","getDisplayList","_redrawId","Math","random","_paintList","z","layer","_backgroundColor","useDirtyRect","refreshHover","_paintHoverList","len","hoverLayer","_hoverlayer","scope","inHover","__inHover","getLayer","brush","getHoverLayer","paintOne","brushSingle","redrawId","_updateLayerStatus","_a","_doPaintList","finished","needsRefreshHover","_compositeManually","eachLayer","self_1","requestAnimationFrame","eachBuiltinLayer","layerList","zi","_loop_1","k","this_1","start","useTimer","Date","now","startTime","firstEl","notClear","console","error","repaint","repaintRect","allClipped","prevEl","_doPaintEl","prevElClipPaths","r","beginPath","clip","env","draw","currentLayer","isLast","paintRect","setPrevPaintRect","insertLayer","layersMap","prevLayer","isLayerValid","prevDom","nextSibling","insertBefore","firstChild","cb","context","eachOtherLayer","getLayers","updatePrevLayer","idx","i_1","prevZlevel","incrementalLayerCount","_clearLayer","setBackgroundColor","backgroundColor","configLayer","layerConfig","_zlevel","delLayer","parentNode","removeChild","display","hasOwnProperty","clearLayer","dispose","getRenderedCanvas","imageLayer","pixelRatio","width_1","height_1","renderToCanvas","getLineDash","lineType","lineWidth","lineDash","isNumber","isArray","lineDashOffset","lineScale_1","strokeNoScale","getLineScale","map","rawVal"],"sourceRoot":""}