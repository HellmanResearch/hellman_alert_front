{"version":3,"file":"static/js/7606.faf45132.js","mappings":"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","sources":["../node_modules/echarts/lib/chart/helper/createClipPathFromCoordSys.js","../node_modules/echarts/lib/chart/helper/createGraphFromNodeEdge.js","../node_modules/echarts/lib/chart/helper/createRenderPlanner.js","../node_modules/echarts/lib/chart/helper/createSeriesData.js","../node_modules/echarts/lib/chart/helper/createSeriesDataSimply.js","../node_modules/echarts/lib/chart/helper/enableAriaDecalForTree.js","../node_modules/echarts/lib/chart/helper/labelHelper.js","../node_modules/echarts/lib/chart/helper/multipleGraphEdgeHelper.js","../node_modules/echarts/lib/chart/helper/pieHelper.js","../node_modules/echarts/lib/chart/helper/treeHelper.js"],"sourcesContent":["\n/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\n\n\n/**\n * AUTO-GENERATED FILE. DO NOT MODIFY.\n */\n\n/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\nimport * as graphic from '../../util/graphic.js';\nimport { round } from '../../util/number.js';\nimport { isFunction } from 'zrender/lib/core/util.js';\n\nfunction createGridClipPath(cartesian, hasAnimation, seriesModel, done, during) {\n  var rect = cartesian.getArea();\n  var x = rect.x;\n  var y = rect.y;\n  var width = rect.width;\n  var height = rect.height;\n  var lineWidth = seriesModel.get(['lineStyle', 'width']) || 2; // Expand the clip path a bit to avoid the border is clipped and looks thinner\n\n  x -= lineWidth / 2;\n  y -= lineWidth / 2;\n  width += lineWidth;\n  height += lineWidth; // fix: https://github.com/apache/incubator-echarts/issues/11369\n\n  x = Math.floor(x);\n  width = Math.round(width);\n  var clipPath = new graphic.Rect({\n    shape: {\n      x: x,\n      y: y,\n      width: width,\n      height: height\n    }\n  });\n\n  if (hasAnimation) {\n    var baseAxis = cartesian.getBaseAxis();\n    var isHorizontal = baseAxis.isHorizontal();\n    var isAxisInversed = baseAxis.inverse;\n\n    if (isHorizontal) {\n      if (isAxisInversed) {\n        clipPath.shape.x += width;\n      }\n\n      clipPath.shape.width = 0;\n    } else {\n      if (!isAxisInversed) {\n        clipPath.shape.y += height;\n      }\n\n      clipPath.shape.height = 0;\n    }\n\n    var duringCb = isFunction(during) ? function (percent) {\n      during(percent, clipPath);\n    } : null;\n    graphic.initProps(clipPath, {\n      shape: {\n        width: width,\n        height: height,\n        x: x,\n        y: y\n      }\n    }, seriesModel, null, done, duringCb);\n  }\n\n  return clipPath;\n}\n\nfunction createPolarClipPath(polar, hasAnimation, seriesModel) {\n  var sectorArea = polar.getArea(); // Avoid float number rounding error for symbol on the edge of axis extent.\n\n  var r0 = round(sectorArea.r0, 1);\n  var r = round(sectorArea.r, 1);\n  var clipPath = new graphic.Sector({\n    shape: {\n      cx: round(polar.cx, 1),\n      cy: round(polar.cy, 1),\n      r0: r0,\n      r: r,\n      startAngle: sectorArea.startAngle,\n      endAngle: sectorArea.endAngle,\n      clockwise: sectorArea.clockwise\n    }\n  });\n\n  if (hasAnimation) {\n    var isRadial = polar.getBaseAxis().dim === 'angle';\n\n    if (isRadial) {\n      clipPath.shape.endAngle = sectorArea.startAngle;\n    } else {\n      clipPath.shape.r = r0;\n    }\n\n    graphic.initProps(clipPath, {\n      shape: {\n        endAngle: sectorArea.endAngle,\n        r: r\n      }\n    }, seriesModel);\n  }\n\n  return clipPath;\n}\n\nfunction createClipPath(coordSys, hasAnimation, seriesModel, done, during) {\n  if (!coordSys) {\n    return null;\n  } else if (coordSys.type === 'polar') {\n    return createPolarClipPath(coordSys, hasAnimation, seriesModel);\n  } else if (coordSys.type === 'cartesian2d') {\n    return createGridClipPath(coordSys, hasAnimation, seriesModel, done, during);\n  }\n\n  return null;\n}\n\nexport { createGridClipPath, createPolarClipPath, createClipPath };","\n/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\n\n\n/**\n * AUTO-GENERATED FILE. DO NOT MODIFY.\n */\n\n/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\nimport * as zrUtil from 'zrender/lib/core/util.js';\nimport SeriesData from '../../data/SeriesData.js';\nimport Graph from '../../data/Graph.js';\nimport linkSeriesData from '../../data/helper/linkSeriesData.js';\nimport prepareSeriesDataSchema from '../../data/helper/createDimensions.js';\nimport CoordinateSystem from '../../core/CoordinateSystem.js';\nimport createSeriesData from './createSeriesData.js';\nimport { convertOptionIdName } from '../../util/model.js';\nexport default function createGraphFromNodeEdge(nodes, edges, seriesModel, directed, beforeLink) {\n  // ??? TODO\n  // support dataset?\n  var graph = new Graph(directed);\n\n  for (var i = 0; i < nodes.length; i++) {\n    graph.addNode(zrUtil.retrieve( // Id, name, dataIndex\n    nodes[i].id, nodes[i].name, i), i);\n  }\n\n  var linkNameList = [];\n  var validEdges = [];\n  var linkCount = 0;\n\n  for (var i = 0; i < edges.length; i++) {\n    var link = edges[i];\n    var source = link.source;\n    var target = link.target; // addEdge may fail when source or target not exists\n\n    if (graph.addEdge(source, target, linkCount)) {\n      validEdges.push(link);\n      linkNameList.push(zrUtil.retrieve(convertOptionIdName(link.id, null), source + ' > ' + target));\n      linkCount++;\n    }\n  }\n\n  var coordSys = seriesModel.get('coordinateSystem');\n  var nodeData;\n\n  if (coordSys === 'cartesian2d' || coordSys === 'polar') {\n    nodeData = createSeriesData(nodes, seriesModel);\n  } else {\n    var coordSysCtor = CoordinateSystem.get(coordSys);\n    var coordDimensions = coordSysCtor ? coordSysCtor.dimensions || [] : []; // FIXME: Some geo do not need `value` dimenson, whereas `calendar` needs\n    // `value` dimension, but graph need `value` dimension. It's better to\n    // uniform this behavior.\n\n    if (zrUtil.indexOf(coordDimensions, 'value') < 0) {\n      coordDimensions.concat(['value']);\n    }\n\n    var dimensions = prepareSeriesDataSchema(nodes, {\n      coordDimensions: coordDimensions,\n      encodeDefine: seriesModel.getEncode()\n    }).dimensions;\n    nodeData = new SeriesData(dimensions, seriesModel);\n    nodeData.initData(nodes);\n  }\n\n  var edgeData = new SeriesData(['value'], seriesModel);\n  edgeData.initData(validEdges, linkNameList);\n  beforeLink && beforeLink(nodeData, edgeData);\n  linkSeriesData({\n    mainData: nodeData,\n    struct: graph,\n    structAttr: 'graph',\n    datas: {\n      node: nodeData,\n      edge: edgeData\n    },\n    datasAttr: {\n      node: 'data',\n      edge: 'edgeData'\n    }\n  }); // Update dataIndex of nodes and edges because invalid edge may be removed\n\n  graph.update();\n  return graph;\n}","\n/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\n\n\n/**\n * AUTO-GENERATED FILE. DO NOT MODIFY.\n */\n\n/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\nimport { makeInner } from '../../util/model.js';\n/**\n * @return {string} If large mode changed, return string 'reset';\n */\n\nexport default function createRenderPlanner() {\n  var inner = makeInner();\n  return function (seriesModel) {\n    var fields = inner(seriesModel);\n    var pipelineContext = seriesModel.pipelineContext;\n    var originalLarge = !!fields.large;\n    var originalProgressive = !!fields.progressiveRender; // FIXME: if the planner works on a filtered series, `pipelineContext` does not\n    // exists. See #11611 . Probably we need to modify this structure, see the comment\n    // on `performRawSeries` in `Schedular.js`.\n\n    var large = fields.large = !!(pipelineContext && pipelineContext.large);\n    var progressive = fields.progressiveRender = !!(pipelineContext && pipelineContext.progressiveRender);\n    return !!(originalLarge !== large || originalProgressive !== progressive) && 'reset';\n  };\n}","\n/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\n\n\n/**\n * AUTO-GENERATED FILE. DO NOT MODIFY.\n */\n\n/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\nimport * as zrUtil from 'zrender/lib/core/util.js';\nimport SeriesData from '../../data/SeriesData.js';\nimport prepareSeriesDataSchema from '../../data/helper/createDimensions.js';\nimport { getDimensionTypeByAxis } from '../../data/helper/dimensionHelper.js';\nimport { getDataItemValue } from '../../util/model.js';\nimport CoordinateSystem from '../../core/CoordinateSystem.js';\nimport { getCoordSysInfoBySeries } from '../../model/referHelper.js';\nimport { createSourceFromSeriesDataOption } from '../../data/Source.js';\nimport { enableDataStack } from '../../data/helper/dataStackHelper.js';\nimport { makeSeriesEncodeForAxisCoordSys } from '../../data/helper/sourceHelper.js';\nimport { SOURCE_FORMAT_ORIGINAL } from '../../util/types.js';\n\nfunction getCoordSysDimDefs(seriesModel, coordSysInfo) {\n  var coordSysName = seriesModel.get('coordinateSystem');\n  var registeredCoordSys = CoordinateSystem.get(coordSysName);\n  var coordSysDimDefs;\n\n  if (coordSysInfo && coordSysInfo.coordSysDims) {\n    coordSysDimDefs = zrUtil.map(coordSysInfo.coordSysDims, function (dim) {\n      var dimInfo = {\n        name: dim\n      };\n      var axisModel = coordSysInfo.axisMap.get(dim);\n\n      if (axisModel) {\n        var axisType = axisModel.get('type');\n        dimInfo.type = getDimensionTypeByAxis(axisType);\n      }\n\n      return dimInfo;\n    });\n  }\n\n  if (!coordSysDimDefs) {\n    // Get dimensions from registered coordinate system\n    coordSysDimDefs = registeredCoordSys && (registeredCoordSys.getDimensionsInfo ? registeredCoordSys.getDimensionsInfo() : registeredCoordSys.dimensions.slice()) || ['x', 'y'];\n  }\n\n  return coordSysDimDefs;\n}\n\nfunction injectOrdinalMeta(dimInfoList, createInvertedIndices, coordSysInfo) {\n  var firstCategoryDimIndex;\n  var hasNameEncode;\n  coordSysInfo && zrUtil.each(dimInfoList, function (dimInfo, dimIndex) {\n    var coordDim = dimInfo.coordDim;\n    var categoryAxisModel = coordSysInfo.categoryAxisMap.get(coordDim);\n\n    if (categoryAxisModel) {\n      if (firstCategoryDimIndex == null) {\n        firstCategoryDimIndex = dimIndex;\n      }\n\n      dimInfo.ordinalMeta = categoryAxisModel.getOrdinalMeta();\n\n      if (createInvertedIndices) {\n        dimInfo.createInvertedIndices = true;\n      }\n    }\n\n    if (dimInfo.otherDims.itemName != null) {\n      hasNameEncode = true;\n    }\n  });\n\n  if (!hasNameEncode && firstCategoryDimIndex != null) {\n    dimInfoList[firstCategoryDimIndex].otherDims.itemName = 0;\n  }\n\n  return firstCategoryDimIndex;\n}\n/**\n * Caution: there are side effects to `sourceManager` in this method.\n * Should better only be called in `Series['getInitialData']`.\n */\n\n\nfunction createSeriesData(sourceRaw, seriesModel, opt) {\n  opt = opt || {};\n  var sourceManager = seriesModel.getSourceManager();\n  var source;\n  var isOriginalSource = false;\n\n  if (sourceRaw) {\n    isOriginalSource = true;\n    source = createSourceFromSeriesDataOption(sourceRaw);\n  } else {\n    source = sourceManager.getSource(); // Is series.data. not dataset.\n\n    isOriginalSource = source.sourceFormat === SOURCE_FORMAT_ORIGINAL;\n  }\n\n  var coordSysInfo = getCoordSysInfoBySeries(seriesModel);\n  var coordSysDimDefs = getCoordSysDimDefs(seriesModel, coordSysInfo);\n  var useEncodeDefaulter = opt.useEncodeDefaulter;\n  var encodeDefaulter = zrUtil.isFunction(useEncodeDefaulter) ? useEncodeDefaulter : useEncodeDefaulter ? zrUtil.curry(makeSeriesEncodeForAxisCoordSys, coordSysDimDefs, seriesModel) : null;\n  var createDimensionOptions = {\n    coordDimensions: coordSysDimDefs,\n    generateCoord: opt.generateCoord,\n    encodeDefine: seriesModel.getEncode(),\n    encodeDefaulter: encodeDefaulter,\n    canOmitUnusedDimensions: !isOriginalSource\n  };\n  var schema = prepareSeriesDataSchema(source, createDimensionOptions);\n  var firstCategoryDimIndex = injectOrdinalMeta(schema.dimensions, opt.createInvertedIndices, coordSysInfo);\n  var store = !isOriginalSource ? sourceManager.getSharedDataStore(schema) : null;\n  var stackCalculationInfo = enableDataStack(seriesModel, {\n    schema: schema,\n    store: store\n  });\n  var data = new SeriesData(schema, seriesModel);\n  data.setCalculationInfo(stackCalculationInfo);\n  var dimValueGetter = firstCategoryDimIndex != null && isNeedCompleteOrdinalData(source) ? function (itemOpt, dimName, dataIndex, dimIndex) {\n    // Use dataIndex as ordinal value in categoryAxis\n    return dimIndex === firstCategoryDimIndex ? dataIndex : this.defaultDimValueGetter(itemOpt, dimName, dataIndex, dimIndex);\n  } : null;\n  data.hasItemOption = false;\n  data.initData( // Try to reuse the data store in sourceManager if using dataset.\n  isOriginalSource ? source : store, null, dimValueGetter);\n  return data;\n}\n\nfunction isNeedCompleteOrdinalData(source) {\n  if (source.sourceFormat === SOURCE_FORMAT_ORIGINAL) {\n    var sampleItem = firstDataNotNull(source.data || []);\n    return !zrUtil.isArray(getDataItemValue(sampleItem));\n  }\n}\n\nfunction firstDataNotNull(arr) {\n  var i = 0;\n\n  while (i < arr.length && arr[i] == null) {\n    i++;\n  }\n\n  return arr[i];\n}\n\nexport default createSeriesData;","\n/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\n\n\n/**\n * AUTO-GENERATED FILE. DO NOT MODIFY.\n */\n\n/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\nimport prepareSeriesDataSchema from '../../data/helper/createDimensions.js';\nimport SeriesData from '../../data/SeriesData.js';\nimport { extend, isArray } from 'zrender/lib/core/util.js';\n/**\n * [Usage]:\n * (1)\n * createListSimply(seriesModel, ['value']);\n * (2)\n * createListSimply(seriesModel, {\n *     coordDimensions: ['value'],\n *     dimensionsCount: 5\n * });\n */\n\nexport default function createSeriesDataSimply(seriesModel, opt, nameList) {\n  opt = isArray(opt) && {\n    coordDimensions: opt\n  } || extend({\n    encodeDefine: seriesModel.getEncode()\n  }, opt);\n  var source = seriesModel.getSource();\n  var dimensions = prepareSeriesDataSchema(source, opt).dimensions;\n  var list = new SeriesData(dimensions, seriesModel);\n  list.initData(source, nameList);\n  return list;\n}","\n/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\n\n\n/**\n * AUTO-GENERATED FILE. DO NOT MODIFY.\n */\n\n/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\nimport { getDecalFromPalette } from '../../model/mixin/palette.js';\nexport default function enableAriaDecalForTree(seriesModel) {\n  var data = seriesModel.getData();\n  var tree = data.tree;\n  var decalPaletteScope = {};\n  tree.eachNode(function (node) {\n    // Use decal of level 1 node\n    var current = node;\n\n    while (current && current.depth > 1) {\n      current = current.parentNode;\n    }\n\n    var decal = getDecalFromPalette(seriesModel.ecModel, current.name || current.dataIndex + '', decalPaletteScope);\n    node.setVisual('decal', decal);\n  });\n}","\n/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\n\n\n/**\n * AUTO-GENERATED FILE. DO NOT MODIFY.\n */\n\n/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\nimport { retrieveRawValue } from '../../data/helper/dataProvider.js';\nimport { isArray } from 'zrender/lib/core/util.js';\n/**\n * @return label string. Not null/undefined\n */\n\nexport function getDefaultLabel(data, dataIndex) {\n  var labelDims = data.mapDimensionsAll('defaultedLabel');\n  var len = labelDims.length; // Simple optimization (in lots of cases, label dims length is 1)\n\n  if (len === 1) {\n    var rawVal = retrieveRawValue(data, dataIndex, labelDims[0]);\n    return rawVal != null ? rawVal + '' : null;\n  } else if (len) {\n    var vals = [];\n\n    for (var i = 0; i < labelDims.length; i++) {\n      vals.push(retrieveRawValue(data, dataIndex, labelDims[i]));\n    }\n\n    return vals.join(' ');\n  }\n}\nexport function getDefaultInterpolatedLabel(data, interpolatedValue) {\n  var labelDims = data.mapDimensionsAll('defaultedLabel');\n\n  if (!isArray(interpolatedValue)) {\n    return interpolatedValue + '';\n  }\n\n  var vals = [];\n\n  for (var i = 0; i < labelDims.length; i++) {\n    var dimIndex = data.getDimensionIndex(labelDims[i]);\n\n    if (dimIndex >= 0) {\n      vals.push(interpolatedValue[dimIndex]);\n    }\n  }\n\n  return vals.join(' ');\n}","\n/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\n\n\n/**\n * AUTO-GENERATED FILE. DO NOT MODIFY.\n */\n\n/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\n// @ts-nocheck\nimport * as zrUtil from 'zrender/lib/core/util.js';\nvar KEY_DELIMITER = '-->';\n/**\n * params handler\n * @param {module:echarts/model/SeriesModel} seriesModel\n * @returns {*}\n */\n\nvar getAutoCurvenessParams = function (seriesModel) {\n  return seriesModel.get('autoCurveness') || null;\n};\n/**\n * Generate a list of edge curvatures, 20 is the default\n * @param {module:echarts/model/SeriesModel} seriesModel\n * @param {number} appendLength\n * @return  20 => [0, -0.2, 0.2, -0.4, 0.4, -0.6, 0.6, -0.8, 0.8, -1, 1, -1.2, 1.2, -1.4, 1.4, -1.6, 1.6, -1.8, 1.8, -2]\n */\n\n\nvar createCurveness = function (seriesModel, appendLength) {\n  var autoCurvenessParmas = getAutoCurvenessParams(seriesModel);\n  var length = 20;\n  var curvenessList = []; // handler the function set\n\n  if (zrUtil.isNumber(autoCurvenessParmas)) {\n    length = autoCurvenessParmas;\n  } else if (zrUtil.isArray(autoCurvenessParmas)) {\n    seriesModel.__curvenessList = autoCurvenessParmas;\n    return;\n  } // append length\n\n\n  if (appendLength > length) {\n    length = appendLength;\n  } // make sure the length is even\n\n\n  var len = length % 2 ? length + 2 : length + 3;\n  curvenessList = [];\n\n  for (var i = 0; i < len; i++) {\n    curvenessList.push((i % 2 ? i + 1 : i) / 10 * (i % 2 ? -1 : 1));\n  }\n\n  seriesModel.__curvenessList = curvenessList;\n};\n/**\n * Create different cache key data in the positive and negative directions, in order to set the curvature later\n * @param {number|string|module:echarts/data/Graph.Node} n1\n * @param {number|string|module:echarts/data/Graph.Node} n2\n * @param {module:echarts/model/SeriesModel} seriesModel\n * @returns {string} key\n */\n\n\nvar getKeyOfEdges = function (n1, n2, seriesModel) {\n  var source = [n1.id, n1.dataIndex].join('.');\n  var target = [n2.id, n2.dataIndex].join('.');\n  return [seriesModel.uid, source, target].join(KEY_DELIMITER);\n};\n/**\n * get opposite key\n * @param {string} key\n * @returns {string}\n */\n\n\nvar getOppositeKey = function (key) {\n  var keys = key.split(KEY_DELIMITER);\n  return [keys[0], keys[2], keys[1]].join(KEY_DELIMITER);\n};\n/**\n * get edgeMap with key\n * @param edge\n * @param {module:echarts/model/SeriesModel} seriesModel\n */\n\n\nvar getEdgeFromMap = function (edge, seriesModel) {\n  var key = getKeyOfEdges(edge.node1, edge.node2, seriesModel);\n  return seriesModel.__edgeMap[key];\n};\n/**\n * calculate all cases total length\n * @param edge\n * @param seriesModel\n * @returns {number}\n */\n\n\nvar getTotalLengthBetweenNodes = function (edge, seriesModel) {\n  var len = getEdgeMapLengthWithKey(getKeyOfEdges(edge.node1, edge.node2, seriesModel), seriesModel);\n  var lenV = getEdgeMapLengthWithKey(getKeyOfEdges(edge.node2, edge.node1, seriesModel), seriesModel);\n  return len + lenV;\n};\n/**\n *\n * @param key\n */\n\n\nvar getEdgeMapLengthWithKey = function (key, seriesModel) {\n  var edgeMap = seriesModel.__edgeMap;\n  return edgeMap[key] ? edgeMap[key].length : 0;\n};\n/**\n * Count the number of edges between the same two points, used to obtain the curvature table and the parity of the edge\n * @see /graph/GraphSeries.js@getInitialData\n * @param {module:echarts/model/SeriesModel} seriesModel\n */\n\n\nexport function initCurvenessList(seriesModel) {\n  if (!getAutoCurvenessParams(seriesModel)) {\n    return;\n  }\n\n  seriesModel.__curvenessList = [];\n  seriesModel.__edgeMap = {}; // calc the array of curveness List\n\n  createCurveness(seriesModel);\n}\n/**\n * set edgeMap with key\n * @param {number|string|module:echarts/data/Graph.Node} n1\n * @param {number|string|module:echarts/data/Graph.Node} n2\n * @param {module:echarts/model/SeriesModel} seriesModel\n * @param {number} index\n */\n\nexport function createEdgeMapForCurveness(n1, n2, seriesModel, index) {\n  if (!getAutoCurvenessParams(seriesModel)) {\n    return;\n  }\n\n  var key = getKeyOfEdges(n1, n2, seriesModel);\n  var edgeMap = seriesModel.__edgeMap;\n  var oppositeEdges = edgeMap[getOppositeKey(key)]; // set direction\n\n  if (edgeMap[key] && !oppositeEdges) {\n    edgeMap[key].isForward = true;\n  } else if (oppositeEdges && edgeMap[key]) {\n    oppositeEdges.isForward = true;\n    edgeMap[key].isForward = false;\n  }\n\n  edgeMap[key] = edgeMap[key] || [];\n  edgeMap[key].push(index);\n}\n/**\n * get curvature for edge\n * @param edge\n * @param {module:echarts/model/SeriesModel} seriesModel\n * @param index\n */\n\nexport function getCurvenessForEdge(edge, seriesModel, index, needReverse) {\n  var autoCurvenessParams = getAutoCurvenessParams(seriesModel);\n  var isArrayParam = zrUtil.isArray(autoCurvenessParams);\n\n  if (!autoCurvenessParams) {\n    return null;\n  }\n\n  var edgeArray = getEdgeFromMap(edge, seriesModel);\n\n  if (!edgeArray) {\n    return null;\n  }\n\n  var edgeIndex = -1;\n\n  for (var i = 0; i < edgeArray.length; i++) {\n    if (edgeArray[i] === index) {\n      edgeIndex = i;\n      break;\n    }\n  } // if totalLen is Longer createCurveness\n\n\n  var totalLen = getTotalLengthBetweenNodes(edge, seriesModel);\n  createCurveness(seriesModel, totalLen);\n  edge.lineStyle = edge.lineStyle || {}; // if is opposite edge, must set curvenss to opposite number\n\n  var curKey = getKeyOfEdges(edge.node1, edge.node2, seriesModel);\n  var curvenessList = seriesModel.__curvenessList; // if pass array no need parity\n\n  var parityCorrection = isArrayParam ? 0 : totalLen % 2 ? 0 : 1;\n\n  if (!edgeArray.isForward) {\n    // the opposite edge show outside\n    var oppositeKey = getOppositeKey(curKey);\n    var len = getEdgeMapLengthWithKey(oppositeKey, seriesModel);\n    var resValue = curvenessList[edgeIndex + len + parityCorrection]; // isNeedReverse, simple, force type need reverse the curveness in the junction of the forword and the opposite\n\n    if (needReverse) {\n      // set as array may make the parity handle with the len of opposite\n      if (isArrayParam) {\n        if (autoCurvenessParams && autoCurvenessParams[0] === 0) {\n          return (len + parityCorrection) % 2 ? resValue : -resValue;\n        } else {\n          return ((len % 2 ? 0 : 1) + parityCorrection) % 2 ? resValue : -resValue;\n        }\n      } else {\n        return (len + parityCorrection) % 2 ? resValue : -resValue;\n      }\n    } else {\n      return curvenessList[edgeIndex + len + parityCorrection];\n    }\n  } else {\n    return curvenessList[parityCorrection + edgeIndex];\n  }\n}","\n/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\n\n\n/**\n * AUTO-GENERATED FILE. DO NOT MODIFY.\n */\n\n/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\nimport { isArray, map } from 'zrender/lib/core/util.js';\nimport { parsePercent } from 'zrender/lib/contain/text.js';\nexport function getSectorCornerRadius(model, shape, zeroIfNull) {\n  var cornerRadius = model.get('borderRadius');\n\n  if (cornerRadius == null) {\n    return zeroIfNull ? {\n      cornerRadius: 0\n    } : null;\n  }\n\n  if (!isArray(cornerRadius)) {\n    cornerRadius = [cornerRadius, cornerRadius, cornerRadius, cornerRadius];\n  }\n\n  var dr = Math.abs(shape.r || 0 - shape.r0 || 0);\n  return {\n    cornerRadius: map(cornerRadius, function (cr) {\n      return parsePercent(cr, dr);\n    })\n  };\n}","\n/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\n\n\n/**\n * AUTO-GENERATED FILE. DO NOT MODIFY.\n */\n\n/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\nimport * as zrUtil from 'zrender/lib/core/util.js';\nexport function retrieveTargetInfo(payload, validPayloadTypes, seriesModel) {\n  if (payload && zrUtil.indexOf(validPayloadTypes, payload.type) >= 0) {\n    var root = seriesModel.getData().tree.root;\n    var targetNode = payload.targetNode;\n\n    if (zrUtil.isString(targetNode)) {\n      targetNode = root.getNodeById(targetNode);\n    }\n\n    if (targetNode && root.contains(targetNode)) {\n      return {\n        node: targetNode\n      };\n    }\n\n    var targetNodeId = payload.targetNodeId;\n\n    if (targetNodeId != null && (targetNode = root.getNodeById(targetNodeId))) {\n      return {\n        node: targetNode\n      };\n    }\n  }\n} // Not includes the given node at the last item.\n\nexport function getPathToRoot(node) {\n  var path = [];\n\n  while (node) {\n    node = node.parentNode;\n    node && path.push(node);\n  }\n\n  return path.reverse();\n}\nexport function aboveViewRoot(viewRoot, node) {\n  var viewPath = getPathToRoot(viewRoot);\n  return zrUtil.indexOf(viewPath, node) >= 0;\n} // From root to the input node (the input node will be included).\n\nexport function wrapTreePathInfo(node, seriesModel) {\n  var treePathInfo = [];\n\n  while (node) {\n    var nodeDataIndex = node.dataIndex;\n    treePathInfo.push({\n      name: node.name,\n      dataIndex: nodeDataIndex,\n      value: seriesModel.getRawValue(nodeDataIndex)\n    });\n    node = node.parentNode;\n  }\n\n  treePathInfo.reverse();\n  return treePathInfo;\n}"],"names":["createGridClipPath","cartesian","hasAnimation","seriesModel","done","during","rect","getArea","x","y","width","height","lineWidth","get","Math","floor","round","clipPath","graphic","shape","baseAxis","getBaseAxis","isHorizontal","isAxisInversed","inverse","duringCb","isFunction","percent","createPolarClipPath","polar","sectorArea","r0","r","cx","cy","startAngle","endAngle","clockwise","dim","createClipPath","coordSys","type","createGraphFromNodeEdge","nodes","edges","directed","beforeLink","graph","Graph","i","length","addNode","zrUtil","id","name","linkNameList","validEdges","linkCount","link","source","target","addEdge","push","convertOptionIdName","nodeData","createSeriesData","coordSysCtor","CoordinateSystem","coordDimensions","dimensions","concat","prepareSeriesDataSchema","encodeDefine","getEncode","SeriesData","initData","edgeData","linkSeriesData","mainData","struct","structAttr","datas","node","edge","datasAttr","update","createRenderPlanner","inner","makeInner","fields","pipelineContext","originalLarge","large","originalProgressive","progressiveRender","progressive","sourceRaw","opt","sourceManager","getSourceManager","isOriginalSource","createSourceFromSeriesDataOption","getSource","sourceFormat","SOURCE_FORMAT_ORIGINAL","coordSysInfo","getCoordSysInfoBySeries","coordSysDimDefs","coordSysName","registeredCoordSys","coordSysDims","dimInfo","axisModel","axisMap","axisType","getDimensionTypeByAxis","getDimensionsInfo","slice","getCoordSysDimDefs","useEncodeDefaulter","encodeDefaulter","makeSeriesEncodeForAxisCoordSys","createDimensionOptions","generateCoord","canOmitUnusedDimensions","schema","firstCategoryDimIndex","dimInfoList","createInvertedIndices","hasNameEncode","dimIndex","coordDim","categoryAxisModel","categoryAxisMap","ordinalMeta","getOrdinalMeta","otherDims","itemName","injectOrdinalMeta","store","getSharedDataStore","stackCalculationInfo","enableDataStack","data","setCalculationInfo","dimValueGetter","sampleItem","arr","firstDataNotNull","getDataItemValue","isNeedCompleteOrdinalData","itemOpt","dimName","dataIndex","this","defaultDimValueGetter","hasItemOption","createSeriesDataSimply","nameList","isArray","extend","list","enableAriaDecalForTree","tree","getData","decalPaletteScope","eachNode","current","depth","parentNode","decal","getDecalFromPalette","ecModel","setVisual","getDefaultLabel","labelDims","mapDimensionsAll","len","rawVal","retrieveRawValue","vals","join","getDefaultInterpolatedLabel","interpolatedValue","getDimensionIndex","KEY_DELIMITER","getAutoCurvenessParams","createCurveness","appendLength","autoCurvenessParmas","curvenessList","__curvenessList","getKeyOfEdges","n1","n2","uid","getOppositeKey","key","keys","split","getEdgeMapLengthWithKey","edgeMap","__edgeMap","initCurvenessList","createEdgeMapForCurveness","index","oppositeEdges","isForward","getCurvenessForEdge","needReverse","autoCurvenessParams","isArrayParam","edgeArray","node1","node2","getEdgeFromMap","edgeIndex","totalLen","getTotalLengthBetweenNodes","lineStyle","curKey","parityCorrection","oppositeKey","resValue","getSectorCornerRadius","model","zeroIfNull","cornerRadius","dr","abs","map","cr","parsePercent","retrieveTargetInfo","payload","validPayloadTypes","root","targetNode","getNodeById","contains","targetNodeId","getPathToRoot","path","reverse","aboveViewRoot","viewRoot","viewPath","wrapTreePathInfo","treePathInfo","nodeDataIndex","value","getRawValue"],"sourceRoot":""}