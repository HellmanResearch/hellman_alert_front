{"version":3,"file":"static/js/180.5714be0b.js","mappings":"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","sources":["../node_modules/echarts/lib/component/axisPointer/modelHelper.js","../node_modules/echarts/lib/component/axisPointer/viewHelper.js"],"sourcesContent":["\n/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\n\n\n/**\n * AUTO-GENERATED FILE. DO NOT MODIFY.\n */\n\n/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\nimport Model from '../../model/Model.js';\nimport { each, curry, clone, defaults, isArray, indexOf } from 'zrender/lib/core/util.js'; // Build axisPointerModel, mergin tooltip.axisPointer model for each axis.\n// allAxesInfo should be updated when setOption performed.\n\nexport function collect(ecModel, api) {\n  var result = {\n    /**\n     * key: makeKey(axis.model)\n     * value: {\n     *      axis,\n     *      coordSys,\n     *      axisPointerModel,\n     *      triggerTooltip,\n     *      involveSeries,\n     *      snap,\n     *      seriesModels,\n     *      seriesDataCount\n     * }\n     */\n    axesInfo: {},\n    seriesInvolved: false,\n\n    /**\n     * key: makeKey(coordSys.model)\n     * value: Object: key makeKey(axis.model), value: axisInfo\n     */\n    coordSysAxesInfo: {},\n    coordSysMap: {}\n  };\n  collectAxesInfo(result, ecModel, api); // Check seriesInvolved for performance, in case too many series in some chart.\n\n  result.seriesInvolved && collectSeriesInfo(result, ecModel);\n  return result;\n}\n\nfunction collectAxesInfo(result, ecModel, api) {\n  var globalTooltipModel = ecModel.getComponent('tooltip');\n  var globalAxisPointerModel = ecModel.getComponent('axisPointer'); // links can only be set on global.\n\n  var linksOption = globalAxisPointerModel.get('link', true) || [];\n  var linkGroups = []; // Collect axes info.\n\n  each(api.getCoordinateSystems(), function (coordSys) {\n    // Some coordinate system do not support axes, like geo.\n    if (!coordSys.axisPointerEnabled) {\n      return;\n    }\n\n    var coordSysKey = makeKey(coordSys.model);\n    var axesInfoInCoordSys = result.coordSysAxesInfo[coordSysKey] = {};\n    result.coordSysMap[coordSysKey] = coordSys; // Set tooltip (like 'cross') is a convienent way to show axisPointer\n    // for user. So we enable seting tooltip on coordSys model.\n\n    var coordSysModel = coordSys.model;\n    var baseTooltipModel = coordSysModel.getModel('tooltip', globalTooltipModel);\n    each(coordSys.getAxes(), curry(saveTooltipAxisInfo, false, null)); // If axis tooltip used, choose tooltip axis for each coordSys.\n    // Notice this case: coordSys is `grid` but not `cartesian2D` here.\n\n    if (coordSys.getTooltipAxes && globalTooltipModel // If tooltip.showContent is set as false, tooltip will not\n    // show but axisPointer will show as normal.\n    && baseTooltipModel.get('show')) {\n      // Compatible with previous logic. But series.tooltip.trigger: 'axis'\n      // or series.data[n].tooltip.trigger: 'axis' are not support any more.\n      var triggerAxis = baseTooltipModel.get('trigger') === 'axis';\n      var cross = baseTooltipModel.get(['axisPointer', 'type']) === 'cross';\n      var tooltipAxes = coordSys.getTooltipAxes(baseTooltipModel.get(['axisPointer', 'axis']));\n\n      if (triggerAxis || cross) {\n        each(tooltipAxes.baseAxes, curry(saveTooltipAxisInfo, cross ? 'cross' : true, triggerAxis));\n      }\n\n      if (cross) {\n        each(tooltipAxes.otherAxes, curry(saveTooltipAxisInfo, 'cross', false));\n      }\n    } // fromTooltip: true | false | 'cross'\n    // triggerTooltip: true | false | null\n\n\n    function saveTooltipAxisInfo(fromTooltip, triggerTooltip, axis) {\n      var axisPointerModel = axis.model.getModel('axisPointer', globalAxisPointerModel);\n      var axisPointerShow = axisPointerModel.get('show');\n\n      if (!axisPointerShow || axisPointerShow === 'auto' && !fromTooltip && !isHandleTrigger(axisPointerModel)) {\n        return;\n      }\n\n      if (triggerTooltip == null) {\n        triggerTooltip = axisPointerModel.get('triggerTooltip');\n      }\n\n      axisPointerModel = fromTooltip ? makeAxisPointerModel(axis, baseTooltipModel, globalAxisPointerModel, ecModel, fromTooltip, triggerTooltip) : axisPointerModel;\n      var snap = axisPointerModel.get('snap');\n      var axisKey = makeKey(axis.model);\n      var involveSeries = triggerTooltip || snap || axis.type === 'category'; // If result.axesInfo[key] exist, override it (tooltip has higher priority).\n\n      var axisInfo = result.axesInfo[axisKey] = {\n        key: axisKey,\n        axis: axis,\n        coordSys: coordSys,\n        axisPointerModel: axisPointerModel,\n        triggerTooltip: triggerTooltip,\n        involveSeries: involveSeries,\n        snap: snap,\n        useHandle: isHandleTrigger(axisPointerModel),\n        seriesModels: [],\n        linkGroup: null\n      };\n      axesInfoInCoordSys[axisKey] = axisInfo;\n      result.seriesInvolved = result.seriesInvolved || involveSeries;\n      var groupIndex = getLinkGroupIndex(linksOption, axis);\n\n      if (groupIndex != null) {\n        var linkGroup = linkGroups[groupIndex] || (linkGroups[groupIndex] = {\n          axesInfo: {}\n        });\n        linkGroup.axesInfo[axisKey] = axisInfo;\n        linkGroup.mapper = linksOption[groupIndex].mapper;\n        axisInfo.linkGroup = linkGroup;\n      }\n    }\n  });\n}\n\nfunction makeAxisPointerModel(axis, baseTooltipModel, globalAxisPointerModel, ecModel, fromTooltip, triggerTooltip) {\n  var tooltipAxisPointerModel = baseTooltipModel.getModel('axisPointer');\n  var fields = ['type', 'snap', 'lineStyle', 'shadowStyle', 'label', 'animation', 'animationDurationUpdate', 'animationEasingUpdate', 'z'];\n  var volatileOption = {};\n  each(fields, function (field) {\n    volatileOption[field] = clone(tooltipAxisPointerModel.get(field));\n  }); // category axis do not auto snap, otherwise some tick that do not\n  // has value can not be hovered. value/time/log axis default snap if\n  // triggered from tooltip and trigger tooltip.\n\n  volatileOption.snap = axis.type !== 'category' && !!triggerTooltip; // Compatibel with previous behavior, tooltip axis do not show label by default.\n  // Only these properties can be overrided from tooltip to axisPointer.\n\n  if (tooltipAxisPointerModel.get('type') === 'cross') {\n    volatileOption.type = 'line';\n  }\n\n  var labelOption = volatileOption.label || (volatileOption.label = {}); // Follow the convention, do not show label when triggered by tooltip by default.\n\n  labelOption.show == null && (labelOption.show = false);\n\n  if (fromTooltip === 'cross') {\n    // When 'cross', both axes show labels.\n    var tooltipAxisPointerLabelShow = tooltipAxisPointerModel.get(['label', 'show']);\n    labelOption.show = tooltipAxisPointerLabelShow != null ? tooltipAxisPointerLabelShow : true; // If triggerTooltip, this is a base axis, which should better not use cross style\n    // (cross style is dashed by default)\n\n    if (!triggerTooltip) {\n      var crossStyle = volatileOption.lineStyle = tooltipAxisPointerModel.get('crossStyle');\n      crossStyle && defaults(labelOption, crossStyle.textStyle);\n    }\n  }\n\n  return axis.model.getModel('axisPointer', new Model(volatileOption, globalAxisPointerModel, ecModel));\n}\n\nfunction collectSeriesInfo(result, ecModel) {\n  // Prepare data for axis trigger\n  ecModel.eachSeries(function (seriesModel) {\n    // Notice this case: this coordSys is `cartesian2D` but not `grid`.\n    var coordSys = seriesModel.coordinateSystem;\n    var seriesTooltipTrigger = seriesModel.get(['tooltip', 'trigger'], true);\n    var seriesTooltipShow = seriesModel.get(['tooltip', 'show'], true);\n\n    if (!coordSys || seriesTooltipTrigger === 'none' || seriesTooltipTrigger === false || seriesTooltipTrigger === 'item' || seriesTooltipShow === false || seriesModel.get(['axisPointer', 'show'], true) === false) {\n      return;\n    }\n\n    each(result.coordSysAxesInfo[makeKey(coordSys.model)], function (axisInfo) {\n      var axis = axisInfo.axis;\n\n      if (coordSys.getAxis(axis.dim) === axis) {\n        axisInfo.seriesModels.push(seriesModel);\n        axisInfo.seriesDataCount == null && (axisInfo.seriesDataCount = 0);\n        axisInfo.seriesDataCount += seriesModel.getData().count();\n      }\n    });\n  });\n}\n/**\n * For example:\n * {\n *     axisPointer: {\n *         links: [{\n *             xAxisIndex: [2, 4],\n *             yAxisIndex: 'all'\n *         }, {\n *             xAxisId: ['a5', 'a7'],\n *             xAxisName: 'xxx'\n *         }]\n *     }\n * }\n */\n\n\nfunction getLinkGroupIndex(linksOption, axis) {\n  var axisModel = axis.model;\n  var dim = axis.dim;\n\n  for (var i = 0; i < linksOption.length; i++) {\n    var linkOption = linksOption[i] || {};\n\n    if (checkPropInLink(linkOption[dim + 'AxisId'], axisModel.id) || checkPropInLink(linkOption[dim + 'AxisIndex'], axisModel.componentIndex) || checkPropInLink(linkOption[dim + 'AxisName'], axisModel.name)) {\n      return i;\n    }\n  }\n}\n\nfunction checkPropInLink(linkPropValue, axisPropValue) {\n  return linkPropValue === 'all' || isArray(linkPropValue) && indexOf(linkPropValue, axisPropValue) >= 0 || linkPropValue === axisPropValue;\n}\n\nexport function fixValue(axisModel) {\n  var axisInfo = getAxisInfo(axisModel);\n\n  if (!axisInfo) {\n    return;\n  }\n\n  var axisPointerModel = axisInfo.axisPointerModel;\n  var scale = axisInfo.axis.scale;\n  var option = axisPointerModel.option;\n  var status = axisPointerModel.get('status');\n  var value = axisPointerModel.get('value'); // Parse init value for category and time axis.\n\n  if (value != null) {\n    value = scale.parse(value);\n  }\n\n  var useHandle = isHandleTrigger(axisPointerModel); // If `handle` used, `axisPointer` will always be displayed, so value\n  // and status should be initialized.\n\n  if (status == null) {\n    option.status = useHandle ? 'show' : 'hide';\n  }\n\n  var extent = scale.getExtent().slice();\n  extent[0] > extent[1] && extent.reverse();\n\n  if ( // Pick a value on axis when initializing.\n  value == null // If both `handle` and `dataZoom` are used, value may be out of axis extent,\n  // where we should re-pick a value to keep `handle` displaying normally.\n  || value > extent[1]) {\n    // Make handle displayed on the end of the axis when init, which looks better.\n    value = extent[1];\n  }\n\n  if (value < extent[0]) {\n    value = extent[0];\n  }\n\n  option.value = value;\n\n  if (useHandle) {\n    option.status = axisInfo.axis.scale.isBlank() ? 'hide' : 'show';\n  }\n}\nexport function getAxisInfo(axisModel) {\n  var coordSysAxesInfo = (axisModel.ecModel.getComponent('axisPointer') || {}).coordSysAxesInfo;\n  return coordSysAxesInfo && coordSysAxesInfo.axesInfo[makeKey(axisModel)];\n}\nexport function getAxisPointerModel(axisModel) {\n  var axisInfo = getAxisInfo(axisModel);\n  return axisInfo && axisInfo.axisPointerModel;\n}\n\nfunction isHandleTrigger(axisPointerModel) {\n  return !!axisPointerModel.get(['handle', 'show']);\n}\n/**\n * @param {module:echarts/model/Model} model\n * @return {string} unique key\n */\n\n\nexport function makeKey(model) {\n  return model.type + '||' + model.id;\n}","\n/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\n\n\n/**\n * AUTO-GENERATED FILE. DO NOT MODIFY.\n */\n\n/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\nimport * as zrUtil from 'zrender/lib/core/util.js';\nimport * as graphic from '../../util/graphic.js';\nimport * as textContain from 'zrender/lib/contain/text.js';\nimport * as formatUtil from '../../util/format.js';\nimport * as matrix from 'zrender/lib/core/matrix.js';\nimport * as axisHelper from '../../coord/axisHelper.js';\nimport AxisBuilder from '../axis/AxisBuilder.js';\nimport { createTextStyle } from '../../label/labelStyle.js';\nexport function buildElStyle(axisPointerModel) {\n  var axisPointerType = axisPointerModel.get('type');\n  var styleModel = axisPointerModel.getModel(axisPointerType + 'Style');\n  var style;\n\n  if (axisPointerType === 'line') {\n    style = styleModel.getLineStyle();\n    style.fill = null;\n  } else if (axisPointerType === 'shadow') {\n    style = styleModel.getAreaStyle();\n    style.stroke = null;\n  }\n\n  return style;\n}\n/**\n * @param {Function} labelPos {align, verticalAlign, position}\n */\n\nexport function buildLabelElOption(elOption, axisModel, axisPointerModel, api, labelPos) {\n  var value = axisPointerModel.get('value');\n  var text = getValueLabel(value, axisModel.axis, axisModel.ecModel, axisPointerModel.get('seriesDataIndices'), {\n    precision: axisPointerModel.get(['label', 'precision']),\n    formatter: axisPointerModel.get(['label', 'formatter'])\n  });\n  var labelModel = axisPointerModel.getModel('label');\n  var paddings = formatUtil.normalizeCssArray(labelModel.get('padding') || 0);\n  var font = labelModel.getFont();\n  var textRect = textContain.getBoundingRect(text, font);\n  var position = labelPos.position;\n  var width = textRect.width + paddings[1] + paddings[3];\n  var height = textRect.height + paddings[0] + paddings[2]; // Adjust by align.\n\n  var align = labelPos.align;\n  align === 'right' && (position[0] -= width);\n  align === 'center' && (position[0] -= width / 2);\n  var verticalAlign = labelPos.verticalAlign;\n  verticalAlign === 'bottom' && (position[1] -= height);\n  verticalAlign === 'middle' && (position[1] -= height / 2); // Not overflow ec container\n\n  confineInContainer(position, width, height, api);\n  var bgColor = labelModel.get('backgroundColor');\n\n  if (!bgColor || bgColor === 'auto') {\n    bgColor = axisModel.get(['axisLine', 'lineStyle', 'color']);\n  }\n\n  elOption.label = {\n    // shape: {x: 0, y: 0, width: width, height: height, r: labelModel.get('borderRadius')},\n    x: position[0],\n    y: position[1],\n    style: createTextStyle(labelModel, {\n      text: text,\n      font: font,\n      fill: labelModel.getTextColor(),\n      padding: paddings,\n      backgroundColor: bgColor\n    }),\n    // Lable should be over axisPointer.\n    z2: 10\n  };\n} // Do not overflow ec container\n\nfunction confineInContainer(position, width, height, api) {\n  var viewWidth = api.getWidth();\n  var viewHeight = api.getHeight();\n  position[0] = Math.min(position[0] + width, viewWidth) - width;\n  position[1] = Math.min(position[1] + height, viewHeight) - height;\n  position[0] = Math.max(position[0], 0);\n  position[1] = Math.max(position[1], 0);\n}\n\nexport function getValueLabel(value, axis, ecModel, seriesDataIndices, opt) {\n  value = axis.scale.parse(value);\n  var text = axis.scale.getLabel({\n    value: value\n  }, {\n    // If `precision` is set, width can be fixed (like '12.00500'), which\n    // helps to debounce when when moving label.\n    precision: opt.precision\n  });\n  var formatter = opt.formatter;\n\n  if (formatter) {\n    var params_1 = {\n      value: axisHelper.getAxisRawValue(axis, {\n        value: value\n      }),\n      axisDimension: axis.dim,\n      axisIndex: axis.index,\n      seriesData: []\n    };\n    zrUtil.each(seriesDataIndices, function (idxItem) {\n      var series = ecModel.getSeriesByIndex(idxItem.seriesIndex);\n      var dataIndex = idxItem.dataIndexInside;\n      var dataParams = series && series.getDataParams(dataIndex);\n      dataParams && params_1.seriesData.push(dataParams);\n    });\n\n    if (zrUtil.isString(formatter)) {\n      text = formatter.replace('{value}', text);\n    } else if (zrUtil.isFunction(formatter)) {\n      text = formatter(params_1);\n    }\n  }\n\n  return text;\n}\nexport function getTransformedPosition(axis, value, layoutInfo) {\n  var transform = matrix.create();\n  matrix.rotate(transform, transform, layoutInfo.rotation);\n  matrix.translate(transform, transform, layoutInfo.position);\n  return graphic.applyTransform([axis.dataToCoord(value), (layoutInfo.labelOffset || 0) + (layoutInfo.labelDirection || 1) * (layoutInfo.labelMargin || 0)], transform);\n}\nexport function buildCartesianSingleLabelElOption(value, elOption, layoutInfo, axisModel, axisPointerModel, api) {\n  // @ts-ignore\n  var textLayout = AxisBuilder.innerTextLayout(layoutInfo.rotation, 0, layoutInfo.labelDirection);\n  layoutInfo.labelMargin = axisPointerModel.get(['label', 'margin']);\n  buildLabelElOption(elOption, axisModel, axisPointerModel, api, {\n    position: getTransformedPosition(axisModel.axis, value, layoutInfo),\n    align: textLayout.textAlign,\n    verticalAlign: textLayout.textVerticalAlign\n  });\n}\nexport function makeLineShape(p1, p2, xDimIndex) {\n  xDimIndex = xDimIndex || 0;\n  return {\n    x1: p1[xDimIndex],\n    y1: p1[1 - xDimIndex],\n    x2: p2[xDimIndex],\n    y2: p2[1 - xDimIndex]\n  };\n}\nexport function makeRectShape(xy, wh, xDimIndex) {\n  xDimIndex = xDimIndex || 0;\n  return {\n    x: xy[xDimIndex],\n    y: xy[1 - xDimIndex],\n    width: wh[xDimIndex],\n    height: wh[1 - xDimIndex]\n  };\n}\nexport function makeSectorShape(cx, cy, r0, r, startAngle, endAngle) {\n  return {\n    cx: cx,\n    cy: cy,\n    r0: r0,\n    r: r,\n    startAngle: startAngle,\n    endAngle: endAngle,\n    clockwise: true\n  };\n}"],"names":["collect","ecModel","api","result","axesInfo","seriesInvolved","coordSysAxesInfo","coordSysMap","globalTooltipModel","getComponent","globalAxisPointerModel","linksOption","get","linkGroups","each","getCoordinateSystems","coordSys","axisPointerEnabled","coordSysKey","makeKey","model","axesInfoInCoordSys","baseTooltipModel","getModel","getAxes","curry","saveTooltipAxisInfo","getTooltipAxes","triggerAxis","cross","tooltipAxes","baseAxes","otherAxes","fromTooltip","triggerTooltip","axis","axisPointerModel","axisPointerShow","isHandleTrigger","tooltipAxisPointerModel","fields","volatileOption","field","clone","snap","type","labelOption","label","show","tooltipAxisPointerLabelShow","crossStyle","lineStyle","defaults","textStyle","Model","makeAxisPointerModel","axisKey","involveSeries","axisInfo","key","useHandle","seriesModels","linkGroup","groupIndex","axisModel","dim","i","length","linkOption","checkPropInLink","id","componentIndex","name","getLinkGroupIndex","mapper","collectAxesInfo","eachSeries","seriesModel","coordinateSystem","seriesTooltipTrigger","seriesTooltipShow","getAxis","push","seriesDataCount","getData","count","collectSeriesInfo","linkPropValue","axisPropValue","isArray","indexOf","fixValue","getAxisInfo","scale","option","status","value","parse","extent","getExtent","slice","reverse","isBlank","getAxisPointerModel","buildElStyle","style","axisPointerType","styleModel","getLineStyle","fill","getAreaStyle","stroke","buildLabelElOption","elOption","labelPos","text","getValueLabel","precision","formatter","labelModel","paddings","formatUtil","font","getFont","textRect","textContain","position","width","height","align","verticalAlign","viewWidth","getWidth","viewHeight","getHeight","Math","min","max","confineInContainer","bgColor","x","y","createTextStyle","getTextColor","padding","backgroundColor","z2","seriesDataIndices","opt","getLabel","params_1","axisHelper","axisDimension","axisIndex","index","seriesData","zrUtil","idxItem","series","getSeriesByIndex","seriesIndex","dataIndex","dataIndexInside","dataParams","getDataParams","replace","getTransformedPosition","layoutInfo","transform","matrix","rotation","graphic","dataToCoord","labelOffset","labelDirection","labelMargin","buildCartesianSingleLabelElOption","textLayout","AxisBuilder","textAlign","textVerticalAlign","makeLineShape","p1","p2","xDimIndex","x1","y1","x2","y2","makeRectShape","xy","wh","makeSectorShape","cx","cy","r0","r","startAngle","endAngle","clockwise"],"sourceRoot":""}