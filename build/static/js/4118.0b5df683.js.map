{"version":3,"file":"static/js/4118.0b5df683.js","mappings":"kLA8CWA,EAAkB,CAC3BC,KAAM,iBAENC,UAAW,SAAUC,GA2CnB,IAtCA,IACIC,EADAC,EAAWF,EAAOE,SAElBC,GAAYC,EAAAA,EAAAA,GAA2BJ,EAAOK,OAAQ,CACxDC,oBAAoBC,EAAAA,EAAAA,IAAc,CAChCC,WAAW,IAEbC,gBAAiB,SAAUC,GACzB,IACIC,EAAWD,EAAWF,WAErBI,EAAAA,EAAAA,IAAOF,EAAY,eAKtBG,EAAAA,EAAAA,IARW,IAWb,IAAIC,EAAUZ,EAASa,iBAAiBJ,GAUxC,OARKG,IAKHD,EAAAA,EAAAA,IAlBW,IAqBN,CACLG,OAAQF,EAAQG,MAEpB,EACAC,SAAU,SAAUC,GAClB,OAAOjB,EAASkB,sBAAsBnB,EAASkB,EAAMH,OACvD,IAEEK,EAAa,GAERC,EAAI,EAAGC,EAAMrB,EAASsB,QAASF,EAAIC,EAAKD,IAC/CrB,EAAUC,EAASuB,eAAeH,GAE9BnB,EAAUuB,YACZL,EAAWM,KAAK1B,GAIpB,MAAO,CACL2B,KAAMP,EAEV,G,gCCjDSQ,EAAgB,CACzB/B,KAAM,eACNC,UAAW,SAAUC,GACnB,IAAIE,EAAWF,EAAOE,SAClBG,EAASL,EAAOK,OAChByB,EAAS,GAKTC,GAAgBC,EAAAA,EAAAA,IAAiB3B,GAEhC0B,EAAcE,SAKjBpB,EAAAA,EAAAA,IAAWiB,GAGb,IAAII,EAAe,IACnBC,EAAAA,EAAAA,IAAKJ,GAAe,SAAUK,GAC5B,IAAIzB,EAAWyB,EAAU5B,UACrB6B,EAAQD,EAAUC,MAClBC,EAAaF,EAAUG,OACvBC,EAAeJ,EAAUI,aAEb,MAAZ7B,IAKFE,EAAAA,EAAAA,IAAWiB,GAGC,QAAVO,GAA6B,SAAVA,IAKrBxB,EAAAA,EAAAA,IAAWiB,GAGTU,GAAiC,QAAjBA,GAA2C,QAAjBA,IAO5C3B,EAAAA,EAAAA,IANe,IASH,QAAVwB,GAA6B,SAAVA,IAOrBxB,EAAAA,EAAAA,IANe,IASjB,IAAIC,EAAUZ,EAASa,iBAAiBJ,GAEnCG,IAKHD,EAAAA,EAAAA,IAAWiB,GAGb,IAAIS,EAASD,GAAaG,EAAAA,EAAAA,IAAkBH,GAAc,KAEtDA,IAAeC,IAKjB1B,EAAAA,EAAAA,IAAWiB,GAGbI,EAAaP,KAAK,CAChBX,OAAQF,EAAQG,MAChBsB,OAAQA,EACRG,WAAY,IAAIC,EAAAA,GAAoBN,EAAOG,IAE/C,IAEA,IAAII,EAAe1C,EAAS0C,aAExBA,IAAiBC,EAAAA,IAA4BD,IAAiBE,EAAAA,KAKhEjC,EAAAA,EAAAA,IAAWiB,GAMb,IAFA,IAAIT,EAAa,GAERC,EAAI,EAAGC,EAAMrB,EAASsB,QAASF,EAAIC,EAAKD,IAC/CD,EAAWM,KAAKzB,EAASuB,eAAeH,IAuB1C,OApBAD,EAAW0B,MAAK,SAAUC,EAAOC,GAC/B,IAAK,IAAI3B,EAAI,EAAGA,EAAIY,EAAaD,OAAQX,IAAK,CAC5C,IAAI4B,EAAWhB,EAAaZ,GACxB6B,EAAOjD,EAASkB,sBAAsB4B,EAAOE,EAASlC,QACtDoC,EAAOlD,EAASkB,sBAAsB6B,EAAOC,EAASlC,QAEtDkC,EAASX,SACXY,EAAOD,EAASX,OAAOY,GACvBC,EAAOF,EAASX,OAAOa,IAGzB,IAAIC,EAASH,EAASR,WAAWhB,SAASyB,EAAMC,GAEhD,GAAe,IAAXC,EACF,OAAOA,CAEX,CAEA,OAAO,CACT,IACO,CACLzB,KAAMP,EAEV,GC3IK,SAASiC,EAAQC,GACtBA,EAAUC,kBAAkB3D,GAC5B0D,EAAUC,kBAAkB3B,EAC9B,C","sources":["../node_modules/echarts/lib/component/transform/filterTransform.js","../node_modules/echarts/lib/component/transform/sortTransform.js","../node_modules/echarts/lib/component/transform/install.js"],"sourcesContent":["\n/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\n\n\n/**\n * AUTO-GENERATED FILE. DO NOT MODIFY.\n */\n\n/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\nimport { parseConditionalExpression } from '../../util/conditionalExpression.js';\nimport { hasOwn, createHashMap } from 'zrender/lib/core/util.js';\nimport { makePrintable, throwError } from '../../util/log.js';\nexport var filterTransform = {\n  type: 'echarts:filter',\n  // PEDING: enhance to filter by index rather than create new data\n  transform: function (params) {\n    // [Caveat] Fail-Fast:\n    // Do not return the whole dataset unless user config indicate it explicitly.\n    // For example, if no condition specified by mistake, return an empty result\n    // is better than return the entire raw soruce for user to find the mistake.\n    var upstream = params.upstream;\n    var rawItem;\n    var condition = parseConditionalExpression(params.config, {\n      valueGetterAttrMap: createHashMap({\n        dimension: true\n      }),\n      prepareGetValue: function (exprOption) {\n        var errMsg = '';\n        var dimLoose = exprOption.dimension;\n\n        if (!hasOwn(exprOption, 'dimension')) {\n          if (process.env.NODE_ENV !== 'production') {\n            errMsg = makePrintable('Relation condition must has prop \"dimension\" specified.', 'Illegal condition:', exprOption);\n          }\n\n          throwError(errMsg);\n        }\n\n        var dimInfo = upstream.getDimensionInfo(dimLoose);\n\n        if (!dimInfo) {\n          if (process.env.NODE_ENV !== 'production') {\n            errMsg = makePrintable('Can not find dimension info via: ' + dimLoose + '.\\n', 'Existing dimensions: ', upstream.cloneAllDimensionInfo(), '.\\n', 'Illegal condition:', exprOption, '.\\n');\n          }\n\n          throwError(errMsg);\n        }\n\n        return {\n          dimIdx: dimInfo.index\n        };\n      },\n      getValue: function (param) {\n        return upstream.retrieveValueFromItem(rawItem, param.dimIdx);\n      }\n    });\n    var resultData = [];\n\n    for (var i = 0, len = upstream.count(); i < len; i++) {\n      rawItem = upstream.getRawDataItem(i);\n\n      if (condition.evaluate()) {\n        resultData.push(rawItem);\n      }\n    }\n\n    return {\n      data: resultData\n    };\n  }\n};","\n/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\n\n\n/**\n * AUTO-GENERATED FILE. DO NOT MODIFY.\n */\n\n/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\nimport { SOURCE_FORMAT_ARRAY_ROWS, SOURCE_FORMAT_OBJECT_ROWS } from '../../util/types.js';\nimport { makePrintable, throwError } from '../../util/log.js';\nimport { each } from 'zrender/lib/core/util.js';\nimport { normalizeToArray } from '../../util/model.js';\nimport { getRawValueParser, SortOrderComparator } from '../../data/helper/dataValueHelper.js';\nvar sampleLog = '';\n\nif (process.env.NODE_ENV !== 'production') {\n  sampleLog = ['Valid config is like:', '{ dimension: \"age\", order: \"asc\" }', 'or [{ dimension: \"age\", order: \"asc\"], { dimension: \"date\", order: \"desc\" }]'].join(' ');\n}\n\nexport var sortTransform = {\n  type: 'echarts:sort',\n  transform: function (params) {\n    var upstream = params.upstream;\n    var config = params.config;\n    var errMsg = ''; // Normalize\n    // const orderExprList: OrderExpression[] = isArray(config[0])\n    //     ? config as OrderExpression[]\n    //     : [config as OrderExpression];\n\n    var orderExprList = normalizeToArray(config);\n\n    if (!orderExprList.length) {\n      if (process.env.NODE_ENV !== 'production') {\n        errMsg = 'Empty `config` in sort transform.';\n      }\n\n      throwError(errMsg);\n    }\n\n    var orderDefList = [];\n    each(orderExprList, function (orderExpr) {\n      var dimLoose = orderExpr.dimension;\n      var order = orderExpr.order;\n      var parserName = orderExpr.parser;\n      var incomparable = orderExpr.incomparable;\n\n      if (dimLoose == null) {\n        if (process.env.NODE_ENV !== 'production') {\n          errMsg = 'Sort transform config must has \"dimension\" specified.' + sampleLog;\n        }\n\n        throwError(errMsg);\n      }\n\n      if (order !== 'asc' && order !== 'desc') {\n        if (process.env.NODE_ENV !== 'production') {\n          errMsg = 'Sort transform config must has \"order\" specified.' + sampleLog;\n        }\n\n        throwError(errMsg);\n      }\n\n      if (incomparable && incomparable !== 'min' && incomparable !== 'max') {\n        var errMsg_1 = '';\n\n        if (process.env.NODE_ENV !== 'production') {\n          errMsg_1 = 'incomparable must be \"min\" or \"max\" rather than \"' + incomparable + '\".';\n        }\n\n        throwError(errMsg_1);\n      }\n\n      if (order !== 'asc' && order !== 'desc') {\n        var errMsg_2 = '';\n\n        if (process.env.NODE_ENV !== 'production') {\n          errMsg_2 = 'order must be \"asc\" or \"desc\" rather than \"' + order + '\".';\n        }\n\n        throwError(errMsg_2);\n      }\n\n      var dimInfo = upstream.getDimensionInfo(dimLoose);\n\n      if (!dimInfo) {\n        if (process.env.NODE_ENV !== 'production') {\n          errMsg = makePrintable('Can not find dimension info via: ' + dimLoose + '.\\n', 'Existing dimensions: ', upstream.cloneAllDimensionInfo(), '.\\n', 'Illegal config:', orderExpr, '.\\n');\n        }\n\n        throwError(errMsg);\n      }\n\n      var parser = parserName ? getRawValueParser(parserName) : null;\n\n      if (parserName && !parser) {\n        if (process.env.NODE_ENV !== 'production') {\n          errMsg = makePrintable('Invalid parser name ' + parserName + '.\\n', 'Illegal config:', orderExpr, '.\\n');\n        }\n\n        throwError(errMsg);\n      }\n\n      orderDefList.push({\n        dimIdx: dimInfo.index,\n        parser: parser,\n        comparator: new SortOrderComparator(order, incomparable)\n      });\n    }); // TODO: support it?\n\n    var sourceFormat = upstream.sourceFormat;\n\n    if (sourceFormat !== SOURCE_FORMAT_ARRAY_ROWS && sourceFormat !== SOURCE_FORMAT_OBJECT_ROWS) {\n      if (process.env.NODE_ENV !== 'production') {\n        errMsg = 'sourceFormat \"' + sourceFormat + '\" is not supported yet';\n      }\n\n      throwError(errMsg);\n    } // Other upstream format are all array.\n\n\n    var resultData = [];\n\n    for (var i = 0, len = upstream.count(); i < len; i++) {\n      resultData.push(upstream.getRawDataItem(i));\n    }\n\n    resultData.sort(function (item0, item1) {\n      for (var i = 0; i < orderDefList.length; i++) {\n        var orderDef = orderDefList[i];\n        var val0 = upstream.retrieveValueFromItem(item0, orderDef.dimIdx);\n        var val1 = upstream.retrieveValueFromItem(item1, orderDef.dimIdx);\n\n        if (orderDef.parser) {\n          val0 = orderDef.parser(val0);\n          val1 = orderDef.parser(val1);\n        }\n\n        var result = orderDef.comparator.evaluate(val0, val1);\n\n        if (result !== 0) {\n          return result;\n        }\n      }\n\n      return 0;\n    });\n    return {\n      data: resultData\n    };\n  }\n};","\n/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\n\n\n/**\n * AUTO-GENERATED FILE. DO NOT MODIFY.\n */\n\n/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\nimport { filterTransform } from './filterTransform.js';\nimport { sortTransform } from './sortTransform.js';\nexport function install(registers) {\n  registers.registerTransform(filterTransform);\n  registers.registerTransform(sortTransform);\n}"],"names":["filterTransform","type","transform","params","rawItem","upstream","condition","parseConditionalExpression","config","valueGetterAttrMap","createHashMap","dimension","prepareGetValue","exprOption","dimLoose","hasOwn","throwError","dimInfo","getDimensionInfo","dimIdx","index","getValue","param","retrieveValueFromItem","resultData","i","len","count","getRawDataItem","evaluate","push","data","sortTransform","errMsg","orderExprList","normalizeToArray","length","orderDefList","each","orderExpr","order","parserName","parser","incomparable","getRawValueParser","comparator","SortOrderComparator","sourceFormat","SOURCE_FORMAT_ARRAY_ROWS","SOURCE_FORMAT_OBJECT_ROWS","sort","item0","item1","orderDef","val0","val1","result","install","registers","registerTransform"],"sourceRoot":""}