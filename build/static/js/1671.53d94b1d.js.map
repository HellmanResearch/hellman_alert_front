{"version":3,"file":"static/js/1671.53d94b1d.js","mappings":"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","sources":["../node_modules/echarts/lib/util/number.js"],"sourcesContent":["\n/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\n\n\n/**\n * AUTO-GENERATED FILE. DO NOT MODIFY.\n */\n\n/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\n\n/*\n* A third-party license is embeded for some of the code in this file:\n* The method \"quantile\" was copied from \"d3.js\".\n* (See more details in the comment of the method below.)\n* The use of the source code of this file is also subject to the terms\n* and consitions of the license of \"d3.js\" (BSD-3Clause, see\n* </licenses/LICENSE-d3>).\n*/\nimport * as zrUtil from 'zrender/lib/core/util.js';\nvar RADIAN_EPSILON = 1e-4; // Although chrome already enlarge this number to 100 for `toFixed`, but\n// we sill follow the spec for compatibility.\n\nvar ROUND_SUPPORTED_PRECISION_MAX = 20;\n\nfunction _trim(str) {\n  return str.replace(/^\\s+|\\s+$/g, '');\n}\n/**\n * Linear mapping a value from domain to range\n * @param  val\n * @param  domain Domain extent domain[0] can be bigger than domain[1]\n * @param  range  Range extent range[0] can be bigger than range[1]\n * @param  clamp Default to be false\n */\n\n\nexport function linearMap(val, domain, range, clamp) {\n  var d0 = domain[0];\n  var d1 = domain[1];\n  var r0 = range[0];\n  var r1 = range[1];\n  var subDomain = d1 - d0;\n  var subRange = r1 - r0;\n\n  if (subDomain === 0) {\n    return subRange === 0 ? r0 : (r0 + r1) / 2;\n  } // Avoid accuracy problem in edge, such as\n  // 146.39 - 62.83 === 83.55999999999999.\n  // See echarts/test/ut/spec/util/number.js#linearMap#accuracyError\n  // It is a little verbose for efficiency considering this method\n  // is a hotspot.\n\n\n  if (clamp) {\n    if (subDomain > 0) {\n      if (val <= d0) {\n        return r0;\n      } else if (val >= d1) {\n        return r1;\n      }\n    } else {\n      if (val >= d0) {\n        return r0;\n      } else if (val <= d1) {\n        return r1;\n      }\n    }\n  } else {\n    if (val === d0) {\n      return r0;\n    }\n\n    if (val === d1) {\n      return r1;\n    }\n  }\n\n  return (val - d0) / subDomain * subRange + r0;\n}\n/**\n * Convert a percent string to absolute number.\n * Returns NaN if percent is not a valid string or number\n */\n\nexport function parsePercent(percent, all) {\n  switch (percent) {\n    case 'center':\n    case 'middle':\n      percent = '50%';\n      break;\n\n    case 'left':\n    case 'top':\n      percent = '0%';\n      break;\n\n    case 'right':\n    case 'bottom':\n      percent = '100%';\n      break;\n  }\n\n  if (zrUtil.isString(percent)) {\n    if (_trim(percent).match(/%$/)) {\n      return parseFloat(percent) / 100 * all;\n    }\n\n    return parseFloat(percent);\n  }\n\n  return percent == null ? NaN : +percent;\n}\nexport function round(x, precision, returnStr) {\n  if (precision == null) {\n    precision = 10;\n  } // Avoid range error\n\n\n  precision = Math.min(Math.max(0, precision), ROUND_SUPPORTED_PRECISION_MAX); // PENDING: 1.005.toFixed(2) is '1.00' rather than '1.01'\n\n  x = (+x).toFixed(precision);\n  return returnStr ? x : +x;\n}\n/**\n * Inplacd asc sort arr.\n * The input arr will be modified.\n */\n\nexport function asc(arr) {\n  arr.sort(function (a, b) {\n    return a - b;\n  });\n  return arr;\n}\n/**\n * Get precision.\n */\n\nexport function getPrecision(val) {\n  val = +val;\n\n  if (isNaN(val)) {\n    return 0;\n  } // It is much faster than methods converting number to string as follows\n  //      let tmp = val.toString();\n  //      return tmp.length - 1 - tmp.indexOf('.');\n  // especially when precision is low\n  // Notice:\n  // (1) If the loop count is over about 20, it is slower than `getPrecisionSafe`.\n  //     (see https://jsbench.me/2vkpcekkvw/1)\n  // (2) If the val is less than for example 1e-15, the result may be incorrect.\n  //     (see test/ut/spec/util/number.test.ts `getPrecision_equal_random`)\n\n\n  if (val > 1e-14) {\n    var e = 1;\n\n    for (var i = 0; i < 15; i++, e *= 10) {\n      if (Math.round(val * e) / e === val) {\n        return i;\n      }\n    }\n  }\n\n  return getPrecisionSafe(val);\n}\n/**\n * Get precision with slow but safe method\n */\n\nexport function getPrecisionSafe(val) {\n  // toLowerCase for: '3.4E-12'\n  var str = val.toString().toLowerCase(); // Consider scientific notation: '3.4e-12' '3.4e+12'\n\n  var eIndex = str.indexOf('e');\n  var exp = eIndex > 0 ? +str.slice(eIndex + 1) : 0;\n  var significandPartLen = eIndex > 0 ? eIndex : str.length;\n  var dotIndex = str.indexOf('.');\n  var decimalPartLen = dotIndex < 0 ? 0 : significandPartLen - 1 - dotIndex;\n  return Math.max(0, decimalPartLen - exp);\n}\n/**\n * Minimal dicernible data precisioin according to a single pixel.\n */\n\nexport function getPixelPrecision(dataExtent, pixelExtent) {\n  var log = Math.log;\n  var LN10 = Math.LN10;\n  var dataQuantity = Math.floor(log(dataExtent[1] - dataExtent[0]) / LN10);\n  var sizeQuantity = Math.round(log(Math.abs(pixelExtent[1] - pixelExtent[0])) / LN10); // toFixed() digits argument must be between 0 and 20.\n\n  var precision = Math.min(Math.max(-dataQuantity + sizeQuantity, 0), 20);\n  return !isFinite(precision) ? 20 : precision;\n}\n/**\n * Get a data of given precision, assuring the sum of percentages\n * in valueList is 1.\n * The largest remainer method is used.\n * https://en.wikipedia.org/wiki/Largest_remainder_method\n *\n * @param valueList a list of all data\n * @param idx index of the data to be processed in valueList\n * @param precision integer number showing digits of precision\n * @return percent ranging from 0 to 100\n */\n\nexport function getPercentWithPrecision(valueList, idx, precision) {\n  if (!valueList[idx]) {\n    return 0;\n  }\n\n  var seats = getPercentSeats(valueList, precision);\n  return seats[idx] || 0;\n}\n/**\n * Get a data of given precision, assuring the sum of percentages\n * in valueList is 1.\n * The largest remainer method is used.\n * https://en.wikipedia.org/wiki/Largest_remainder_method\n *\n * @param valueList a list of all data\n * @param precision integer number showing digits of precision\n * @return {Array<number>}\n */\n\nexport function getPercentSeats(valueList, precision) {\n  var sum = zrUtil.reduce(valueList, function (acc, val) {\n    return acc + (isNaN(val) ? 0 : val);\n  }, 0);\n\n  if (sum === 0) {\n    return [];\n  }\n\n  var digits = Math.pow(10, precision);\n  var votesPerQuota = zrUtil.map(valueList, function (val) {\n    return (isNaN(val) ? 0 : val) / sum * digits * 100;\n  });\n  var targetSeats = digits * 100;\n  var seats = zrUtil.map(votesPerQuota, function (votes) {\n    // Assign automatic seats.\n    return Math.floor(votes);\n  });\n  var currentSum = zrUtil.reduce(seats, function (acc, val) {\n    return acc + val;\n  }, 0);\n  var remainder = zrUtil.map(votesPerQuota, function (votes, idx) {\n    return votes - seats[idx];\n  }); // Has remainding votes.\n\n  while (currentSum < targetSeats) {\n    // Find next largest remainder.\n    var max = Number.NEGATIVE_INFINITY;\n    var maxId = null;\n\n    for (var i = 0, len = remainder.length; i < len; ++i) {\n      if (remainder[i] > max) {\n        max = remainder[i];\n        maxId = i;\n      }\n    } // Add a vote to max remainder.\n\n\n    ++seats[maxId];\n    remainder[maxId] = 0;\n    ++currentSum;\n  }\n\n  return zrUtil.map(seats, function (seat) {\n    return seat / digits;\n  });\n}\n/**\n * Solve the floating point adding problem like 0.1 + 0.2 === 0.30000000000000004\n * See <http://0.30000000000000004.com/>\n */\n\nexport function addSafe(val0, val1) {\n  var maxPrecision = Math.max(getPrecision(val0), getPrecision(val1)); // const multiplier = Math.pow(10, maxPrecision);\n  // return (Math.round(val0 * multiplier) + Math.round(val1 * multiplier)) / multiplier;\n\n  var sum = val0 + val1; // // PENDING: support more?\n\n  return maxPrecision > ROUND_SUPPORTED_PRECISION_MAX ? sum : round(sum, maxPrecision);\n} // Number.MAX_SAFE_INTEGER, ie do not support.\n\nexport var MAX_SAFE_INTEGER = 9007199254740991;\n/**\n * To 0 - 2 * PI, considering negative radian.\n */\n\nexport function remRadian(radian) {\n  var pi2 = Math.PI * 2;\n  return (radian % pi2 + pi2) % pi2;\n}\n/**\n * @param {type} radian\n * @return {boolean}\n */\n\nexport function isRadianAroundZero(val) {\n  return val > -RADIAN_EPSILON && val < RADIAN_EPSILON;\n} // eslint-disable-next-line\n\nvar TIME_REG = /^(?:(\\d{4})(?:[-\\/](\\d{1,2})(?:[-\\/](\\d{1,2})(?:[T ](\\d{1,2})(?::(\\d{1,2})(?::(\\d{1,2})(?:[.,](\\d+))?)?)?(Z|[\\+\\-]\\d\\d:?\\d\\d)?)?)?)?)?$/; // jshint ignore:line\n\n/**\n * @param value valid type: number | string | Date, otherwise return `new Date(NaN)`\n *   These values can be accepted:\n *   + An instance of Date, represent a time in its own time zone.\n *   + Or string in a subset of ISO 8601, only including:\n *     + only year, month, date: '2012-03', '2012-03-01', '2012-03-01 05', '2012-03-01 05:06',\n *     + separated with T or space: '2012-03-01T12:22:33.123', '2012-03-01 12:22:33.123',\n *     + time zone: '2012-03-01T12:22:33Z', '2012-03-01T12:22:33+8000', '2012-03-01T12:22:33-05:00',\n *     all of which will be treated as local time if time zone is not specified\n *     (see <https://momentjs.com/>).\n *   + Or other string format, including (all of which will be treated as loacal time):\n *     '2012', '2012-3-1', '2012/3/1', '2012/03/01',\n *     '2009/6/12 2:00', '2009/6/12 2:05:08', '2009/6/12 2:05:08.123'\n *   + a timestamp, which represent a time in UTC.\n * @return date Never be null/undefined. If invalid, return `new Date(NaN)`.\n */\n\nexport function parseDate(value) {\n  if (value instanceof Date) {\n    return value;\n  } else if (zrUtil.isString(value)) {\n    // Different browsers parse date in different way, so we parse it manually.\n    // Some other issues:\n    // new Date('1970-01-01') is UTC,\n    // new Date('1970/01/01') and new Date('1970-1-01') is local.\n    // See issue #3623\n    var match = TIME_REG.exec(value);\n\n    if (!match) {\n      // return Invalid Date.\n      return new Date(NaN);\n    } // Use local time when no timezone offset specifed.\n\n\n    if (!match[8]) {\n      // match[n] can only be string or undefined.\n      // But take care of '12' + 1 => '121'.\n      return new Date(+match[1], +(match[2] || 1) - 1, +match[3] || 1, +match[4] || 0, +(match[5] || 0), +match[6] || 0, match[7] ? +match[7].substring(0, 3) : 0);\n    } // Timezoneoffset of Javascript Date has considered DST (Daylight Saving Time,\n    // https://tc39.github.io/ecma262/#sec-daylight-saving-time-adjustment).\n    // For example, system timezone is set as \"Time Zone: America/Toronto\",\n    // then these code will get different result:\n    // `new Date(1478411999999).getTimezoneOffset();  // get 240`\n    // `new Date(1478412000000).getTimezoneOffset();  // get 300`\n    // So we should not use `new Date`, but use `Date.UTC`.\n    else {\n        var hour = +match[4] || 0;\n\n        if (match[8].toUpperCase() !== 'Z') {\n          hour -= +match[8].slice(0, 3);\n        }\n\n        return new Date(Date.UTC(+match[1], +(match[2] || 1) - 1, +match[3] || 1, hour, +(match[5] || 0), +match[6] || 0, match[7] ? +match[7].substring(0, 3) : 0));\n      }\n  } else if (value == null) {\n    return new Date(NaN);\n  }\n\n  return new Date(Math.round(value));\n}\n/**\n * Quantity of a number. e.g. 0.1, 1, 10, 100\n *\n * @param val\n * @return\n */\n\nexport function quantity(val) {\n  return Math.pow(10, quantityExponent(val));\n}\n/**\n * Exponent of the quantity of a number\n * e.g., 1234 equals to 1.234*10^3, so quantityExponent(1234) is 3\n *\n * @param val non-negative value\n * @return\n */\n\nexport function quantityExponent(val) {\n  if (val === 0) {\n    return 0;\n  }\n\n  var exp = Math.floor(Math.log(val) / Math.LN10);\n  /**\n   * exp is expected to be the rounded-down result of the base-10 log of val.\n   * But due to the precision loss with Math.log(val), we need to restore it\n   * using 10^exp to make sure we can get val back from exp. #11249\n   */\n\n  if (val / Math.pow(10, exp) >= 10) {\n    exp++;\n  }\n\n  return exp;\n}\n/**\n * find a “nice” number approximately equal to x. Round the number if round = true,\n * take ceiling if round = false. The primary observation is that the “nicest”\n * numbers in decimal are 1, 2, and 5, and all power-of-ten multiples of these numbers.\n *\n * See \"Nice Numbers for Graph Labels\" of Graphic Gems.\n *\n * @param  val Non-negative value.\n * @param  round\n * @return Niced number\n */\n\nexport function nice(val, round) {\n  var exponent = quantityExponent(val);\n  var exp10 = Math.pow(10, exponent);\n  var f = val / exp10; // 1 <= f < 10\n\n  var nf;\n\n  if (round) {\n    if (f < 1.5) {\n      nf = 1;\n    } else if (f < 2.5) {\n      nf = 2;\n    } else if (f < 4) {\n      nf = 3;\n    } else if (f < 7) {\n      nf = 5;\n    } else {\n      nf = 10;\n    }\n  } else {\n    if (f < 1) {\n      nf = 1;\n    } else if (f < 2) {\n      nf = 2;\n    } else if (f < 3) {\n      nf = 3;\n    } else if (f < 5) {\n      nf = 5;\n    } else {\n      nf = 10;\n    }\n  }\n\n  val = nf * exp10; // Fix 3 * 0.1 === 0.30000000000000004 issue (see IEEE 754).\n  // 20 is the uppper bound of toFixed.\n\n  return exponent >= -20 ? +val.toFixed(exponent < 0 ? -exponent : 0) : val;\n}\n/**\n * This code was copied from \"d3.js\"\n * <https://github.com/d3/d3/blob/9cc9a875e636a1dcf36cc1e07bdf77e1ad6e2c74/src/arrays/quantile.js>.\n * See the license statement at the head of this file.\n * @param ascArr\n */\n\nexport function quantile(ascArr, p) {\n  var H = (ascArr.length - 1) * p + 1;\n  var h = Math.floor(H);\n  var v = +ascArr[h - 1];\n  var e = H - h;\n  return e ? v + e * (ascArr[h] - v) : v;\n}\n/**\n * Order intervals asc, and split them when overlap.\n * expect(numberUtil.reformIntervals([\n *     {interval: [18, 62], close: [1, 1]},\n *     {interval: [-Infinity, -70], close: [0, 0]},\n *     {interval: [-70, -26], close: [1, 1]},\n *     {interval: [-26, 18], close: [1, 1]},\n *     {interval: [62, 150], close: [1, 1]},\n *     {interval: [106, 150], close: [1, 1]},\n *     {interval: [150, Infinity], close: [0, 0]}\n * ])).toEqual([\n *     {interval: [-Infinity, -70], close: [0, 0]},\n *     {interval: [-70, -26], close: [1, 1]},\n *     {interval: [-26, 18], close: [0, 1]},\n *     {interval: [18, 62], close: [0, 1]},\n *     {interval: [62, 150], close: [0, 1]},\n *     {interval: [150, Infinity], close: [0, 0]}\n * ]);\n * @param list, where `close` mean open or close\n *        of the interval, and Infinity can be used.\n * @return The origin list, which has been reformed.\n */\n\nexport function reformIntervals(list) {\n  list.sort(function (a, b) {\n    return littleThan(a, b, 0) ? -1 : 1;\n  });\n  var curr = -Infinity;\n  var currClose = 1;\n\n  for (var i = 0; i < list.length;) {\n    var interval = list[i].interval;\n    var close_1 = list[i].close;\n\n    for (var lg = 0; lg < 2; lg++) {\n      if (interval[lg] <= curr) {\n        interval[lg] = curr;\n        close_1[lg] = !lg ? 1 - currClose : 1;\n      }\n\n      curr = interval[lg];\n      currClose = close_1[lg];\n    }\n\n    if (interval[0] === interval[1] && close_1[0] * close_1[1] !== 1) {\n      list.splice(i, 1);\n    } else {\n      i++;\n    }\n  }\n\n  return list;\n\n  function littleThan(a, b, lg) {\n    return a.interval[lg] < b.interval[lg] || a.interval[lg] === b.interval[lg] && (a.close[lg] - b.close[lg] === (!lg ? 1 : -1) || !lg && littleThan(a, b, 1));\n  }\n}\n/**\n * [Numberic is defined as]:\n *     `parseFloat(val) == val`\n * For example:\n * numeric:\n *     typeof number except NaN, '-123', '123', '2e3', '-2e3', '011', 'Infinity', Infinity,\n *     and they rounded by white-spaces or line-terminal like ' -123 \\n ' (see es spec)\n * not-numeric:\n *     null, undefined, [], {}, true, false, 'NaN', NaN, '123ab',\n *     empty string, string with only white-spaces or line-terminal (see es spec),\n *     0x12, '0x12', '-0x12', 012, '012', '-012',\n *     non-string, ...\n *\n * @test See full test cases in `test/ut/spec/util/number.js`.\n * @return Must be a typeof number. If not numeric, return NaN.\n */\n\nexport function numericToNumber(val) {\n  var valFloat = parseFloat(val);\n  return valFloat == val // eslint-disable-line eqeqeq\n  && (valFloat !== 0 || !zrUtil.isString(val) || val.indexOf('x') <= 0) // For case ' 0x0 '.\n  ? valFloat : NaN;\n}\n/**\n * Definition of \"numeric\": see `numericToNumber`.\n */\n\nexport function isNumeric(val) {\n  return !isNaN(numericToNumber(val));\n}\n/**\n * Use random base to prevent users hard code depending on\n * this auto generated marker id.\n * @return An positive integer.\n */\n\nexport function getRandomIdBase() {\n  return Math.round(Math.random() * 9);\n}\n/**\n * Get the greatest common dividor\n *\n * @param {number} a one number\n * @param {number} b the other number\n */\n\nexport function getGreatestCommonDividor(a, b) {\n  if (b === 0) {\n    return a;\n  }\n\n  return getGreatestCommonDividor(b, a % b);\n}\n/**\n * Get the least common multiple\n *\n * @param {number} a one number\n * @param {number} b the other number\n */\n\nexport function getLeastCommonMultiple(a, b) {\n  if (a == null) {\n    return b;\n  }\n\n  if (b == null) {\n    return a;\n  }\n\n  return a * b / getGreatestCommonDividor(a, b);\n}"],"names":["RADIAN_EPSILON","linearMap","val","domain","range","clamp","d0","d1","r0","r1","subDomain","subRange","parsePercent","percent","all","zrUtil","str","replace","match","parseFloat","NaN","round","x","precision","returnStr","Math","min","max","toFixed","asc","arr","sort","a","b","getPrecision","isNaN","e","i","toString","toLowerCase","eIndex","indexOf","exp","slice","significandPartLen","length","dotIndex","decimalPartLen","getPrecisionSafe","getPixelPrecision","dataExtent","pixelExtent","log","LN10","dataQuantity","floor","sizeQuantity","abs","isFinite","getPercentSeats","valueList","sum","acc","digits","pow","votesPerQuota","targetSeats","seats","votes","currentSum","remainder","idx","Number","NEGATIVE_INFINITY","maxId","len","seat","addSafe","val0","val1","maxPrecision","MAX_SAFE_INTEGER","remRadian","radian","pi2","PI","isRadianAroundZero","TIME_REG","parseDate","value","Date","exec","hour","toUpperCase","UTC","substring","quantity","quantityExponent","nice","exponent","exp10","f","quantile","ascArr","p","H","h","v","reformIntervals","list","littleThan","curr","Infinity","currClose","interval","close_1","close","lg","splice","numericToNumber","valFloat","isNumeric","getRandomIdBase","random","getGreatestCommonDividor","getLeastCommonMultiple"],"sourceRoot":""}