{"version":3,"file":"static/js/1389.0bf30a68.js","mappings":"6LAkDIA,GAAQC,EAAAA,EAAAA,MAERC,EAEJ,SAAUC,GAGR,SAASD,EAAeE,EAAQC,EAAaC,GAC3C,IAAIC,EAAQJ,EAAOK,KAAKC,KAAML,EAAQC,EAAaC,IAAYG,KAG/D,OADAF,EAAMG,IAAMC,EAAAA,GAAqB,gBAC1BJ,CACT,CAwKiC,IAC3BK,EASN,OAzLAC,EAAAA,EAAAA,IAAUX,EAAgBC,GAS1BD,EAAeY,UAAUC,KAAO,SAAUX,EAAQC,EAAaC,GAC7DG,KAAKO,qBAAqBZ,EAAQE,EACpC,EAEAJ,EAAeY,UAAUE,qBAAuB,SAAUZ,EAAQE,GAChE,IAAIW,EAAaC,EAAAA,GAAuBT,MACpCU,EAAsBF,EAAaC,EAAAA,GAAuBd,GAAU,CAAC,EACrEgB,EAAad,EAAQe,WACzBC,EAAAA,GAAalB,EAAQgB,EAAWG,IAAId,KAAKe,WACzCF,EAAAA,GAAalB,EAAQK,KAAKgB,oBAEtBR,GACFC,EAAAA,GAAwBd,EAAQe,EAAqBF,EAEzD,EAEAf,EAAeY,UAAUY,YAAc,SAAUtB,EAAQE,GACvDgB,EAAAA,GAAab,KAAKL,OAAQA,GAAQ,GAClC,IAAIa,EAAaC,EAAAA,GAAuBT,MAEpCQ,GACFC,EAAAA,GAAwBT,KAAKL,OAAQA,EAAQa,EAEjD,EAMAf,EAAeY,UAAUa,cAAgB,SAAUC,EAAcC,GAAS,EAyD1E3B,EAAeY,UAAUW,iBAAmB,WAC1C,IAAIK,EAAOrB,KAAKsB,YAIhB,KAAKC,EAAAA,EAAAA,IAAgBF,GAEnB,OAAOA,EAAKG,cAId,IAAIC,EAASlC,EAAMS,MAEnB,IAAKyB,EAAOD,cAAe,CAIzB,IAHA,IAAIE,EAAU,GACVC,EAAMN,EAEHM,GAAK,CACV,IAAIC,EAAMD,EAAItB,UAAUmB,cACxBI,GAAOF,EAAQG,KAAKD,GACpBD,EAAMA,EAAIG,UACZ,CAIA,IAFA,IAAIN,EAAgB,CAAC,EAEZO,EAAIL,EAAQM,OAAS,EAAGD,GAAK,EAAGA,IACvCP,EAAgBX,EAAAA,GAAaW,EAAeE,EAAQK,IAAI,GAG1DN,EAAOD,cAAgBA,CACzB,CAEA,OAAOC,EAAOD,aAChB,EAWA/B,EAAeY,UAAU4B,uBAAyB,SAAUlB,EAAUa,GACpE,IAAIM,EAAWnB,EAAW,QACtBoB,EAAQpB,EAAW,KACvB,OAAOqB,EAAAA,EAAAA,IAAyBpC,KAAKH,QAASkB,EAAU,CACtDsB,MAAOrC,KAAKc,IAAIoB,GAAU,GAC1BI,GAAItC,KAAKc,IAAIqB,GAAO,IACnBP,EACL,EAEAnC,EAAeY,UAAUkC,mBAAqB,WAE5C,IAAIC,EAAiBxC,KACrB,MAAO,CACLyC,KAAMD,EAAe1B,IAAI,QACzB4B,IAAKF,EAAe1B,IAAI,OACxB6B,MAAOH,EAAe1B,IAAI,SAC1B8B,OAAQJ,EAAe1B,IAAI,UAC3B+B,MAAOL,EAAe1B,IAAI,SAC1BgC,OAAQN,EAAe1B,IAAI,UAE/B,EAQArB,EAAeY,UAAU0C,aAAe,WACtC,MAAO,EACT,EAEAtD,EAAeY,UAAU2C,UAAY,SAAUC,GAC7CjD,KAAKL,OAAOsD,OAASA,CACvB,EAEAxD,EAAeyD,kBACT/C,EAAQV,EAAeY,WACrB8C,KAAO,YACbhD,EAAMmC,GAAK,GACXnC,EAAMiD,KAAO,GACbjD,EAAMY,SAAW,GACjBZ,EAAMkD,QAAU,QAChBlD,EAAMmD,eAAiB,IAGlB7D,CACT,CA3LA,CA2LE8D,EAAAA,IAEFC,EAAAA,EAAAA,IAAY/D,EAAgB8D,EAAAA,IAC5BE,EAAAA,EAAAA,IAAsBhE,GACtBS,EAAAA,GAAqCT,GACrCS,EAAAA,GAAsCT,GAEtC,SAAyBiE,GACvB,IAAIC,EAAO,GAaX,OAZA9C,EAAAA,GAAYpB,EAAemE,qBAAqBF,IAAgB,SAAU/B,GACxEgC,EAAOA,EAAKE,OAAOlC,EAAImC,cAAgBnC,EAAItB,UAAUyD,cAAgB,GACvE,IAEAH,EAAO9C,EAAAA,GAAW8C,GAAM,SAAUR,GAChC,OAAOY,EAAAA,EAAAA,IAAeZ,GAAMa,IAC9B,IAEsB,YAAlBN,GAA+B7C,EAAAA,GAAe8C,EAAM,YAAc,GACpEA,EAAKM,QAAQ,WAGRN,CACT,IAEA,K,4BClMIO,EACAC,EACAC,E,iGAsEAC,EAEJ,SAAU3E,GAGR,SAAS2E,IACP,OAAkB,OAAX3E,GAAmBA,EAAO4E,MAAMtE,KAAMuE,YAAcvE,IAC7D,CAsnBA,OA1nBAI,EAAAA,EAAAA,IAAUiE,EAAa3E,GAMvB2E,EAAYhE,UAAUC,KAAO,SAAUX,EAAQC,EAAaC,EAAS2E,EAAOC,EAAQC,GAClFF,EAAQA,GAAS,CAAC,EAClBxE,KAAKL,OAAS,KAEdK,KAAK2E,OAAS,IAAIpB,EAAAA,EAAMiB,GACxBxE,KAAK4E,QAAU,IAAIrB,EAAAA,EAAMkB,GACzBzE,KAAK6E,eAAiBH,CACxB,EAEAL,EAAYhE,UAAUyE,UAAY,SAAUnF,EAAQoF,EAAMC,GAMxD,IAAIC,EAAWC,EAAwBH,GAEvC/E,KAAK6E,eAAeC,UAAUnF,EAAQqF,EAAyBC,GAE/DjF,KAAKmF,aAAa,KAAMF,EAC1B,EAUAZ,EAAYhE,UAAU+E,YAAc,SAAUjC,EAAMvB,GAClD,OAAO5B,KAAKmF,aAAahC,EAAM+B,EAAwBtD,GACzD,EAEAyC,EAAYhE,UAAU8E,aAAe,SAAUhC,EAAMvB,GACnD,IAAIyD,GAAgB,EAChBX,EAAgB1E,KAAK6E,eAEzB,IAAK1B,GAAiB,aAATA,EAAqB,CAChC,IAAImC,EAAaZ,EAAca,YAAqB,aAATpC,GAMtCnD,KAAKL,QAAmB,aAATwD,GAGlBnD,KAAKwF,cAELxF,KAAKyF,aAAaH,EAAY1D,IAJ9BwC,EAASpE,KAAMsF,GAOjBD,GAAgB,CAClB,CAcA,GAZa,aAATlC,GAAgC,UAATA,GACzBnD,KAAKwF,eAWFrC,GAAiB,aAATA,GAAgC,aAATA,EAAqB,CACvD,IAAIuC,EAAiBhB,EAAciB,kBAAkB3F,MAEjD0F,IACFL,GAAgB,EAEhBrF,KAAKyF,aAAaC,EAAgB9D,GAEtC,CAEA,IAAKuB,GAAiB,aAATA,GAAgC,UAATA,EAAkB,CACpD,IAAIyC,EAAelB,EAAcmB,eAAe7F,MAE5C4F,EAAa5D,SACf8D,EAAAA,EAAAA,IAAKF,GAAc,SAAUG,GAC3BV,GAAgB,EAEhBrF,KAAKyF,aAAaM,EAAanE,EACjC,GAAG5B,KAEP,CAEA,OAAOqF,CACT,EAEAhB,EAAYhE,UAAUY,YAAc,SAAUtB,GAC5CK,KAAKyF,aAAa9F,EAAQ,KAC5B,EAEA0E,EAAYhE,UAAUoF,aAAe,SAAUO,EAAWpE,GACxD,IAAIjC,EAASK,KAAKL,OACdsG,EAAgBjG,KAAKkG,eACrBC,EAAkBnG,KAAKoG,iBACvBC,EAAe,GACfC,GAAiBC,EAAAA,EAAAA,MACjBC,EAA0B5E,GAAOA,EAAI4E,yBACzCC,EAAAA,EAAAA,IAAqBzG,OAGrB8F,EAAAA,EAAAA,IAAKE,GAAW,SAAUU,EAAiB3F,GAClB,MAAnB2F,IAICjH,EAAAA,EAAAA,SAAwBsB,GAGlBA,IACTsF,EAAaxE,KAAKd,GAClBuF,EAAeK,IAAI5F,GAAU,IAH7BpB,EAAOoB,GAAgC,MAApBpB,EAAOoB,IAAoB6F,EAAAA,EAAAA,IAAMF,IAAmBG,EAAAA,EAAAA,IAAMlH,EAAOoB,GAAW2F,GAAiB,GAKpH,IAEIF,GAKFA,EAAwBV,MAAK,SAAUgB,EAAKC,GACtCtH,EAAAA,EAAAA,SAAwBsH,KAA4BT,EAAexF,IAAIiG,KACzEV,EAAaxE,KAAKkF,GAClBT,EAAeK,IAAII,GAAwB,GAE/C,IAGFtH,EAAAA,EAAAA,kBAAiC4G,EAAc5G,EAAAA,EAAAA,wBAE/C,SAAwBsB,GACtB,IAAIiG,GAAoBC,EAAAA,EAAAA,GAAsBjH,KAAMe,EAAUmG,EAAAA,GAA2BlB,EAAUjF,KAC/FoG,EAAclB,EAAcnF,IAAIC,GAChCqG,EACHD,EAA6BX,GAA2BA,EAAwB1F,IAAIC,GAAY,eAAiB,cAAnG,aACXsG,EAAgBH,EAAAA,GAA0BC,EAAaH,EAAmBI,GAE9EF,EAAAA,GAAoCG,EAAetG,EAAUtB,EAAAA,GAI7DE,EAAOoB,GAAY,KACnBkF,EAAcU,IAAI5F,EAAU,MAC5BoF,EAAgBQ,IAAI5F,EAAU,GAC9B,IAGIuG,EAHAC,EAAoB,GACpBC,EAAkB,GAClBC,EAAuB,GAG3B3B,EAAAA,EAAAA,IAAKuB,GAAe,SAAUK,EAAYrF,GACxC,IAAIsF,EAAiBD,EAAWE,SAC5BC,EAAgBH,EAAW1B,UAE/B,GAAK6B,EAWE,CACL,IAAIC,EAA4B,WAAb/G,EACfgH,EAAsBtI,EAAAA,EAAAA,SAAwBsB,EAAU2G,EAAWM,QAAQ3E,SAAUyE,GAGzF,IAAKC,EAgBH,OAIF,GAAiB,YAAbhH,EAAwB,CAC1B,GAAIuG,EAQF,OAGFA,GAAgB,CAClB,CAEA,GAAIK,GAAkBA,EAAerG,cAAgByG,EACnDJ,EAAevE,KAAOsE,EAAWM,QAAQ5E,KAEzCuE,EAAe1G,YAAY4G,EAAe7H,MAC1C2H,EAAezG,cAAc2G,GAAe,OACvC,CAEL,IAAII,GAAWC,EAAAA,EAAAA,IAAO,CACpB5E,eAAgBjB,GACfqF,EAAWM,SACdL,EAAiB,IAAII,EAAoBF,EAAe7H,KAAMA,KAAMiI,IAEpEC,EAAAA,EAAAA,IAAOP,EAAgBM,GAEnBP,EAAWS,WACbR,EAAeS,kBAAmB,GAGpCT,EAAerH,KAAKuH,EAAe7H,KAAMA,MAKzC2H,EAAezG,cAAc,MAAM,EACrC,CACF,MA3EMyG,IAIFA,EAAe1G,YAAY,CAAC,EAAGjB,MAC/B2H,EAAezG,cAAc,CAAC,GAAG,IAwEjCyG,GACFJ,EAAkB1F,KAAK8F,EAAehI,QACtC6H,EAAgB3F,KAAK8F,GACrBF,MAGAF,EAAkB1F,UAAK,GACvB2F,EAAgB3F,UAAK,GAEzB,GAAG7B,MACHL,EAAOoB,GAAYwG,EACnBtB,EAAcU,IAAI5F,EAAUyG,GAC5BrB,EAAgBQ,IAAI5F,EAAU0G,GAEb,WAAb1G,GACFmD,EAAsBlE,KAE1B,GAxHsGA,MA2HjGA,KAAKqI,gBACRnE,EAAsBlE,KAE1B,EAMAqE,EAAYhE,UAAUiI,UAAY,WAChC,IAAI3I,GAASiH,EAAAA,EAAAA,IAAM5G,KAAKL,QAyBxB,OAxBAmG,EAAAA,EAAAA,IAAKnG,GAAQ,SAAU4I,EAAexH,GACpC,GAAItB,EAAAA,EAAAA,SAAwBsB,GAAW,CAQrC,IAPA,IAAIgE,EAAOmC,EAAAA,GAA2BqB,GAIlCC,EAAUzD,EAAK/C,OACfyG,GAAc,EAET1G,EAAIyG,EAAU,EAAGzG,GAAK,EAAGA,IAE5BgD,EAAKhD,KAAOmF,EAAAA,GAAgCnC,EAAKhD,IACnD0G,GAAc,GAEd1D,EAAKhD,GAAK,MACT0G,GAAeD,KAIpBzD,EAAK/C,OAASwG,EACd7I,EAAOoB,GAAYgE,CACrB,CACF,WACOpF,EAAO+I,eACP/I,CACT,EAEA0E,EAAYhE,UAAUO,SAAW,WAC/B,OAAOZ,KAAK2E,MACd,EAEAN,EAAYhE,UAAUsI,eAAiB,WACrC,OAAO3I,KAAK4E,OACd,EAEAP,EAAYhE,UAAUuI,iBAAmB,SAAUC,GACjD7I,KAAK8I,SAAWD,CAClB,EAEAxE,EAAYhE,UAAU0I,iBAAmB,WACvC,OAAO/I,KAAK8I,QACd,EAMAzE,EAAYhE,UAAU2I,aAAe,SAAUjI,EAAUkI,GACvD,IAAIC,EAAOlJ,KAAKkG,eAAepF,IAAIC,GAEnC,GAAImI,EAAM,CACR,IAAIC,EAAOD,EAAKD,GAAO,GAEvB,GAAIE,EACF,OAAOA,EACF,GAAW,MAAPF,EACT,IAAK,IAAIlH,EAAI,EAAGA,EAAImH,EAAKlH,OAAQD,IAC/B,GAAImH,EAAKnH,GACP,OAAOmH,EAAKnH,EAIpB,CACF,EAMAsC,EAAYhE,UAAU+I,gBAAkB,SAAUC,GAChD,IAAItI,EAAWsI,EAAUtI,SAEzB,IAAKA,EACH,MAAO,GAGT,IAUIuI,EAVAjH,EAAQgH,EAAUhH,MAClBC,EAAK+G,EAAU/G,GACfc,EAAOiG,EAAUjG,KAEjBmG,EAAQvJ,KAAKkG,eAAepF,IAAIC,GAEpC,OAAKwI,GAAUA,EAAMvH,QAMR,MAATK,GACFiH,EAAS,IACTxD,EAAAA,EAAAA,IAAKoB,EAAAA,GAA2B7E,IAAQ,SAAU4G,GAChDM,EAAMN,IAAQK,EAAOzH,KAAK0H,EAAMN,GAClC,KAEAK,EADe,MAANhH,EACAkH,EAAgB,KAAMlH,EAAIiH,GAClB,MAARnG,EACAoG,EAAgB,OAAQpG,EAAMmG,IAG9BE,EAAAA,EAAAA,IAAOF,GAAO,SAAUJ,GAC/B,QAASA,CACX,IAGKO,EAAgBJ,EAAQD,IArBtB,EAsBX,EAoBAhF,EAAYhE,UAAUsJ,eAAiB,SAAUN,GAC/C,IASsBO,EAChBC,EACAC,EACAC,EAUYC,EAtBdC,EAAQZ,EAAUY,MAClBlJ,EAAWsI,EAAUtI,SACrBmJ,GAQEL,EAAY9I,EAAW,QACvB+I,EAAS/I,EAAW,KACpBgJ,EAAWhJ,EAAW,SAHN6I,EAPOK,IAWE,MAAhBL,EAAEC,IAAmC,MAAbD,EAAEE,IAAkC,MAAfF,EAAEG,GAMxD,KAN6E,CAC/EhJ,SAAUA,EAEVsB,MAAOuH,EAAEC,GACTvH,GAAIsH,EAAEE,GACN1G,KAAMwG,EAAEG,KAXZ,OAekBC,EAfFN,EAJHQ,EAAYlK,KAAKoJ,gBAAgBc,IAC5CT,EAAAA,EAAAA,IAAOzJ,KAAKkG,eAAepF,IAAIC,IAAW,SAAUoI,GACpD,QAASA,CACX,IACwCE,GAgB/BA,EAAUI,QAASA,EAAAA,EAAAA,IAAOO,EAAKX,EAAUI,QAAUO,CAE9D,EAEA3F,EAAYhE,UAAU8J,cAAgB,SAAUpJ,EAAUqJ,EAAIC,GAC5D,IAAIpE,EAAgBjG,KAAKkG,eAEzB,IAAIoE,EAAAA,EAAAA,IAAWvJ,GAAW,CACxB,IAAIwJ,EAAcH,EACdI,EAAazJ,EACjBkF,EAAcH,MAAK,SAAUyD,EAAO7F,GAClC,IAAK,IAAI3B,EAAI,EAAGwH,GAASxH,EAAIwH,EAAMvH,OAAQD,IAAK,CAC9C,IAAIoH,EAAOI,EAAMxH,GACjBoH,GAAQqB,EAAWzK,KAAKwK,EAAa7G,EAAeyF,EAAMA,EAAK7F,eACjE,CACF,GACF,MAGE,IAFA,IAAIiG,GAAQkB,EAAAA,EAAAA,IAAS1J,GAAYkF,EAAcnF,IAAIC,IAAY2J,EAAAA,EAAAA,IAAS3J,GAAYf,KAAK2J,eAAe5I,GAAY,KAE3GgB,EAAI,EAAGwH,GAASxH,EAAIwH,EAAMvH,OAAQD,IAAK,CAC9C,IAAIoH,EAAOI,EAAMxH,GACjBoH,GAAQiB,EAAGrK,KAAKsK,EAASlB,EAAMA,EAAK7F,eACtC,CAEJ,EAMAe,EAAYhE,UAAUsK,gBAAkB,SAAUvH,GAChD,IAAIwH,EAAU1D,EAAAA,GAA8B9D,EAAM,MAClD,OAAOqG,EAAAA,EAAAA,IAAOzJ,KAAKkG,eAAepF,IAAI,WAAW,SAAU+J,GACzD,QAASA,GAAwB,MAAXD,GAAmBC,EAAUzH,OAASwH,CAC9D,GACF,EAMAvG,EAAYhE,UAAUyK,iBAAmB,SAAUC,GACjD,OAAO/K,KAAKkG,eAAepF,IAAI,UAAUiK,EAC3C,EAOA1G,EAAYhE,UAAU2K,gBAAkB,SAAU3H,GAChD,OAAOoG,EAAAA,EAAAA,IAAOzJ,KAAKkG,eAAepF,IAAI,WAAW,SAAU+J,GACzD,QAASA,GAAaA,EAAUxH,UAAYA,CAC9C,GACF,EAMAgB,EAAYhE,UAAU4K,UAAY,WAChC,OAAOxB,EAAAA,EAAAA,IAAOzJ,KAAKkG,eAAepF,IAAI,WAAW,SAAU+J,GACzD,QAASA,CACX,GACF,EAMAxG,EAAYhE,UAAU6K,eAAiB,WACrC,OAAOlL,KAAKoG,iBAAiBtF,IAAI,SACnC,EAOAuD,EAAYhE,UAAU8K,WAAa,SAAUf,EAAIC,GAC/ClG,EAAwBnE,OACxB8F,EAAAA,EAAAA,IAAK9F,KAAKqI,gBAAgB,SAAU+C,GAClC,IAAIC,EAASrL,KAAKkG,eAAepF,IAAI,UAAUsK,GAE/ChB,EAAGrK,KAAKsK,EAASgB,EAAQD,EAC3B,GAAGpL,KACL,EASAqE,EAAYhE,UAAUiL,cAAgB,SAAUlB,EAAIC,IAClDvE,EAAAA,EAAAA,IAAK9F,KAAKkG,eAAepF,IAAI,WAAW,SAAUuK,GAChDA,GAAUjB,EAAGrK,KAAKsK,EAASgB,EAAQA,EAAO/H,eAC5C,GACF,EAOAe,EAAYhE,UAAUkL,iBAAmB,SAAUlI,EAAS+G,EAAIC,GAC9DlG,EAAwBnE,OACxB8F,EAAAA,EAAAA,IAAK9F,KAAKqI,gBAAgB,SAAU+C,GAClC,IAAIC,EAASrL,KAAKkG,eAAepF,IAAI,UAAUsK,GAE3CC,EAAOhI,UAAYA,GACrB+G,EAAGrK,KAAKsK,EAASgB,EAAQD,EAE7B,GAAGpL,KACL,EAMAqE,EAAYhE,UAAUmL,oBAAsB,SAAUnI,EAAS+G,EAAIC,GACjE,OAAOvE,EAAAA,EAAAA,IAAK9F,KAAKgL,gBAAgB3H,GAAU+G,EAAIC,EACjD,EAEAhG,EAAYhE,UAAUoL,iBAAmB,SAAUC,GAEjD,OADAvH,EAAwBnE,MACyC,MAA1DA,KAAK2L,kBAAkB7K,IAAI4K,EAAYpI,eAChD,EAEAe,EAAYhE,UAAUuL,wBAA0B,WAC9C,OAAQ5L,KAAKqI,gBAAkB,IAAIwD,OACrC,EAEAxH,EAAYhE,UAAUyL,aAAe,SAAU1B,EAAIC,GACjDlG,EAAwBnE,MACxB,IAAI+L,EAAmB,IACvBjG,EAAAA,EAAAA,IAAK9F,KAAKqI,gBAAgB,SAAU2D,GAClC,IAAIX,EAASrL,KAAKkG,eAAepF,IAAI,UAAUkL,GAE/C5B,EAAGrK,KAAKsK,EAASgB,EAAQW,IAAiBD,EAAiBlK,KAAKmK,EAClE,GAAGhM,MACHA,KAAKqI,eAAiB0D,EACtB/L,KAAK2L,mBAAoBpF,EAAAA,EAAAA,IAAcwF,EACzC,EAEA1H,EAAYhE,UAAUmF,YAAc,SAAUqD,GAC5C3E,EAAsBlE,MACtB,IAAIiG,EAAgBjG,KAAKkG,eACrB+F,EAAiB,GACrBhG,EAAcH,MAAK,SAAUoG,EAAYxI,GACnCjE,EAAAA,EAAAA,SAAwBiE,IAC1BuI,EAAepK,KAAK6B,EAExB,IACAjE,EAAAA,EAAAA,kBAAiCwM,EAAgBxM,EAAAA,EAAAA,wBAAuC,SAAUiE,IAChGoC,EAAAA,EAAAA,IAAKG,EAAcnF,IAAI4C,IAAgB,SAAUyI,IAC3CA,GAAgC,WAAlBzI,GAyD1B,SAA2BgI,EAAa7C,GACtC,GAAIA,EAAS,CACX,IAAIxG,EAAQwG,EAAQkC,YAChBzI,EAAKuG,EAAQuD,SACbC,EAASxD,EAAQyD,WACrB,OAAgB,MAATjK,GAAiBqJ,EAAYpI,iBAAmBjB,GAAe,MAANC,GAAcoJ,EAAYpJ,KAAOA,GAAgB,MAAV+J,GAAkBX,EAAYtI,OAASiJ,CAChJ,CACF,CAhEyDE,CAAkBJ,EAAWtD,IAC5EsD,EAAU3G,aAEd,GACF,GACF,EAEAnB,EAAYmI,eACVtI,EAAwB,SAAUrE,GAChC,IAAI4M,EAAgB5M,EAAQwI,eAAiB,IAC7CvC,EAAAA,EAAAA,IAAKjG,EAAQqG,eAAepF,IAAI,WAAW,SAAUuK,GAEnDA,GAAUoB,EAAc5K,KAAKwJ,EAAO/H,eACtC,IACAzD,EAAQ8L,mBAAoBpF,EAAAA,EAAAA,IAAckG,EAC5C,EAEAtI,EAA0B,SAAUtE,GAQpC,OAEAuE,EAAW,SAAUvE,EAASyF,GAG5BzF,EAAQF,OAAS,CAAC,EAClBE,EAAQF,OAAO+I,eA1qBI,EA6qBnB7I,EAAQqG,gBAAiBK,EAAAA,EAAAA,IAAc,CACrC8E,OAAQ,KAEVxL,EAAQuG,kBAAmBG,EAAAA,EAAAA,MAG3B,IA0Bc5G,EAAQ6E,EAGtBkI,EA7BIC,EAAarH,EAAWsH,MAExBlC,EAAAA,EAAAA,IAASiC,IAAqC,MAAtBA,EAAWE,UACrCF,EAAWE,SAAU,GAuBTlN,EApBH2F,EAoBWd,EApBC3E,EAAQ8E,OAAOhF,OAuBtC+M,EAAqB/M,EAAOmN,QAAUnN,EAAOoN,YACjDjH,EAAAA,EAAAA,IAAKtB,GAAO,SAAUwI,EAAW5J,GAClB,eAATA,GAAyBsJ,GAMxBjN,EAAAA,EAAAA,SAAwB2D,KACF,iBAAd4J,EACTrN,EAAOyD,GAASzD,EAAOyD,IAA2ByD,EAAAA,EAAAA,IAAMlH,EAAOyD,GAAO4J,GAAW,IAAlDpG,EAAAA,EAAAA,IAAMoG,GAEjB,MAAhBrN,EAAOyD,KACTzD,EAAOyD,GAAQ4J,GAIvB,KAtCInG,EAAAA,EAAAA,IAAMvB,EAAY2H,EAAAA,GAAe,GAEjCpN,EAAQ4F,aAAaH,EAAY,KACnC,IAGKjB,CACT,CA5nBA,CA4nBEd,EAAAA,GAkCF,SAASiG,EAAgB0D,EAAMC,EAAU5D,GAGvC,IAAI6D,EAAAA,EAAAA,IAAQD,GAAW,CACrB,IAAIE,GAAW9G,EAAAA,EAAAA,MAOf,OANAT,EAAAA,EAAAA,IAAKqH,GAAU,SAAUG,GACH,MAAhBA,GAEQ,MADGpG,EAAAA,GAA8BoG,EAAc,OACvCD,EAAS1G,IAAI2G,GAAc,EAEjD,KACO7D,EAAAA,EAAAA,IAAOF,GAAO,SAAUJ,GAC7B,OAAOA,GAAQkE,EAASvM,IAAIqI,EAAK+D,GACnC,GACF,CACE,IAAIK,EAAWrG,EAAAA,GAA8BiG,EAAU,MACvD,OAAO1D,EAAAA,EAAAA,IAAOF,GAAO,SAAUJ,GAC7B,OAAOA,GAAoB,MAAZoE,GAAoBpE,EAAK+D,KAAUK,CACpD,GAEJ,CAEA,SAAS7D,EAAgBwC,EAAY7C,GAGnC,OAAOA,EAAUmE,eAAe,YAAa/D,EAAAA,EAAAA,IAAOyC,GAAY,SAAU/C,GACxE,OAAOA,GAAQA,EAAK9F,UAAYgG,EAAUhG,OAC5C,IAAK6I,CACP,CAEA,SAAShH,EAAwBH,GAC/B,IAAIyB,GAA0BD,EAAAA,EAAAA,MAQ9B,OAPAxB,IAAQe,EAAAA,EAAAA,IAAKoB,EAAAA,GAA2BnC,EAAK0I,eAAe,SAAU1M,GAKpEyF,EAAwBG,IAAI5F,GAAU,EACxC,IACO,CACLyF,wBAAyBA,EAE7B,EAEAkH,EAAAA,EAAAA,IAAMrJ,EAAasJ,EAAAA,GACnB,K","sources":["../node_modules/echarts/lib/model/Component.js","../node_modules/echarts/lib/model/Global.js"],"sourcesContent":["\n/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\n\n\n/**\n * AUTO-GENERATED FILE. DO NOT MODIFY.\n */\n\n/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\nimport { __extends } from \"tslib\";\nimport * as zrUtil from 'zrender/lib/core/util.js';\nimport Model from './Model.js';\nimport * as componentUtil from '../util/component.js';\nimport { enableClassManagement, parseClassType, isExtendedClass, mountExtend } from '../util/clazz.js';\nimport { makeInner, queryReferringComponents } from '../util/model.js';\nimport * as layout from '../util/layout.js';\nvar inner = makeInner();\n\nvar ComponentModel =\n/** @class */\nfunction (_super) {\n  __extends(ComponentModel, _super);\n\n  function ComponentModel(option, parentModel, ecModel) {\n    var _this = _super.call(this, option, parentModel, ecModel) || this;\n\n    _this.uid = componentUtil.getUID('ec_cpt_model');\n    return _this;\n  }\n\n  ComponentModel.prototype.init = function (option, parentModel, ecModel) {\n    this.mergeDefaultAndTheme(option, ecModel);\n  };\n\n  ComponentModel.prototype.mergeDefaultAndTheme = function (option, ecModel) {\n    var layoutMode = layout.fetchLayoutMode(this);\n    var inputPositionParams = layoutMode ? layout.getLayoutParams(option) : {};\n    var themeModel = ecModel.getTheme();\n    zrUtil.merge(option, themeModel.get(this.mainType));\n    zrUtil.merge(option, this.getDefaultOption());\n\n    if (layoutMode) {\n      layout.mergeLayoutParam(option, inputPositionParams, layoutMode);\n    }\n  };\n\n  ComponentModel.prototype.mergeOption = function (option, ecModel) {\n    zrUtil.merge(this.option, option, true);\n    var layoutMode = layout.fetchLayoutMode(this);\n\n    if (layoutMode) {\n      layout.mergeLayoutParam(this.option, option, layoutMode);\n    }\n  };\n  /**\n   * Called immediately after `init` or `mergeOption` of this instance called.\n   */\n\n\n  ComponentModel.prototype.optionUpdated = function (newCptOption, isInit) {};\n  /**\n   * [How to declare defaultOption]:\n   *\n   * (A) If using class declaration in typescript (since echarts 5):\n   * ```ts\n   * import {ComponentOption} from '../model/option.js';\n   * export interface XxxOption extends ComponentOption {\n   *     aaa: number\n   * }\n   * export class XxxModel extends Component {\n   *     static type = 'xxx';\n   *     static defaultOption: XxxOption = {\n   *         aaa: 123\n   *     }\n   * }\n   * Component.registerClass(XxxModel);\n   * ```\n   * ```ts\n   * import {inheritDefaultOption} from '../util/component.js';\n   * import {XxxModel, XxxOption} from './XxxModel.js';\n   * export interface XxxSubOption extends XxxOption {\n   *     bbb: number\n   * }\n   * class XxxSubModel extends XxxModel {\n   *     static defaultOption: XxxSubOption = inheritDefaultOption(XxxModel.defaultOption, {\n   *         bbb: 456\n   *     })\n   *     fn() {\n   *         let opt = this.getDefaultOption();\n   *         // opt is {aaa: 123, bbb: 456}\n   *     }\n   * }\n   * ```\n   *\n   * (B) If using class extend (previous approach in echarts 3 & 4):\n   * ```js\n   * let XxxComponent = Component.extend({\n   *     defaultOption: {\n   *         xx: 123\n   *     }\n   * })\n   * ```\n   * ```js\n   * let XxxSubComponent = XxxComponent.extend({\n   *     defaultOption: {\n   *         yy: 456\n   *     },\n   *     fn: function () {\n   *         let opt = this.getDefaultOption();\n   *         // opt is {xx: 123, yy: 456}\n   *     }\n   * })\n   * ```\n   */\n\n\n  ComponentModel.prototype.getDefaultOption = function () {\n    var ctor = this.constructor; // If using class declaration, it is different to travel super class\n    // in legacy env and auto merge defaultOption. So if using class\n    // declaration, defaultOption should be merged manually.\n\n    if (!isExtendedClass(ctor)) {\n      // When using ts class, defaultOption must be declared as static.\n      return ctor.defaultOption;\n    } // FIXME: remove this approach?\n\n\n    var fields = inner(this);\n\n    if (!fields.defaultOption) {\n      var optList = [];\n      var clz = ctor;\n\n      while (clz) {\n        var opt = clz.prototype.defaultOption;\n        opt && optList.push(opt);\n        clz = clz.superClass;\n      }\n\n      var defaultOption = {};\n\n      for (var i = optList.length - 1; i >= 0; i--) {\n        defaultOption = zrUtil.merge(defaultOption, optList[i], true);\n      }\n\n      fields.defaultOption = defaultOption;\n    }\n\n    return fields.defaultOption;\n  };\n  /**\n   * Notice: always force to input param `useDefault` in case that forget to consider it.\n   * The same behavior as `modelUtil.parseFinder`.\n   *\n   * @param useDefault In many cases like series refer axis and axis refer grid,\n   *        If axis index / axis id not specified, use the first target as default.\n   *        In other cases like dataZoom refer axis, if not specified, measn no refer.\n   */\n\n\n  ComponentModel.prototype.getReferringComponents = function (mainType, opt) {\n    var indexKey = mainType + 'Index';\n    var idKey = mainType + 'Id';\n    return queryReferringComponents(this.ecModel, mainType, {\n      index: this.get(indexKey, true),\n      id: this.get(idKey, true)\n    }, opt);\n  };\n\n  ComponentModel.prototype.getBoxLayoutParams = function () {\n    // Consider itself having box layout configs.\n    var boxLayoutModel = this;\n    return {\n      left: boxLayoutModel.get('left'),\n      top: boxLayoutModel.get('top'),\n      right: boxLayoutModel.get('right'),\n      bottom: boxLayoutModel.get('bottom'),\n      width: boxLayoutModel.get('width'),\n      height: boxLayoutModel.get('height')\n    };\n  };\n  /**\n   * Get key for zlevel.\n   * If developers don't configure zlevel. We will assign zlevel to series based on the key.\n   * For example, lines with trail effect and progressive series will in an individual zlevel.\n   */\n\n\n  ComponentModel.prototype.getZLevelKey = function () {\n    return '';\n  };\n\n  ComponentModel.prototype.setZLevel = function (zlevel) {\n    this.option.zlevel = zlevel;\n  };\n\n  ComponentModel.protoInitialize = function () {\n    var proto = ComponentModel.prototype;\n    proto.type = 'component';\n    proto.id = '';\n    proto.name = '';\n    proto.mainType = '';\n    proto.subType = '';\n    proto.componentIndex = 0;\n  }();\n\n  return ComponentModel;\n}(Model);\n\nmountExtend(ComponentModel, Model);\nenableClassManagement(ComponentModel);\ncomponentUtil.enableSubTypeDefaulter(ComponentModel);\ncomponentUtil.enableTopologicalTravel(ComponentModel, getDependencies);\n\nfunction getDependencies(componentType) {\n  var deps = [];\n  zrUtil.each(ComponentModel.getClassesByMainType(componentType), function (clz) {\n    deps = deps.concat(clz.dependencies || clz.prototype.dependencies || []);\n  }); // Ensure main type.\n\n  deps = zrUtil.map(deps, function (type) {\n    return parseClassType(type).main;\n  }); // Hack dataset for convenience.\n\n  if (componentType !== 'dataset' && zrUtil.indexOf(deps, 'dataset') <= 0) {\n    deps.unshift('dataset');\n  }\n\n  return deps;\n}\n\nexport default ComponentModel;","\n/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\n\n\n/**\n * AUTO-GENERATED FILE. DO NOT MODIFY.\n */\n\n/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\nimport { __extends } from \"tslib\";\n/**\n * Caution: If the mechanism should be changed some day, these cases\n * should be considered:\n *\n * (1) In `merge option` mode, if using the same option to call `setOption`\n * many times, the result should be the same (try our best to ensure that).\n * (2) In `merge option` mode, if a component has no id/name specified, it\n * will be merged by index, and the result sequence of the components is\n * consistent to the original sequence.\n * (3) In `replaceMerge` mode, keep the result sequence of the components is\n * consistent to the original sequence, even though there might result in \"hole\".\n * (4) `reset` feature (in toolbox). Find detailed info in comments about\n * `mergeOption` in module:echarts/model/OptionManager.\n */\n\nimport { each, filter, isArray, isObject, isString, createHashMap, assert, clone, merge, extend, mixin, isFunction } from 'zrender/lib/core/util.js';\nimport * as modelUtil from '../util/model.js';\nimport Model from './Model.js';\nimport ComponentModel from './Component.js';\nimport globalDefault from './globalDefault.js';\nimport { resetSourceDefaulter } from '../data/helper/sourceHelper.js';\nimport { concatInternalOptions } from './internalComponentCreator.js';\nimport { PaletteMixin } from './mixin/palette.js';\nimport { error, warn } from '../util/log.js'; // -----------------------\n// Internal method names:\n// -----------------------\n\nvar reCreateSeriesIndices;\nvar assertSeriesInitialized;\nvar initBase;\nvar OPTION_INNER_KEY = '\\0_ec_inner';\nvar OPTION_INNER_VALUE = 1;\nvar BUITIN_COMPONENTS_MAP = {\n  grid: 'GridComponent',\n  polar: 'PolarComponent',\n  geo: 'GeoComponent',\n  singleAxis: 'SingleAxisComponent',\n  parallel: 'ParallelComponent',\n  calendar: 'CalendarComponent',\n  graphic: 'GraphicComponent',\n  toolbox: 'ToolboxComponent',\n  tooltip: 'TooltipComponent',\n  axisPointer: 'AxisPointerComponent',\n  brush: 'BrushComponent',\n  title: 'TitleComponent',\n  timeline: 'TimelineComponent',\n  markPoint: 'MarkPointComponent',\n  markLine: 'MarkLineComponent',\n  markArea: 'MarkAreaComponent',\n  legend: 'LegendComponent',\n  dataZoom: 'DataZoomComponent',\n  visualMap: 'VisualMapComponent',\n  // aria: 'AriaComponent',\n  // dataset: 'DatasetComponent',\n  // Dependencies\n  xAxis: 'GridComponent',\n  yAxis: 'GridComponent',\n  angleAxis: 'PolarComponent',\n  radiusAxis: 'PolarComponent'\n};\nvar BUILTIN_CHARTS_MAP = {\n  line: 'LineChart',\n  bar: 'BarChart',\n  pie: 'PieChart',\n  scatter: 'ScatterChart',\n  radar: 'RadarChart',\n  map: 'MapChart',\n  tree: 'TreeChart',\n  treemap: 'TreemapChart',\n  graph: 'GraphChart',\n  gauge: 'GaugeChart',\n  funnel: 'FunnelChart',\n  parallel: 'ParallelChart',\n  sankey: 'SankeyChart',\n  boxplot: 'BoxplotChart',\n  candlestick: 'CandlestickChart',\n  effectScatter: 'EffectScatterChart',\n  lines: 'LinesChart',\n  heatmap: 'HeatmapChart',\n  pictorialBar: 'PictorialBarChart',\n  themeRiver: 'ThemeRiverChart',\n  sunburst: 'SunburstChart',\n  custom: 'CustomChart'\n};\nvar componetsMissingLogPrinted = {};\n\nfunction checkMissingComponents(option) {\n  each(option, function (componentOption, mainType) {\n    if (!ComponentModel.hasClass(mainType)) {\n      var componentImportName = BUITIN_COMPONENTS_MAP[mainType];\n\n      if (componentImportName && !componetsMissingLogPrinted[componentImportName]) {\n        error(\"Component \" + mainType + \" is used but not imported.\\nimport { \" + componentImportName + \" } from 'echarts/components';\\necharts.use([\" + componentImportName + \"]);\");\n        componetsMissingLogPrinted[componentImportName] = true;\n      }\n    }\n  });\n}\n\nvar GlobalModel =\n/** @class */\nfunction (_super) {\n  __extends(GlobalModel, _super);\n\n  function GlobalModel() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n\n  GlobalModel.prototype.init = function (option, parentModel, ecModel, theme, locale, optionManager) {\n    theme = theme || {};\n    this.option = null; // Mark as not initialized.\n\n    this._theme = new Model(theme);\n    this._locale = new Model(locale);\n    this._optionManager = optionManager;\n  };\n\n  GlobalModel.prototype.setOption = function (option, opts, optionPreprocessorFuncs) {\n    if (process.env.NODE_ENV !== 'production') {\n      assert(option != null, 'option is null/undefined');\n      assert(option[OPTION_INNER_KEY] !== OPTION_INNER_VALUE, 'please use chart.getOption()');\n    }\n\n    var innerOpt = normalizeSetOptionInput(opts);\n\n    this._optionManager.setOption(option, optionPreprocessorFuncs, innerOpt);\n\n    this._resetOption(null, innerOpt);\n  };\n  /**\n   * @param type null/undefined: reset all.\n   *        'recreate': force recreate all.\n   *        'timeline': only reset timeline option\n   *        'media': only reset media query option\n   * @return Whether option changed.\n   */\n\n\n  GlobalModel.prototype.resetOption = function (type, opt) {\n    return this._resetOption(type, normalizeSetOptionInput(opt));\n  };\n\n  GlobalModel.prototype._resetOption = function (type, opt) {\n    var optionChanged = false;\n    var optionManager = this._optionManager;\n\n    if (!type || type === 'recreate') {\n      var baseOption = optionManager.mountOption(type === 'recreate');\n\n      if (process.env.NODE_ENV !== 'production') {\n        checkMissingComponents(baseOption);\n      }\n\n      if (!this.option || type === 'recreate') {\n        initBase(this, baseOption);\n      } else {\n        this.restoreData();\n\n        this._mergeOption(baseOption, opt);\n      }\n\n      optionChanged = true;\n    }\n\n    if (type === 'timeline' || type === 'media') {\n      this.restoreData();\n    } // By design, if `setOption(option2)` at the second time, and `option2` is a `ECUnitOption`,\n    // it should better not have the same props with `MediaUnit['option']`.\n    // Becuase either `option2` or `MediaUnit['option']` will be always merged to \"current option\"\n    // rather than original \"baseOption\". If they both override a prop, the result might be\n    // unexpected when media state changed after `setOption` called.\n    // If we really need to modify a props in each `MediaUnit['option']`, use the full version\n    // (`{baseOption, media}`) in `setOption`.\n    // For `timeline`, the case is the same.\n\n\n    if (!type || type === 'recreate' || type === 'timeline') {\n      var timelineOption = optionManager.getTimelineOption(this);\n\n      if (timelineOption) {\n        optionChanged = true;\n\n        this._mergeOption(timelineOption, opt);\n      }\n    }\n\n    if (!type || type === 'recreate' || type === 'media') {\n      var mediaOptions = optionManager.getMediaOption(this);\n\n      if (mediaOptions.length) {\n        each(mediaOptions, function (mediaOption) {\n          optionChanged = true;\n\n          this._mergeOption(mediaOption, opt);\n        }, this);\n      }\n    }\n\n    return optionChanged;\n  };\n\n  GlobalModel.prototype.mergeOption = function (option) {\n    this._mergeOption(option, null);\n  };\n\n  GlobalModel.prototype._mergeOption = function (newOption, opt) {\n    var option = this.option;\n    var componentsMap = this._componentsMap;\n    var componentsCount = this._componentsCount;\n    var newCmptTypes = [];\n    var newCmptTypeMap = createHashMap();\n    var replaceMergeMainTypeMap = opt && opt.replaceMergeMainTypeMap;\n    resetSourceDefaulter(this); // If no component class, merge directly.\n    // For example: color, animaiton options, etc.\n\n    each(newOption, function (componentOption, mainType) {\n      if (componentOption == null) {\n        return;\n      }\n\n      if (!ComponentModel.hasClass(mainType)) {\n        // globalSettingTask.dirty();\n        option[mainType] = option[mainType] == null ? clone(componentOption) : merge(option[mainType], componentOption, true);\n      } else if (mainType) {\n        newCmptTypes.push(mainType);\n        newCmptTypeMap.set(mainType, true);\n      }\n    });\n\n    if (replaceMergeMainTypeMap) {\n      // If there is a mainType `xxx` in `replaceMerge` but not declared in option,\n      // we trade it as it is declared in option as `{xxx: []}`. Because:\n      // (1) for normal merge, `{xxx: null/undefined}` are the same meaning as `{xxx: []}`.\n      // (2) some preprocessor may convert some of `{xxx: null/undefined}` to `{xxx: []}`.\n      replaceMergeMainTypeMap.each(function (val, mainTypeInReplaceMerge) {\n        if (ComponentModel.hasClass(mainTypeInReplaceMerge) && !newCmptTypeMap.get(mainTypeInReplaceMerge)) {\n          newCmptTypes.push(mainTypeInReplaceMerge);\n          newCmptTypeMap.set(mainTypeInReplaceMerge, true);\n        }\n      });\n    }\n\n    ComponentModel.topologicalTravel(newCmptTypes, ComponentModel.getAllClassMainTypes(), visitComponent, this);\n\n    function visitComponent(mainType) {\n      var newCmptOptionList = concatInternalOptions(this, mainType, modelUtil.normalizeToArray(newOption[mainType]));\n      var oldCmptList = componentsMap.get(mainType);\n      var mergeMode = // `!oldCmptList` means init. See the comment in `mappingToExists`\n      !oldCmptList ? 'replaceAll' : replaceMergeMainTypeMap && replaceMergeMainTypeMap.get(mainType) ? 'replaceMerge' : 'normalMerge';\n      var mappingResult = modelUtil.mappingToExists(oldCmptList, newCmptOptionList, mergeMode); // Set mainType and complete subType.\n\n      modelUtil.setComponentTypeToKeyInfo(mappingResult, mainType, ComponentModel); // Empty it before the travel, in order to prevent `this._componentsMap`\n      // from being used in the `init`/`mergeOption`/`optionUpdated` of some\n      // components, which is probably incorrect logic.\n\n      option[mainType] = null;\n      componentsMap.set(mainType, null);\n      componentsCount.set(mainType, 0);\n      var optionsByMainType = [];\n      var cmptsByMainType = [];\n      var cmptsCountByMainType = 0;\n      var tooltipExists;\n      var tooltipWarningLogged;\n      each(mappingResult, function (resultItem, index) {\n        var componentModel = resultItem.existing;\n        var newCmptOption = resultItem.newOption;\n\n        if (!newCmptOption) {\n          if (componentModel) {\n            // Consider where is no new option and should be merged using {},\n            // see removeEdgeAndAdd in topologicalTravel and\n            // ComponentModel.getAllClassMainTypes.\n            componentModel.mergeOption({}, this);\n            componentModel.optionUpdated({}, false);\n          } // If no both `resultItem.exist` and `resultItem.option`,\n          // either it is in `replaceMerge` and not matched by any id,\n          // or it has been removed in previous `replaceMerge` and left a \"hole\" in this component index.\n\n        } else {\n          var isSeriesType = mainType === 'series';\n          var ComponentModelClass = ComponentModel.getClass(mainType, resultItem.keyInfo.subType, !isSeriesType // Give a more detailed warn later if series don't exists\n          );\n\n          if (!ComponentModelClass) {\n            if (process.env.NODE_ENV !== 'production') {\n              var subType = resultItem.keyInfo.subType;\n              var seriesImportName = BUILTIN_CHARTS_MAP[subType];\n\n              if (!componetsMissingLogPrinted[subType]) {\n                componetsMissingLogPrinted[subType] = true;\n\n                if (seriesImportName) {\n                  error(\"Series \" + subType + \" is used but not imported.\\nimport { \" + seriesImportName + \" } from 'echarts/charts';\\necharts.use([\" + seriesImportName + \"]);\");\n                } else {\n                  error(\"Unkown series \" + subType);\n                }\n              }\n            }\n\n            return;\n          } // TODO Before multiple tooltips get supported, we do this check to avoid unexpected exception.\n\n\n          if (mainType === 'tooltip') {\n            if (tooltipExists) {\n              if (process.env.NODE_ENV !== 'production') {\n                if (!tooltipWarningLogged) {\n                  warn('Currently only one tooltip component is allowed.');\n                  tooltipWarningLogged = true;\n                }\n              }\n\n              return;\n            }\n\n            tooltipExists = true;\n          }\n\n          if (componentModel && componentModel.constructor === ComponentModelClass) {\n            componentModel.name = resultItem.keyInfo.name; // componentModel.settingTask && componentModel.settingTask.dirty();\n\n            componentModel.mergeOption(newCmptOption, this);\n            componentModel.optionUpdated(newCmptOption, false);\n          } else {\n            // PENDING Global as parent ?\n            var extraOpt = extend({\n              componentIndex: index\n            }, resultItem.keyInfo);\n            componentModel = new ComponentModelClass(newCmptOption, this, this, extraOpt); // Assign `keyInfo`\n\n            extend(componentModel, extraOpt);\n\n            if (resultItem.brandNew) {\n              componentModel.__requireNewView = true;\n            }\n\n            componentModel.init(newCmptOption, this, this); // Call optionUpdated after init.\n            // newCmptOption has been used as componentModel.option\n            // and may be merged with theme and default, so pass null\n            // to avoid confusion.\n\n            componentModel.optionUpdated(null, true);\n          }\n        }\n\n        if (componentModel) {\n          optionsByMainType.push(componentModel.option);\n          cmptsByMainType.push(componentModel);\n          cmptsCountByMainType++;\n        } else {\n          // Always do assign to avoid elided item in array.\n          optionsByMainType.push(void 0);\n          cmptsByMainType.push(void 0);\n        }\n      }, this);\n      option[mainType] = optionsByMainType;\n      componentsMap.set(mainType, cmptsByMainType);\n      componentsCount.set(mainType, cmptsCountByMainType); // Backup series for filtering.\n\n      if (mainType === 'series') {\n        reCreateSeriesIndices(this);\n      }\n    } // If no series declared, ensure `_seriesIndices` initialized.\n\n\n    if (!this._seriesIndices) {\n      reCreateSeriesIndices(this);\n    }\n  };\n  /**\n   * Get option for output (cloned option and inner info removed)\n   */\n\n\n  GlobalModel.prototype.getOption = function () {\n    var option = clone(this.option);\n    each(option, function (optInMainType, mainType) {\n      if (ComponentModel.hasClass(mainType)) {\n        var opts = modelUtil.normalizeToArray(optInMainType); // Inner cmpts need to be removed.\n        // Inner cmpts might not be at last since ec5.0, but still\n        // compatible for users: if inner cmpt at last, splice the returned array.\n\n        var realLen = opts.length;\n        var metNonInner = false;\n\n        for (var i = realLen - 1; i >= 0; i--) {\n          // Remove options with inner id.\n          if (opts[i] && !modelUtil.isComponentIdInternal(opts[i])) {\n            metNonInner = true;\n          } else {\n            opts[i] = null;\n            !metNonInner && realLen--;\n          }\n        }\n\n        opts.length = realLen;\n        option[mainType] = opts;\n      }\n    });\n    delete option[OPTION_INNER_KEY];\n    return option;\n  };\n\n  GlobalModel.prototype.getTheme = function () {\n    return this._theme;\n  };\n\n  GlobalModel.prototype.getLocaleModel = function () {\n    return this._locale;\n  };\n\n  GlobalModel.prototype.setUpdatePayload = function (payload) {\n    this._payload = payload;\n  };\n\n  GlobalModel.prototype.getUpdatePayload = function () {\n    return this._payload;\n  };\n  /**\n   * @param idx If not specified, return the first one.\n   */\n\n\n  GlobalModel.prototype.getComponent = function (mainType, idx) {\n    var list = this._componentsMap.get(mainType);\n\n    if (list) {\n      var cmpt = list[idx || 0];\n\n      if (cmpt) {\n        return cmpt;\n      } else if (idx == null) {\n        for (var i = 0; i < list.length; i++) {\n          if (list[i]) {\n            return list[i];\n          }\n        }\n      }\n    }\n  };\n  /**\n   * @return Never be null/undefined.\n   */\n\n\n  GlobalModel.prototype.queryComponents = function (condition) {\n    var mainType = condition.mainType;\n\n    if (!mainType) {\n      return [];\n    }\n\n    var index = condition.index;\n    var id = condition.id;\n    var name = condition.name;\n\n    var cmpts = this._componentsMap.get(mainType);\n\n    if (!cmpts || !cmpts.length) {\n      return [];\n    }\n\n    var result;\n\n    if (index != null) {\n      result = [];\n      each(modelUtil.normalizeToArray(index), function (idx) {\n        cmpts[idx] && result.push(cmpts[idx]);\n      });\n    } else if (id != null) {\n      result = queryByIdOrName('id', id, cmpts);\n    } else if (name != null) {\n      result = queryByIdOrName('name', name, cmpts);\n    } else {\n      // Return all non-empty components in that mainType\n      result = filter(cmpts, function (cmpt) {\n        return !!cmpt;\n      });\n    }\n\n    return filterBySubType(result, condition);\n  };\n  /**\n   * The interface is different from queryComponents,\n   * which is convenient for inner usage.\n   *\n   * @usage\n   * let result = findComponents(\n   *     {mainType: 'dataZoom', query: {dataZoomId: 'abc'}}\n   * );\n   * let result = findComponents(\n   *     {mainType: 'series', subType: 'pie', query: {seriesName: 'uio'}}\n   * );\n   * let result = findComponents(\n   *     {mainType: 'series',\n   *     filter: function (model, index) {...}}\n   * );\n   * // result like [component0, componnet1, ...]\n   */\n\n\n  GlobalModel.prototype.findComponents = function (condition) {\n    var query = condition.query;\n    var mainType = condition.mainType;\n    var queryCond = getQueryCond(query);\n    var result = queryCond ? this.queryComponents(queryCond) // Retrieve all non-empty components.\n    : filter(this._componentsMap.get(mainType), function (cmpt) {\n      return !!cmpt;\n    });\n    return doFilter(filterBySubType(result, condition));\n\n    function getQueryCond(q) {\n      var indexAttr = mainType + 'Index';\n      var idAttr = mainType + 'Id';\n      var nameAttr = mainType + 'Name';\n      return q && (q[indexAttr] != null || q[idAttr] != null || q[nameAttr] != null) ? {\n        mainType: mainType,\n        // subType will be filtered finally.\n        index: q[indexAttr],\n        id: q[idAttr],\n        name: q[nameAttr]\n      } : null;\n    }\n\n    function doFilter(res) {\n      return condition.filter ? filter(res, condition.filter) : res;\n    }\n  };\n\n  GlobalModel.prototype.eachComponent = function (mainType, cb, context) {\n    var componentsMap = this._componentsMap;\n\n    if (isFunction(mainType)) {\n      var ctxForAll_1 = cb;\n      var cbForAll_1 = mainType;\n      componentsMap.each(function (cmpts, componentType) {\n        for (var i = 0; cmpts && i < cmpts.length; i++) {\n          var cmpt = cmpts[i];\n          cmpt && cbForAll_1.call(ctxForAll_1, componentType, cmpt, cmpt.componentIndex);\n        }\n      });\n    } else {\n      var cmpts = isString(mainType) ? componentsMap.get(mainType) : isObject(mainType) ? this.findComponents(mainType) : null;\n\n      for (var i = 0; cmpts && i < cmpts.length; i++) {\n        var cmpt = cmpts[i];\n        cmpt && cb.call(context, cmpt, cmpt.componentIndex);\n      }\n    }\n  };\n  /**\n   * Get series list before filtered by name.\n   */\n\n\n  GlobalModel.prototype.getSeriesByName = function (name) {\n    var nameStr = modelUtil.convertOptionIdName(name, null);\n    return filter(this._componentsMap.get('series'), function (oneSeries) {\n      return !!oneSeries && nameStr != null && oneSeries.name === nameStr;\n    });\n  };\n  /**\n   * Get series list before filtered by index.\n   */\n\n\n  GlobalModel.prototype.getSeriesByIndex = function (seriesIndex) {\n    return this._componentsMap.get('series')[seriesIndex];\n  };\n  /**\n   * Get series list before filtered by type.\n   * FIXME: rename to getRawSeriesByType?\n   */\n\n\n  GlobalModel.prototype.getSeriesByType = function (subType) {\n    return filter(this._componentsMap.get('series'), function (oneSeries) {\n      return !!oneSeries && oneSeries.subType === subType;\n    });\n  };\n  /**\n   * Get all series before filtered.\n   */\n\n\n  GlobalModel.prototype.getSeries = function () {\n    return filter(this._componentsMap.get('series'), function (oneSeries) {\n      return !!oneSeries;\n    });\n  };\n  /**\n   * Count series before filtered.\n   */\n\n\n  GlobalModel.prototype.getSeriesCount = function () {\n    return this._componentsCount.get('series');\n  };\n  /**\n   * After filtering, series may be different\n   * frome raw series.\n   */\n\n\n  GlobalModel.prototype.eachSeries = function (cb, context) {\n    assertSeriesInitialized(this);\n    each(this._seriesIndices, function (rawSeriesIndex) {\n      var series = this._componentsMap.get('series')[rawSeriesIndex];\n\n      cb.call(context, series, rawSeriesIndex);\n    }, this);\n  };\n  /**\n   * Iterate raw series before filtered.\n   *\n   * @param {Function} cb\n   * @param {*} context\n   */\n\n\n  GlobalModel.prototype.eachRawSeries = function (cb, context) {\n    each(this._componentsMap.get('series'), function (series) {\n      series && cb.call(context, series, series.componentIndex);\n    });\n  };\n  /**\n   * After filtering, series may be different.\n   * frome raw series.\n   */\n\n\n  GlobalModel.prototype.eachSeriesByType = function (subType, cb, context) {\n    assertSeriesInitialized(this);\n    each(this._seriesIndices, function (rawSeriesIndex) {\n      var series = this._componentsMap.get('series')[rawSeriesIndex];\n\n      if (series.subType === subType) {\n        cb.call(context, series, rawSeriesIndex);\n      }\n    }, this);\n  };\n  /**\n   * Iterate raw series before filtered of given type.\n   */\n\n\n  GlobalModel.prototype.eachRawSeriesByType = function (subType, cb, context) {\n    return each(this.getSeriesByType(subType), cb, context);\n  };\n\n  GlobalModel.prototype.isSeriesFiltered = function (seriesModel) {\n    assertSeriesInitialized(this);\n    return this._seriesIndicesMap.get(seriesModel.componentIndex) == null;\n  };\n\n  GlobalModel.prototype.getCurrentSeriesIndices = function () {\n    return (this._seriesIndices || []).slice();\n  };\n\n  GlobalModel.prototype.filterSeries = function (cb, context) {\n    assertSeriesInitialized(this);\n    var newSeriesIndices = [];\n    each(this._seriesIndices, function (seriesRawIdx) {\n      var series = this._componentsMap.get('series')[seriesRawIdx];\n\n      cb.call(context, series, seriesRawIdx) && newSeriesIndices.push(seriesRawIdx);\n    }, this);\n    this._seriesIndices = newSeriesIndices;\n    this._seriesIndicesMap = createHashMap(newSeriesIndices);\n  };\n\n  GlobalModel.prototype.restoreData = function (payload) {\n    reCreateSeriesIndices(this);\n    var componentsMap = this._componentsMap;\n    var componentTypes = [];\n    componentsMap.each(function (components, componentType) {\n      if (ComponentModel.hasClass(componentType)) {\n        componentTypes.push(componentType);\n      }\n    });\n    ComponentModel.topologicalTravel(componentTypes, ComponentModel.getAllClassMainTypes(), function (componentType) {\n      each(componentsMap.get(componentType), function (component) {\n        if (component && (componentType !== 'series' || !isNotTargetSeries(component, payload))) {\n          component.restoreData();\n        }\n      });\n    });\n  };\n\n  GlobalModel.internalField = function () {\n    reCreateSeriesIndices = function (ecModel) {\n      var seriesIndices = ecModel._seriesIndices = [];\n      each(ecModel._componentsMap.get('series'), function (series) {\n        // series may have been removed by `replaceMerge`.\n        series && seriesIndices.push(series.componentIndex);\n      });\n      ecModel._seriesIndicesMap = createHashMap(seriesIndices);\n    };\n\n    assertSeriesInitialized = function (ecModel) {\n      // Components that use _seriesIndices should depends on series component,\n      // which make sure that their initialization is after series.\n      if (process.env.NODE_ENV !== 'production') {\n        if (!ecModel._seriesIndices) {\n          throw new Error('Option should contains series.');\n        }\n      }\n    };\n\n    initBase = function (ecModel, baseOption) {\n      // Using OPTION_INNER_KEY to mark that this option can not be used outside,\n      // i.e. `chart.setOption(chart.getModel().option);` is forbiden.\n      ecModel.option = {};\n      ecModel.option[OPTION_INNER_KEY] = OPTION_INNER_VALUE; // Init with series: [], in case of calling findSeries method\n      // before series initialized.\n\n      ecModel._componentsMap = createHashMap({\n        series: []\n      });\n      ecModel._componentsCount = createHashMap(); // If user spefied `option.aria`, aria will be enable. This detection should be\n      // performed before theme and globalDefault merge.\n\n      var airaOption = baseOption.aria;\n\n      if (isObject(airaOption) && airaOption.enabled == null) {\n        airaOption.enabled = true;\n      }\n\n      mergeTheme(baseOption, ecModel._theme.option); // TODO Needs clone when merging to the unexisted property\n\n      merge(baseOption, globalDefault, false);\n\n      ecModel._mergeOption(baseOption, null);\n    };\n  }();\n\n  return GlobalModel;\n}(Model);\n\nfunction isNotTargetSeries(seriesModel, payload) {\n  if (payload) {\n    var index = payload.seriesIndex;\n    var id = payload.seriesId;\n    var name_1 = payload.seriesName;\n    return index != null && seriesModel.componentIndex !== index || id != null && seriesModel.id !== id || name_1 != null && seriesModel.name !== name_1;\n  }\n}\n\nfunction mergeTheme(option, theme) {\n  // PENDING\n  // NOT use `colorLayer` in theme if option has `color`\n  var notMergeColorLayer = option.color && !option.colorLayer;\n  each(theme, function (themeItem, name) {\n    if (name === 'colorLayer' && notMergeColorLayer) {\n      return;\n    } // If it is component model mainType, the model handles that merge later.\n    // otherwise, merge them here.\n\n\n    if (!ComponentModel.hasClass(name)) {\n      if (typeof themeItem === 'object') {\n        option[name] = !option[name] ? clone(themeItem) : merge(option[name], themeItem, false);\n      } else {\n        if (option[name] == null) {\n          option[name] = themeItem;\n        }\n      }\n    }\n  });\n}\n\nfunction queryByIdOrName(attr, idOrName, cmpts) {\n  // Here is a break from echarts4: string and number are\n  // treated as equal.\n  if (isArray(idOrName)) {\n    var keyMap_1 = createHashMap();\n    each(idOrName, function (idOrNameItem) {\n      if (idOrNameItem != null) {\n        var idName = modelUtil.convertOptionIdName(idOrNameItem, null);\n        idName != null && keyMap_1.set(idOrNameItem, true);\n      }\n    });\n    return filter(cmpts, function (cmpt) {\n      return cmpt && keyMap_1.get(cmpt[attr]);\n    });\n  } else {\n    var idName_1 = modelUtil.convertOptionIdName(idOrName, null);\n    return filter(cmpts, function (cmpt) {\n      return cmpt && idName_1 != null && cmpt[attr] === idName_1;\n    });\n  }\n}\n\nfunction filterBySubType(components, condition) {\n  // Using hasOwnProperty for restrict. Consider\n  // subType is undefined in user payload.\n  return condition.hasOwnProperty('subType') ? filter(components, function (cmpt) {\n    return cmpt && cmpt.subType === condition.subType;\n  }) : components;\n}\n\nfunction normalizeSetOptionInput(opts) {\n  var replaceMergeMainTypeMap = createHashMap();\n  opts && each(modelUtil.normalizeToArray(opts.replaceMerge), function (mainType) {\n    if (process.env.NODE_ENV !== 'production') {\n      assert(ComponentModel.hasClass(mainType), '\"' + mainType + '\" is not valid component main type in \"replaceMerge\"');\n    }\n\n    replaceMergeMainTypeMap.set(mainType, true);\n  });\n  return {\n    replaceMergeMainTypeMap: replaceMergeMainTypeMap\n  };\n}\n\nmixin(GlobalModel, PaletteMixin);\nexport default GlobalModel;"],"names":["inner","makeInner","ComponentModel","_super","option","parentModel","ecModel","_this","call","this","uid","componentUtil","proto","__extends","prototype","init","mergeDefaultAndTheme","layoutMode","layout","inputPositionParams","themeModel","getTheme","zrUtil","get","mainType","getDefaultOption","mergeOption","optionUpdated","newCptOption","isInit","ctor","constructor","isExtendedClass","defaultOption","fields","optList","clz","opt","push","superClass","i","length","getReferringComponents","indexKey","idKey","queryReferringComponents","index","id","getBoxLayoutParams","boxLayoutModel","left","top","right","bottom","width","height","getZLevelKey","setZLevel","zlevel","protoInitialize","type","name","subType","componentIndex","Model","mountExtend","enableClassManagement","componentType","deps","getClassesByMainType","concat","dependencies","parseClassType","main","unshift","reCreateSeriesIndices","assertSeriesInitialized","initBase","GlobalModel","apply","arguments","theme","locale","optionManager","_theme","_locale","_optionManager","setOption","opts","optionPreprocessorFuncs","innerOpt","normalizeSetOptionInput","_resetOption","resetOption","optionChanged","baseOption","mountOption","restoreData","_mergeOption","timelineOption","getTimelineOption","mediaOptions","getMediaOption","each","mediaOption","newOption","componentsMap","_componentsMap","componentsCount","_componentsCount","newCmptTypes","newCmptTypeMap","createHashMap","replaceMergeMainTypeMap","resetSourceDefaulter","componentOption","set","clone","merge","val","mainTypeInReplaceMerge","newCmptOptionList","concatInternalOptions","modelUtil","oldCmptList","mergeMode","mappingResult","tooltipExists","optionsByMainType","cmptsByMainType","cmptsCountByMainType","resultItem","componentModel","existing","newCmptOption","isSeriesType","ComponentModelClass","keyInfo","extraOpt","extend","brandNew","__requireNewView","_seriesIndices","getOption","optInMainType","realLen","metNonInner","OPTION_INNER_KEY","getLocaleModel","setUpdatePayload","payload","_payload","getUpdatePayload","getComponent","idx","list","cmpt","queryComponents","condition","result","cmpts","queryByIdOrName","filter","filterBySubType","findComponents","q","indexAttr","idAttr","nameAttr","res","query","queryCond","eachComponent","cb","context","isFunction","ctxForAll_1","cbForAll_1","isString","isObject","getSeriesByName","nameStr","oneSeries","getSeriesByIndex","seriesIndex","getSeriesByType","getSeries","getSeriesCount","eachSeries","rawSeriesIndex","series","eachRawSeries","eachSeriesByType","eachRawSeriesByType","isSeriesFiltered","seriesModel","_seriesIndicesMap","getCurrentSeriesIndices","slice","filterSeries","newSeriesIndices","seriesRawIdx","componentTypes","components","component","seriesId","name_1","seriesName","isNotTargetSeries","internalField","seriesIndices","notMergeColorLayer","airaOption","aria","enabled","color","colorLayer","themeItem","globalDefault","attr","idOrName","isArray","keyMap_1","idOrNameItem","idName_1","hasOwnProperty","replaceMerge","mixin","PaletteMixin"],"sourceRoot":""}