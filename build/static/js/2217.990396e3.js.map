{"version":3,"file":"static/js/2217.990396e3.js","mappings":"sTAiDIA,EAGF,SAAoBC,GAClBC,KAAKC,KAAOF,EAAOE,OAASF,EAAOG,eAAiBC,EAAAA,GAA8B,CAAC,EAAI,IACvFH,KAAKE,aAAeH,EAAOG,cAAgBE,EAAAA,GAE3CJ,KAAKK,eAAiBN,EAAOM,gBAAkBC,EAAAA,GAC/CN,KAAKO,WAAaR,EAAOQ,YAAc,EACvCP,KAAKQ,wBAA0BT,EAAOS,wBACtCR,KAAKS,cAAgBV,EAAOU,cAC5B,IAAIC,EAAmBV,KAAKU,iBAAmBX,EAAOW,iBAEtD,GAAIA,EACF,IAAK,IAAIC,EAAI,EAAGA,EAAID,EAAiBE,OAAQD,IAAK,CAChD,IAAIE,EAAMH,EAAiBC,GAEX,MAAZE,EAAIC,OACFC,EAAAA,EAAAA,IAAaf,KAAMW,KAAOK,EAAAA,GAAAA,OAC5BH,EAAIC,KAAO,UAGjB,CAEJ,EAKK,SAASG,EAAiBC,GAC/B,OAAOA,aAAepB,CACxB,CAMO,SAASqB,EAAaC,EAAYC,EACzCnB,GACEA,EAAeA,GAAgBoB,EAAmBF,GAClD,IAAIf,EAAiBgB,EAAkBhB,eACnCkB,EAgFN,SAAmCtB,EAAMC,EAAcG,EAAgBmB,EAKvEd,GACE,IAAIF,EACAD,EAKJ,IAAKN,EACH,MAAO,CACLS,iBAAkBe,EAA0Bf,GAC5CH,WAAYA,EACZC,wBAAyBA,GAI7B,GAAIN,IAAiBwB,EAAAA,GAA0B,CAC7C,IAAIC,EAAgB1B,EAKC,SAAjBuB,GAA2C,MAAhBA,EAC7BI,GAAqB,SAAUV,GAElB,MAAPA,GAAuB,MAARA,KACbW,EAAAA,EAAAA,IAASX,GACG,MAAdX,IAAuBA,EAAa,GAEpCA,EAAa,EAInB,GAAGF,EAAgBsB,EAAe,IAElCpB,GAAauB,EAAAA,EAAAA,IAASN,GAAgBA,EAAeA,EAAe,EAAI,EAGrEd,GAAmC,IAAfH,IACvBG,EAAmB,GACnBkB,GAAqB,SAAUV,EAAKa,GAClCrB,EAAiBqB,GAAgB,MAAPb,EAAcA,EAAM,GAAK,EACrD,GAAGb,EAAgBsB,EAAeK,MAGpCxB,EAA0BE,EAAmBA,EAAiBE,OAASP,IAAmB4B,EAAAA,GAAuBN,EAAcf,OAASe,EAAc,GAAKA,EAAc,GAAGf,OAAS,IACvL,MAAO,GAAIV,IAAiBgC,EAAAA,GACrBxB,IACHA,EAyBN,SAAqCT,GAInC,IAHA,IACIkC,EADAC,EAAa,EAGVA,EAAanC,EAAKW,UAAYuB,EAAMlC,EAAKmC,QAGhD,GAAID,EAAK,CACP,IAAIE,EAAe,GAInB,OAHAC,EAAAA,EAAAA,IAAKH,GAAK,SAAUI,EAAOC,GACzBH,EAAaI,KAAKD,EACpB,IACOH,CACT,CACF,CAvCyBK,CAA4BzC,SAE5C,GAAIC,IAAiBC,EAAAA,GACrBO,IACHA,EAAmB,IACnB4B,EAAAA,EAAAA,IAAKrC,GAAM,SAAU0C,EAAQH,GAC3B9B,EAAiB+B,KAAKD,EACxB,UAEG,GAAItC,IAAiB0C,EAAAA,GAAwB,CAClD,IAAIC,GAASC,EAAAA,EAAAA,IAAiB7C,EAAK,IACnCO,GAA0BuC,EAAAA,EAAAA,IAAQF,IAAWA,EAAOjC,QAAU,CAChE,MAA4BoC,EAAAA,GAM5B,MAAO,CACLzC,WAAYA,EACZG,iBAAkBe,EAA0Bf,GAC5CF,wBAAyBA,EAE7B,CA3JmByC,CAA0B7B,EAAYlB,EAAcG,EAAgBgB,EAAkBG,aAAcH,EAAkB6B,YAUvI,OATa,IAAIpD,EAAW,CAC1BG,KAAMmB,EACNlB,aAAcA,EACdG,eAAgBA,EAChBK,iBAAkBa,EAAWb,iBAC7BH,WAAYgB,EAAWhB,WACvBC,wBAAyBe,EAAWf,wBACpCC,eAAe0C,EAAAA,EAAAA,IAAM9B,IAGzB,CAKO,SAAS+B,EAAiCnD,GAC/C,OAAO,IAAIH,EAAW,CACpBG,KAAMA,EACNC,cAAcmD,EAAAA,EAAAA,IAAapD,GAAQ+C,EAAAA,GAA4BJ,EAAAA,IAEnE,CAKO,SAASU,EAAmBC,GACjC,OAAO,IAAIzD,EAAW,CACpBG,KAAMsD,EAAOtD,KACbC,aAAcqD,EAAOrD,aACrBG,eAAgBkD,EAAOlD,eACvBK,kBAAkByC,EAAAA,EAAAA,IAAMI,EAAO7C,kBAC/BH,WAAYgD,EAAOhD,WACnBC,wBAAyB+C,EAAO/C,yBAEpC,CAKO,SAASc,EAAmBrB,GACjC,IAAIC,EAAeE,EAAAA,GAEnB,IAAIiD,EAAAA,EAAAA,IAAapD,GACfC,EAAe8C,EAAAA,QACV,IAAID,EAAAA,EAAAA,IAAQ9C,GAAO,CAEJ,IAAhBA,EAAKW,SACPV,EAAewB,EAAAA,IAGjB,IAAK,IAAIf,EAAI,EAAG6C,EAAMvD,EAAKW,OAAQD,EAAI6C,EAAK7C,IAAK,CAC/C,IAAI8C,EAAOxD,EAAKU,GAEhB,GAAY,MAAR8C,EAAJ,CAEO,IAAIV,EAAAA,EAAAA,IAAQU,GAAO,CACxBvD,EAAewB,EAAAA,GACf,KACF,CAAO,IAAIgC,EAAAA,EAAAA,IAASD,GAAO,CACzBvD,EAAegC,EAAAA,GACf,KACF,EACF,CACF,MAAO,IAAIwB,EAAAA,EAAAA,IAASzD,GAClB,IAAK,IAAIuC,KAAOvC,EACd,IAAI0D,EAAAA,EAAAA,IAAO1D,EAAMuC,KAAQoB,EAAAA,EAAAA,IAAY3D,EAAKuC,IAAO,CAC/CtC,EAAeC,EAAAA,GACf,KACF,CAIJ,OAAOD,CACT,CAsGA,SAASuB,EAA0Bf,GACjC,GAAKA,EAAL,CAKA,IAAImD,GAAUC,EAAAA,EAAAA,MACd,OAAOC,EAAAA,EAAAA,IAAIrD,GAAkB,SAAUsD,EAASjC,GAK9C,IAAI0B,EAAO,CACTQ,MALFD,GAAUN,EAAAA,EAAAA,IAASM,GAAWA,EAAU,CACtCC,KAAMD,IAIQC,KACdC,YAAaF,EAAQE,YACrBpD,KAAMkD,EAAQlD,MAKhB,GAAiB,MAAb2C,EAAKQ,KACP,OAAOR,EAITA,EAAKQ,MAAQ,GAMW,MAApBR,EAAKS,cACPT,EAAKS,YAAcT,EAAKQ,MAG1B,IAAIE,EAAQN,EAAQO,IAAIX,EAAKQ,MAU7B,OARKE,EAKHV,EAAKQ,MAAQ,IAAME,EAAME,QAJzBR,EAAQS,IAAIb,EAAKQ,KAAM,CACrBI,MAAO,IAMJZ,CACT,GA1CA,CA2CF,CAEA,SAAS7B,EAAqB2C,EAAIlE,EAAgBJ,EAAMuE,GACtD,GAAInE,IAAmB4B,EAAAA,GACrB,IAAK,IAAItB,EAAI,EAAGA,EAAIV,EAAKW,QAAUD,EAAI6D,EAAS7D,IAC9C4D,EAAGtE,EAAKU,GAAKV,EAAKU,GAAG,GAAK,KAAMA,OAGlC,KAAIkC,EAAS5C,EAAK,IAAM,GAExB,IAASU,EAAI,EAAGA,EAAIkC,EAAOjC,QAAUD,EAAI6D,EAAS7D,IAChD4D,EAAG1B,EAAOlC,GAAIA,EAHU,CAM9B,CAEO,SAAS8D,EAAyBlB,GACvC,IAAIrD,EAAeqD,EAAOrD,aAC1B,OAAOA,IAAiBgC,EAAAA,IAA6BhC,IAAiBC,EAAAA,EACxE,C,mFCvRIuE,EAEJ,WACE,SAASA,EAAST,EAAMU,GACtB3E,KAAK4E,MAAQ,EACb5E,KAAK6E,OAAS,EASd7E,KAAK8E,WAAa,EAClB9E,KAAK+E,SAAW,GAChB/E,KAAKgF,aAAe,GACpBhF,KAAKiF,UAAW,EAChBjF,KAAKiE,KAAOA,GAAQ,GACpBjE,KAAK2E,SAAWA,CAClB,CAwOA,OAlOAD,EAASQ,UAAUC,UAAY,WAC7B,OAAOnF,KAAK8E,UAAY,CAC1B,EAEAJ,EAASQ,UAAUE,SAAW,SAAUC,EAASd,EAAIe,GAC/CC,EAAAA,GAAkBF,KACpBC,EAAUf,EACVA,EAAKc,EACLA,EAAU,MAGZA,EAAUA,GAAW,CAAC,EAElBE,EAAAA,GAAgBF,KAClBA,EAAU,CACRG,MAAOH,IAIX,IAEII,EAFAD,EAAQH,EAAQG,OAAS,WACzBT,EAAW/E,KAAKqF,EAAQK,MAAQ,YAE1B,aAAVF,IAAyBC,EAAmBlB,EAAGoB,KAAKL,EAAStF,OAE7D,IAAK,IAAIW,EAAI,GAAI8E,GAAoB9E,EAAIoE,EAASnE,OAAQD,IACxDoE,EAASpE,GAAGyE,SAASC,EAASd,EAAIe,GAG1B,cAAVE,GAAyBjB,EAAGoB,KAAKL,EAAStF,KAC5C,EAMA0E,EAASQ,UAAUU,qBAAuB,SAAUhB,GAClD,IAAIC,EAAS,EACb7E,KAAK4E,MAAQA,EAEb,IAAK,IAAIjE,EAAI,EAAGA,EAAIX,KAAK+E,SAASnE,OAAQD,IAAK,CAC7C,IAAIkF,EAAQ7F,KAAK+E,SAASpE,GAC1BkF,EAAMD,qBAAqBhB,EAAQ,GAE/BiB,EAAMhB,OAASA,IACjBA,EAASgB,EAAMhB,OAEnB,CAEA7E,KAAK6E,OAASA,EAAS,CACzB,EAEAH,EAASQ,UAAUY,YAAc,SAAUC,GACzC,GAAI/F,KAAKgG,UAAYD,EACnB,OAAO/F,KAGT,IAAK,IAAIW,EAAI,EAAGoE,EAAW/E,KAAK+E,SAAUvB,EAAMuB,EAASnE,OAAQD,EAAI6C,EAAK7C,IAAK,CAC7E,IAAIsF,EAAMlB,EAASpE,GAAGmF,YAAYC,GAElC,GAAIE,EACF,OAAOA,CAEX,CACF,EAEAvB,EAASQ,UAAUgB,SAAW,SAAUC,GACtC,GAAIA,IAASnG,KACX,OAAO,EAGT,IAAK,IAAIW,EAAI,EAAGoE,EAAW/E,KAAK+E,SAAUvB,EAAMuB,EAASnE,OAAQD,EAAI6C,EAAK7C,IAAK,CAC7E,IAAIsF,EAAMlB,EAASpE,GAAGuF,SAASC,GAE/B,GAAIF,EACF,OAAOA,CAEX,CACF,EAOAvB,EAASQ,UAAUkB,aAAe,SAAUC,GAI1C,IAHA,IAAIC,EAAY,GACZH,EAAOE,EAAcrG,KAAOA,KAAKuG,WAE9BJ,GACLG,EAAU7D,KAAK0D,GACfA,EAAOA,EAAKI,WAId,OADAD,EAAUE,UACHF,CACT,EAEA5B,EAASQ,UAAUuB,oBAAsB,WAIvC,IAHA,IAAIC,EAAU,GACVC,EAAW3G,KAER2G,GACLD,EAAQjE,KAAKkE,EAAS7B,WACtB6B,EAAWA,EAASJ,WAItB,OADAG,EAAQF,UACDE,CACT,EAEAhC,EAASQ,UAAU0B,qBAAuB,WACxC,IAAIF,EAAU,GAId,OAHA1G,KAAKoF,UAAS,SAAUyB,GACtBH,EAAQjE,KAAKoE,EAAU/B,UACzB,IACO4B,CACT,EAEAhC,EAASQ,UAAU4B,SAAW,SAAUC,GACtC,IAAI9G,EAAOD,KAAK2E,SAAS1E,KACzB,OAAOA,EAAK+G,WAAW5C,IAAInE,EAAKgH,kBAAkBF,GAAa,SAAU/G,KAAK8E,UAChF,EAEAJ,EAASQ,UAAUgC,UAAY,SAAUC,EAAQC,GAC/CpH,KAAK8E,WAAa,GAAK9E,KAAK2E,SAAS1E,KAAKoH,cAAcrH,KAAK8E,UAAWqC,EAAQC,EAClF,EAMA1C,EAASQ,UAAUoC,UAAY,WAC7B,OAAOtH,KAAK2E,SAAS1E,KAAKsH,cAAcvH,KAAK8E,UAC/C,EAKAJ,EAASQ,UAAUsC,SAAW,SAAUC,GACtC,KAAIzH,KAAK8E,UAAY,GAMrB,OAFe9E,KAAK2E,SACK1E,KAAKyH,aAAa1H,KAAK8E,WAC/B0C,SAASC,EAC5B,EAGA/C,EAASQ,UAAUyC,cAAgB,WACjC,OAAQ3H,KAAK2E,SAASiD,aAAe,IAAI5H,KAAK4E,MAChD,EAEAF,EAASQ,UAAU2C,UAAY,SAAUrF,EAAKD,GAC5CvC,KAAK8E,WAAa,GAAK9E,KAAK2E,SAAS1E,KAAK6H,cAAc9H,KAAK8E,UAAWtC,EAAKD,EAC/E,EAOAmC,EAASQ,UAAU6C,UAAY,SAAUvF,GACvC,OAAOxC,KAAK2E,SAAS1E,KAAK+H,cAAchI,KAAK8E,UAAWtC,EAC1D,EAEAkC,EAASQ,UAAU+C,YAAc,WAC/B,OAAOjI,KAAK2E,SAAS1E,KAAKgI,YAAYjI,KAAK8E,UAC7C,EAEAJ,EAASQ,UAAUc,MAAQ,WACzB,OAAOhG,KAAK2E,SAAS1E,KAAK+F,MAAMhG,KAAK8E,UACvC,EAMAJ,EAASQ,UAAUgD,cAAgB,WACjC,GAAIlI,KAAKuG,WAAY,CAGnB,IAFA,IAAIxB,EAAW/E,KAAKuG,WAAWxB,SAEtBpE,EAAI,EAAGA,EAAIoE,EAASnE,SAAUD,EACrC,GAAIoE,EAASpE,KAAOX,KAClB,OAAOW,EAIX,OAAQ,CACV,CAEA,OAAQ,CACV,EASA+D,EAASQ,UAAUiD,aAAe,SAAUhC,GAG1C,IAFA,IAAIiC,EAASjC,EAAKI,WAEX6B,GAAQ,CACb,GAAIA,IAAWpI,KACb,OAAO,EAGToI,EAASA,EAAO7B,UAClB,CAEA,OAAO,CACT,EASA7B,EAASQ,UAAUmD,eAAiB,SAAUlC,GAC5C,OAAOA,IAASnG,MAAQmG,EAAKgC,aAAanI,KAC5C,EAEO0E,CACT,CA3PA,GAgQI4D,EAEJ,WACE,SAASA,EAAKC,GACZvI,KAAKc,KAAO,OACZd,KAAKwI,OAAS,GACdxI,KAAKuI,UAAYA,CACnB,CAkGA,OAhGAD,EAAKpD,UAAUE,SAAW,SAAUC,EAASd,EAAIe,GAC/CtF,KAAKyI,KAAKrD,SAASC,EAASd,EAAIe,EAClC,EAEAgD,EAAKpD,UAAUwD,mBAAqB,SAAU5D,GAC5C,IAAI6D,EAAW3I,KAAKC,KAAKgI,YAAYnD,GACrC,OAAO9E,KAAKwI,OAAOG,EACrB,EAEAL,EAAKpD,UAAUY,YAAc,SAAU7B,GACrC,OAAOjE,KAAKyI,KAAK3C,YAAY7B,EAC/B,EAOAqE,EAAKpD,UAAU0D,OAAS,WAItB,IAHA,IAAI3I,EAAOD,KAAKC,KACZ4I,EAAQ7I,KAAKwI,OAER7H,EAAI,EAAG6C,EAAMqF,EAAMjI,OAAQD,EAAI6C,EAAK7C,IAC3CkI,EAAMlI,GAAGmE,WAAa,EAGxB,IAASnE,EAAI,EAAG6C,EAAMvD,EAAKoE,QAAS1D,EAAI6C,EAAK7C,IAC3CkI,EAAM5I,EAAKgI,YAAYtH,IAAImE,UAAYnE,CAE3C,EAMA2H,EAAKpD,UAAU4D,aAAe,WAC5B9I,KAAKC,KAAK8I,kBACZ,EAkBAT,EAAKU,WAAa,SAAUC,EAAUV,EAAWW,GAC/C,IAAIC,EAAO,IAAIb,EAAKC,GAChBa,EAAW,GACXC,EAAS,GAGb,SAASC,EAAeC,EAAUhD,GAChC,IAAIhE,EAAQgH,EAAShH,MACrB8G,EAASG,KAAKC,IAAIJ,EAAQ9D,EAAAA,GAAehD,GAASA,EAAM3B,OAAS,GACjEwI,EAAS3G,KAAK8G,GACd,IAAIpD,EAAO,IAAIzB,GAASgF,EAAAA,EAAAA,IAAoBH,EAAStF,KAAM,IAAKkF,GAChE5C,EAsCN,SAAkBV,EAAOM,GACvB,IAAIpB,EAAWoB,EAAKpB,SAEhBc,EAAMU,aAAeJ,IAIzBpB,EAAStC,KAAKoD,GACdA,EAAMU,WAAaJ,EACrB,CA/CmBwD,CAASxD,EAAMI,GAAc4C,EAAKV,KAAOtC,EAEtDgD,EAAKX,OAAO/F,KAAK0D,GAEjB,IAAIpB,EAAWwE,EAASxE,SAExB,GAAIA,EACF,IAAK,IAAIpE,EAAI,EAAGA,EAAIoE,EAASnE,OAAQD,IACnC2I,EAAevE,EAASpE,GAAIwF,EAGlC,CAlBAmD,CAAeL,GAoBfE,EAAKV,KAAK7C,qBAAqB,GAC/B,IAAI1C,GAAa0G,EAAAA,EAAAA,GAAwBR,EAAU,CACjDS,gBAAiB,CAAC,SAClBC,gBAAiBT,IAChBnG,WACC6G,EAAO,IAAIC,EAAAA,EAAW9G,EAAYqF,GAStC,OARAwB,EAAKE,SAASb,GACdF,GAAcA,EAAWa,IACzBG,EAAAA,EAAAA,GAAe,CACbC,SAAUJ,EACVK,OAAQjB,EACRkB,WAAY,SAEdlB,EAAKP,SACEO,CACT,EAEOb,CACT,CAxGA,GA0HA,K","sources":["../node_modules/echarts/lib/data/Source.js","../node_modules/echarts/lib/data/Tree.js"],"sourcesContent":["\n/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\n\n\n/**\n * AUTO-GENERATED FILE. DO NOT MODIFY.\n */\n\n/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\nimport { isTypedArray, clone, createHashMap, isArray, isObject, isArrayLike, hasOwn, assert, each, map, isNumber, isString } from 'zrender/lib/core/util.js';\nimport { SOURCE_FORMAT_ORIGINAL, SERIES_LAYOUT_BY_COLUMN, SOURCE_FORMAT_UNKNOWN, SOURCE_FORMAT_KEYED_COLUMNS, SOURCE_FORMAT_TYPED_ARRAY, SOURCE_FORMAT_ARRAY_ROWS, SOURCE_FORMAT_OBJECT_ROWS, SERIES_LAYOUT_BY_ROW } from '../util/types.js';\nimport { getDataItemValue } from '../util/model.js';\nimport { BE_ORDINAL, guessOrdinal } from './helper/sourceHelper.js';\n; // @inner\n\nvar SourceImpl =\n/** @class */\nfunction () {\n  function SourceImpl(fields) {\n    this.data = fields.data || (fields.sourceFormat === SOURCE_FORMAT_KEYED_COLUMNS ? {} : []);\n    this.sourceFormat = fields.sourceFormat || SOURCE_FORMAT_UNKNOWN; // Visit config\n\n    this.seriesLayoutBy = fields.seriesLayoutBy || SERIES_LAYOUT_BY_COLUMN;\n    this.startIndex = fields.startIndex || 0;\n    this.dimensionsDetectedCount = fields.dimensionsDetectedCount;\n    this.metaRawOption = fields.metaRawOption;\n    var dimensionsDefine = this.dimensionsDefine = fields.dimensionsDefine;\n\n    if (dimensionsDefine) {\n      for (var i = 0; i < dimensionsDefine.length; i++) {\n        var dim = dimensionsDefine[i];\n\n        if (dim.type == null) {\n          if (guessOrdinal(this, i) === BE_ORDINAL.Must) {\n            dim.type = 'ordinal';\n          }\n        }\n      }\n    }\n  }\n\n  return SourceImpl;\n}();\n\nexport function isSourceInstance(val) {\n  return val instanceof SourceImpl;\n}\n/**\n * Create a source from option.\n * NOTE: Created source is immutable. Don't change any properties in it.\n */\n\nexport function createSource(sourceData, thisMetaRawOption, // can be null. If not provided, auto detect it from `sourceData`.\nsourceFormat) {\n  sourceFormat = sourceFormat || detectSourceFormat(sourceData);\n  var seriesLayoutBy = thisMetaRawOption.seriesLayoutBy;\n  var determined = determineSourceDimensions(sourceData, sourceFormat, seriesLayoutBy, thisMetaRawOption.sourceHeader, thisMetaRawOption.dimensions);\n  var source = new SourceImpl({\n    data: sourceData,\n    sourceFormat: sourceFormat,\n    seriesLayoutBy: seriesLayoutBy,\n    dimensionsDefine: determined.dimensionsDefine,\n    startIndex: determined.startIndex,\n    dimensionsDetectedCount: determined.dimensionsDetectedCount,\n    metaRawOption: clone(thisMetaRawOption)\n  });\n  return source;\n}\n/**\n * Wrap original series data for some compatibility cases.\n */\n\nexport function createSourceFromSeriesDataOption(data) {\n  return new SourceImpl({\n    data: data,\n    sourceFormat: isTypedArray(data) ? SOURCE_FORMAT_TYPED_ARRAY : SOURCE_FORMAT_ORIGINAL\n  });\n}\n/**\n * Clone source but excludes source data.\n */\n\nexport function cloneSourceShallow(source) {\n  return new SourceImpl({\n    data: source.data,\n    sourceFormat: source.sourceFormat,\n    seriesLayoutBy: source.seriesLayoutBy,\n    dimensionsDefine: clone(source.dimensionsDefine),\n    startIndex: source.startIndex,\n    dimensionsDetectedCount: source.dimensionsDetectedCount\n  });\n}\n/**\n * Note: An empty array will be detected as `SOURCE_FORMAT_ARRAY_ROWS`.\n */\n\nexport function detectSourceFormat(data) {\n  var sourceFormat = SOURCE_FORMAT_UNKNOWN;\n\n  if (isTypedArray(data)) {\n    sourceFormat = SOURCE_FORMAT_TYPED_ARRAY;\n  } else if (isArray(data)) {\n    // FIXME Whether tolerate null in top level array?\n    if (data.length === 0) {\n      sourceFormat = SOURCE_FORMAT_ARRAY_ROWS;\n    }\n\n    for (var i = 0, len = data.length; i < len; i++) {\n      var item = data[i];\n\n      if (item == null) {\n        continue;\n      } else if (isArray(item)) {\n        sourceFormat = SOURCE_FORMAT_ARRAY_ROWS;\n        break;\n      } else if (isObject(item)) {\n        sourceFormat = SOURCE_FORMAT_OBJECT_ROWS;\n        break;\n      }\n    }\n  } else if (isObject(data)) {\n    for (var key in data) {\n      if (hasOwn(data, key) && isArrayLike(data[key])) {\n        sourceFormat = SOURCE_FORMAT_KEYED_COLUMNS;\n        break;\n      }\n    }\n  }\n\n  return sourceFormat;\n}\n/**\n * Determine the source definitions from data standalone dimensions definitions\n * are not specified.\n */\n\nfunction determineSourceDimensions(data, sourceFormat, seriesLayoutBy, sourceHeader, // standalone raw dimensions definition, like:\n// {\n//     dimensions: ['aa', 'bb', { name: 'cc', type: 'time' }]\n// }\n// in `dataset` or `series`\ndimensionsDefine) {\n  var dimensionsDetectedCount;\n  var startIndex; // PEDING: could data be null/undefined here?\n  // currently, if `dataset.source` not specified, error thrown.\n  // if `series.data` not specified, nothing rendered without error thrown.\n  // Should test these cases.\n\n  if (!data) {\n    return {\n      dimensionsDefine: normalizeDimensionsOption(dimensionsDefine),\n      startIndex: startIndex,\n      dimensionsDetectedCount: dimensionsDetectedCount\n    };\n  }\n\n  if (sourceFormat === SOURCE_FORMAT_ARRAY_ROWS) {\n    var dataArrayRows = data; // Rule: Most of the first line are string: it is header.\n    // Caution: consider a line with 5 string and 1 number,\n    // it still can not be sure it is a head, because the\n    // 5 string may be 5 values of category columns.\n\n    if (sourceHeader === 'auto' || sourceHeader == null) {\n      arrayRowsTravelFirst(function (val) {\n        // '-' is regarded as null/undefined.\n        if (val != null && val !== '-') {\n          if (isString(val)) {\n            startIndex == null && (startIndex = 1);\n          } else {\n            startIndex = 0;\n          }\n        } // 10 is an experience number, avoid long loop.\n\n      }, seriesLayoutBy, dataArrayRows, 10);\n    } else {\n      startIndex = isNumber(sourceHeader) ? sourceHeader : sourceHeader ? 1 : 0;\n    }\n\n    if (!dimensionsDefine && startIndex === 1) {\n      dimensionsDefine = [];\n      arrayRowsTravelFirst(function (val, index) {\n        dimensionsDefine[index] = val != null ? val + '' : '';\n      }, seriesLayoutBy, dataArrayRows, Infinity);\n    }\n\n    dimensionsDetectedCount = dimensionsDefine ? dimensionsDefine.length : seriesLayoutBy === SERIES_LAYOUT_BY_ROW ? dataArrayRows.length : dataArrayRows[0] ? dataArrayRows[0].length : null;\n  } else if (sourceFormat === SOURCE_FORMAT_OBJECT_ROWS) {\n    if (!dimensionsDefine) {\n      dimensionsDefine = objectRowsCollectDimensions(data);\n    }\n  } else if (sourceFormat === SOURCE_FORMAT_KEYED_COLUMNS) {\n    if (!dimensionsDefine) {\n      dimensionsDefine = [];\n      each(data, function (colArr, key) {\n        dimensionsDefine.push(key);\n      });\n    }\n  } else if (sourceFormat === SOURCE_FORMAT_ORIGINAL) {\n    var value0 = getDataItemValue(data[0]);\n    dimensionsDetectedCount = isArray(value0) && value0.length || 1;\n  } else if (sourceFormat === SOURCE_FORMAT_TYPED_ARRAY) {\n    if (process.env.NODE_ENV !== 'production') {\n      assert(!!dimensionsDefine, 'dimensions must be given if data is TypedArray.');\n    }\n  }\n\n  return {\n    startIndex: startIndex,\n    dimensionsDefine: normalizeDimensionsOption(dimensionsDefine),\n    dimensionsDetectedCount: dimensionsDetectedCount\n  };\n}\n\nfunction objectRowsCollectDimensions(data) {\n  var firstIndex = 0;\n  var obj;\n\n  while (firstIndex < data.length && !(obj = data[firstIndex++])) {} // jshint ignore: line\n\n\n  if (obj) {\n    var dimensions_1 = [];\n    each(obj, function (value, key) {\n      dimensions_1.push(key);\n    });\n    return dimensions_1;\n  }\n} // Consider dimensions defined like ['A', 'price', 'B', 'price', 'C', 'price'],\n// which is reasonable. But dimension name is duplicated.\n// Returns undefined or an array contains only object without null/undefiend or string.\n\n\nfunction normalizeDimensionsOption(dimensionsDefine) {\n  if (!dimensionsDefine) {\n    // The meaning of null/undefined is different from empty array.\n    return;\n  }\n\n  var nameMap = createHashMap();\n  return map(dimensionsDefine, function (rawItem, index) {\n    rawItem = isObject(rawItem) ? rawItem : {\n      name: rawItem\n    }; // Other fields will be discarded.\n\n    var item = {\n      name: rawItem.name,\n      displayName: rawItem.displayName,\n      type: rawItem.type\n    }; // User can set null in dimensions.\n    // We dont auto specify name, othewise a given name may\n    // cause it be refered unexpectedly.\n\n    if (item.name == null) {\n      return item;\n    } // Also consider number form like 2012.\n\n\n    item.name += ''; // User may also specify displayName.\n    // displayName will always exists except user not\n    // specified or dim name is not specified or detected.\n    // (A auto generated dim name will not be used as\n    // displayName).\n\n    if (item.displayName == null) {\n      item.displayName = item.name;\n    }\n\n    var exist = nameMap.get(item.name);\n\n    if (!exist) {\n      nameMap.set(item.name, {\n        count: 1\n      });\n    } else {\n      item.name += '-' + exist.count++;\n    }\n\n    return item;\n  });\n}\n\nfunction arrayRowsTravelFirst(cb, seriesLayoutBy, data, maxLoop) {\n  if (seriesLayoutBy === SERIES_LAYOUT_BY_ROW) {\n    for (var i = 0; i < data.length && i < maxLoop; i++) {\n      cb(data[i] ? data[i][0] : null, i);\n    }\n  } else {\n    var value0 = data[0] || [];\n\n    for (var i = 0; i < value0.length && i < maxLoop; i++) {\n      cb(value0[i], i);\n    }\n  }\n}\n\nexport function shouldRetrieveDataByName(source) {\n  var sourceFormat = source.sourceFormat;\n  return sourceFormat === SOURCE_FORMAT_OBJECT_ROWS || sourceFormat === SOURCE_FORMAT_KEYED_COLUMNS;\n}","\n/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\n\n\n/**\n * AUTO-GENERATED FILE. DO NOT MODIFY.\n */\n\n/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\n\n/**\n * Tree data structure\n */\nimport * as zrUtil from 'zrender/lib/core/util.js';\nimport linkSeriesData from './helper/linkSeriesData.js';\nimport SeriesData from './SeriesData.js';\nimport prepareSeriesDataSchema from './helper/createDimensions.js';\nimport { convertOptionIdName } from '../util/model.js';\n\nvar TreeNode =\n/** @class */\nfunction () {\n  function TreeNode(name, hostTree) {\n    this.depth = 0;\n    this.height = 0;\n    /**\n     * Reference to list item.\n     * Do not persistent dataIndex outside,\n     * besause it may be changed by list.\n     * If dataIndex -1,\n     * this node is logical deleted (filtered) in list.\n     */\n\n    this.dataIndex = -1;\n    this.children = [];\n    this.viewChildren = [];\n    this.isExpand = false;\n    this.name = name || '';\n    this.hostTree = hostTree;\n  }\n  /**\n   * The node is removed.\n   */\n\n\n  TreeNode.prototype.isRemoved = function () {\n    return this.dataIndex < 0;\n  };\n\n  TreeNode.prototype.eachNode = function (options, cb, context) {\n    if (zrUtil.isFunction(options)) {\n      context = cb;\n      cb = options;\n      options = null;\n    }\n\n    options = options || {};\n\n    if (zrUtil.isString(options)) {\n      options = {\n        order: options\n      };\n    }\n\n    var order = options.order || 'preorder';\n    var children = this[options.attr || 'children'];\n    var suppressVisitSub;\n    order === 'preorder' && (suppressVisitSub = cb.call(context, this));\n\n    for (var i = 0; !suppressVisitSub && i < children.length; i++) {\n      children[i].eachNode(options, cb, context);\n    }\n\n    order === 'postorder' && cb.call(context, this);\n  };\n  /**\n   * Update depth and height of this subtree.\n   */\n\n\n  TreeNode.prototype.updateDepthAndHeight = function (depth) {\n    var height = 0;\n    this.depth = depth;\n\n    for (var i = 0; i < this.children.length; i++) {\n      var child = this.children[i];\n      child.updateDepthAndHeight(depth + 1);\n\n      if (child.height > height) {\n        height = child.height;\n      }\n    }\n\n    this.height = height + 1;\n  };\n\n  TreeNode.prototype.getNodeById = function (id) {\n    if (this.getId() === id) {\n      return this;\n    }\n\n    for (var i = 0, children = this.children, len = children.length; i < len; i++) {\n      var res = children[i].getNodeById(id);\n\n      if (res) {\n        return res;\n      }\n    }\n  };\n\n  TreeNode.prototype.contains = function (node) {\n    if (node === this) {\n      return true;\n    }\n\n    for (var i = 0, children = this.children, len = children.length; i < len; i++) {\n      var res = children[i].contains(node);\n\n      if (res) {\n        return res;\n      }\n    }\n  };\n  /**\n   * @param includeSelf Default false.\n   * @return order: [root, child, grandchild, ...]\n   */\n\n\n  TreeNode.prototype.getAncestors = function (includeSelf) {\n    var ancestors = [];\n    var node = includeSelf ? this : this.parentNode;\n\n    while (node) {\n      ancestors.push(node);\n      node = node.parentNode;\n    }\n\n    ancestors.reverse();\n    return ancestors;\n  };\n\n  TreeNode.prototype.getAncestorsIndices = function () {\n    var indices = [];\n    var currNode = this;\n\n    while (currNode) {\n      indices.push(currNode.dataIndex);\n      currNode = currNode.parentNode;\n    }\n\n    indices.reverse();\n    return indices;\n  };\n\n  TreeNode.prototype.getDescendantIndices = function () {\n    var indices = [];\n    this.eachNode(function (childNode) {\n      indices.push(childNode.dataIndex);\n    });\n    return indices;\n  };\n\n  TreeNode.prototype.getValue = function (dimension) {\n    var data = this.hostTree.data;\n    return data.getStore().get(data.getDimensionIndex(dimension || 'value'), this.dataIndex);\n  };\n\n  TreeNode.prototype.setLayout = function (layout, merge) {\n    this.dataIndex >= 0 && this.hostTree.data.setItemLayout(this.dataIndex, layout, merge);\n  };\n  /**\n   * @return {Object} layout\n   */\n\n\n  TreeNode.prototype.getLayout = function () {\n    return this.hostTree.data.getItemLayout(this.dataIndex);\n  }; // @depcrecated\n  // getModel<T = unknown, S extends keyof T = keyof T>(path: S): Model<T[S]>\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n\n\n  TreeNode.prototype.getModel = function (path) {\n    if (this.dataIndex < 0) {\n      return;\n    }\n\n    var hostTree = this.hostTree;\n    var itemModel = hostTree.data.getItemModel(this.dataIndex);\n    return itemModel.getModel(path);\n  }; // TODO: TYPE More specific model\n\n\n  TreeNode.prototype.getLevelModel = function () {\n    return (this.hostTree.levelModels || [])[this.depth];\n  };\n\n  TreeNode.prototype.setVisual = function (key, value) {\n    this.dataIndex >= 0 && this.hostTree.data.setItemVisual(this.dataIndex, key, value);\n  };\n  /**\n   * Get item visual\n   * FIXME: make return type better\n   */\n\n\n  TreeNode.prototype.getVisual = function (key) {\n    return this.hostTree.data.getItemVisual(this.dataIndex, key);\n  };\n\n  TreeNode.prototype.getRawIndex = function () {\n    return this.hostTree.data.getRawIndex(this.dataIndex);\n  };\n\n  TreeNode.prototype.getId = function () {\n    return this.hostTree.data.getId(this.dataIndex);\n  };\n  /**\n   * index in parent's children\n   */\n\n\n  TreeNode.prototype.getChildIndex = function () {\n    if (this.parentNode) {\n      var children = this.parentNode.children;\n\n      for (var i = 0; i < children.length; ++i) {\n        if (children[i] === this) {\n          return i;\n        }\n      }\n\n      return -1;\n    }\n\n    return -1;\n  };\n  /**\n   * if this is an ancestor of another node\n   *\n   * @param node another node\n   * @return if is ancestor\n   */\n\n\n  TreeNode.prototype.isAncestorOf = function (node) {\n    var parent = node.parentNode;\n\n    while (parent) {\n      if (parent === this) {\n        return true;\n      }\n\n      parent = parent.parentNode;\n    }\n\n    return false;\n  };\n  /**\n   * if this is an descendant of another node\n   *\n   * @param node another node\n   * @return if is descendant\n   */\n\n\n  TreeNode.prototype.isDescendantOf = function (node) {\n    return node !== this && node.isAncestorOf(this);\n  };\n\n  return TreeNode;\n}();\n\nexport { TreeNode };\n;\n\nvar Tree =\n/** @class */\nfunction () {\n  function Tree(hostModel) {\n    this.type = 'tree';\n    this._nodes = [];\n    this.hostModel = hostModel;\n  }\n\n  Tree.prototype.eachNode = function (options, cb, context) {\n    this.root.eachNode(options, cb, context);\n  };\n\n  Tree.prototype.getNodeByDataIndex = function (dataIndex) {\n    var rawIndex = this.data.getRawIndex(dataIndex);\n    return this._nodes[rawIndex];\n  };\n\n  Tree.prototype.getNodeById = function (name) {\n    return this.root.getNodeById(name);\n  };\n  /**\n   * Update item available by list,\n   * when list has been performed options like 'filterSelf' or 'map'.\n   */\n\n\n  Tree.prototype.update = function () {\n    var data = this.data;\n    var nodes = this._nodes;\n\n    for (var i = 0, len = nodes.length; i < len; i++) {\n      nodes[i].dataIndex = -1;\n    }\n\n    for (var i = 0, len = data.count(); i < len; i++) {\n      nodes[data.getRawIndex(i)].dataIndex = i;\n    }\n  };\n  /**\n   * Clear all layouts\n   */\n\n\n  Tree.prototype.clearLayouts = function () {\n    this.data.clearItemLayouts();\n  };\n  /**\n   * data node format:\n   * {\n   *     name: ...\n   *     value: ...\n   *     children: [\n   *         {\n   *             name: ...\n   *             value: ...\n   *             children: ...\n   *         },\n   *         ...\n   *     ]\n   * }\n   */\n\n\n  Tree.createTree = function (dataRoot, hostModel, beforeLink) {\n    var tree = new Tree(hostModel);\n    var listData = [];\n    var dimMax = 1;\n    buildHierarchy(dataRoot);\n\n    function buildHierarchy(dataNode, parentNode) {\n      var value = dataNode.value;\n      dimMax = Math.max(dimMax, zrUtil.isArray(value) ? value.length : 1);\n      listData.push(dataNode);\n      var node = new TreeNode(convertOptionIdName(dataNode.name, ''), tree);\n      parentNode ? addChild(node, parentNode) : tree.root = node;\n\n      tree._nodes.push(node);\n\n      var children = dataNode.children;\n\n      if (children) {\n        for (var i = 0; i < children.length; i++) {\n          buildHierarchy(children[i], node);\n        }\n      }\n    }\n\n    tree.root.updateDepthAndHeight(0);\n    var dimensions = prepareSeriesDataSchema(listData, {\n      coordDimensions: ['value'],\n      dimensionsCount: dimMax\n    }).dimensions;\n    var list = new SeriesData(dimensions, hostModel);\n    list.initData(listData);\n    beforeLink && beforeLink(list);\n    linkSeriesData({\n      mainData: list,\n      struct: tree,\n      structAttr: 'tree'\n    });\n    tree.update();\n    return tree;\n  };\n\n  return Tree;\n}();\n/**\n * It is needed to consider the mess of 'list', 'hostModel' when creating a TreeNote,\n * so this function is not ready and not necessary to be public.\n */\n\n\nfunction addChild(child, node) {\n  var children = node.children;\n\n  if (child.parentNode === node) {\n    return;\n  }\n\n  children.push(child);\n  child.parentNode = node;\n}\n\nexport default Tree;"],"names":["SourceImpl","fields","this","data","sourceFormat","SOURCE_FORMAT_KEYED_COLUMNS","SOURCE_FORMAT_UNKNOWN","seriesLayoutBy","SERIES_LAYOUT_BY_COLUMN","startIndex","dimensionsDetectedCount","metaRawOption","dimensionsDefine","i","length","dim","type","guessOrdinal","BE_ORDINAL","isSourceInstance","val","createSource","sourceData","thisMetaRawOption","detectSourceFormat","determined","sourceHeader","normalizeDimensionsOption","SOURCE_FORMAT_ARRAY_ROWS","dataArrayRows","arrayRowsTravelFirst","isString","isNumber","index","Infinity","SERIES_LAYOUT_BY_ROW","SOURCE_FORMAT_OBJECT_ROWS","obj","firstIndex","dimensions_1","each","value","key","push","objectRowsCollectDimensions","colArr","SOURCE_FORMAT_ORIGINAL","value0","getDataItemValue","isArray","SOURCE_FORMAT_TYPED_ARRAY","determineSourceDimensions","dimensions","clone","createSourceFromSeriesDataOption","isTypedArray","cloneSourceShallow","source","len","item","isObject","hasOwn","isArrayLike","nameMap","createHashMap","map","rawItem","name","displayName","exist","get","count","set","cb","maxLoop","shouldRetrieveDataByName","TreeNode","hostTree","depth","height","dataIndex","children","viewChildren","isExpand","prototype","isRemoved","eachNode","options","context","zrUtil","order","suppressVisitSub","attr","call","updateDepthAndHeight","child","getNodeById","id","getId","res","contains","node","getAncestors","includeSelf","ancestors","parentNode","reverse","getAncestorsIndices","indices","currNode","getDescendantIndices","childNode","getValue","dimension","getStore","getDimensionIndex","setLayout","layout","merge","setItemLayout","getLayout","getItemLayout","getModel","path","getItemModel","getLevelModel","levelModels","setVisual","setItemVisual","getVisual","getItemVisual","getRawIndex","getChildIndex","isAncestorOf","parent","isDescendantOf","Tree","hostModel","_nodes","root","getNodeByDataIndex","rawIndex","update","nodes","clearLayouts","clearItemLayouts","createTree","dataRoot","beforeLink","tree","listData","dimMax","buildHierarchy","dataNode","Math","max","convertOptionIdName","addChild","prepareSeriesDataSchema","coordDimensions","dimensionsCount","list","SeriesData","initData","linkSeriesData","mainData","struct","structAttr"],"sourceRoot":""}