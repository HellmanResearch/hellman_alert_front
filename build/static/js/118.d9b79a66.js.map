{"version":3,"file":"static/js/118.d9b79a66.js","mappings":"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","sources":["../node_modules/zrender/lib/dom/HandlerProxy.js"],"sourcesContent":["import { __extends } from \"tslib\";\nimport { addEventListener, removeEventListener, normalizeEvent, getNativeEvent } from '../core/event.js';\nimport * as zrUtil from '../core/util.js';\nimport Eventful from '../core/Eventful.js';\nimport env from '../core/env.js';\nvar TOUCH_CLICK_DELAY = 300;\nvar globalEventSupported = env.domSupported;\nvar localNativeListenerNames = (function () {\n    var mouseHandlerNames = [\n        'click', 'dblclick', 'mousewheel', 'wheel', 'mouseout',\n        'mouseup', 'mousedown', 'mousemove', 'contextmenu'\n    ];\n    var touchHandlerNames = [\n        'touchstart', 'touchend', 'touchmove'\n    ];\n    var pointerEventNameMap = {\n        pointerdown: 1, pointerup: 1, pointermove: 1, pointerout: 1\n    };\n    var pointerHandlerNames = zrUtil.map(mouseHandlerNames, function (name) {\n        var nm = name.replace('mouse', 'pointer');\n        return pointerEventNameMap.hasOwnProperty(nm) ? nm : name;\n    });\n    return {\n        mouse: mouseHandlerNames,\n        touch: touchHandlerNames,\n        pointer: pointerHandlerNames\n    };\n})();\nvar globalNativeListenerNames = {\n    mouse: ['mousemove', 'mouseup'],\n    pointer: ['pointermove', 'pointerup']\n};\nvar wheelEventSupported = false;\nfunction isPointerFromTouch(event) {\n    var pointerType = event.pointerType;\n    return pointerType === 'pen' || pointerType === 'touch';\n}\nfunction setTouchTimer(scope) {\n    scope.touching = true;\n    if (scope.touchTimer != null) {\n        clearTimeout(scope.touchTimer);\n        scope.touchTimer = null;\n    }\n    scope.touchTimer = setTimeout(function () {\n        scope.touching = false;\n        scope.touchTimer = null;\n    }, 700);\n}\nfunction markTouch(event) {\n    event && (event.zrByTouch = true);\n}\nfunction normalizeGlobalEvent(instance, event) {\n    return normalizeEvent(instance.dom, new FakeGlobalEvent(instance, event), true);\n}\nfunction isLocalEl(instance, el) {\n    var elTmp = el;\n    var isLocal = false;\n    while (elTmp && elTmp.nodeType !== 9\n        && !(isLocal = elTmp.domBelongToZr\n            || (elTmp !== el && elTmp === instance.painterRoot))) {\n        elTmp = elTmp.parentNode;\n    }\n    return isLocal;\n}\nvar FakeGlobalEvent = (function () {\n    function FakeGlobalEvent(instance, event) {\n        this.stopPropagation = zrUtil.noop;\n        this.stopImmediatePropagation = zrUtil.noop;\n        this.preventDefault = zrUtil.noop;\n        this.type = event.type;\n        this.target = this.currentTarget = instance.dom;\n        this.pointerType = event.pointerType;\n        this.clientX = event.clientX;\n        this.clientY = event.clientY;\n    }\n    return FakeGlobalEvent;\n}());\nvar localDOMHandlers = {\n    mousedown: function (event) {\n        event = normalizeEvent(this.dom, event);\n        this.__mayPointerCapture = [event.zrX, event.zrY];\n        this.trigger('mousedown', event);\n    },\n    mousemove: function (event) {\n        event = normalizeEvent(this.dom, event);\n        var downPoint = this.__mayPointerCapture;\n        if (downPoint && (event.zrX !== downPoint[0] || event.zrY !== downPoint[1])) {\n            this.__togglePointerCapture(true);\n        }\n        this.trigger('mousemove', event);\n    },\n    mouseup: function (event) {\n        event = normalizeEvent(this.dom, event);\n        this.__togglePointerCapture(false);\n        this.trigger('mouseup', event);\n    },\n    mouseout: function (event) {\n        event = normalizeEvent(this.dom, event);\n        var element = event.toElement || event.relatedTarget;\n        if (!isLocalEl(this, element)) {\n            if (this.__pointerCapturing) {\n                event.zrEventControl = 'no_globalout';\n            }\n            this.trigger('mouseout', event);\n        }\n    },\n    wheel: function (event) {\n        wheelEventSupported = true;\n        event = normalizeEvent(this.dom, event);\n        this.trigger('mousewheel', event);\n    },\n    mousewheel: function (event) {\n        if (wheelEventSupported) {\n            return;\n        }\n        event = normalizeEvent(this.dom, event);\n        this.trigger('mousewheel', event);\n    },\n    touchstart: function (event) {\n        event = normalizeEvent(this.dom, event);\n        markTouch(event);\n        this.__lastTouchMoment = new Date();\n        this.handler.processGesture(event, 'start');\n        localDOMHandlers.mousemove.call(this, event);\n        localDOMHandlers.mousedown.call(this, event);\n    },\n    touchmove: function (event) {\n        event = normalizeEvent(this.dom, event);\n        markTouch(event);\n        this.handler.processGesture(event, 'change');\n        localDOMHandlers.mousemove.call(this, event);\n    },\n    touchend: function (event) {\n        event = normalizeEvent(this.dom, event);\n        markTouch(event);\n        this.handler.processGesture(event, 'end');\n        localDOMHandlers.mouseup.call(this, event);\n        if (+new Date() - (+this.__lastTouchMoment) < TOUCH_CLICK_DELAY) {\n            localDOMHandlers.click.call(this, event);\n        }\n    },\n    pointerdown: function (event) {\n        localDOMHandlers.mousedown.call(this, event);\n    },\n    pointermove: function (event) {\n        if (!isPointerFromTouch(event)) {\n            localDOMHandlers.mousemove.call(this, event);\n        }\n    },\n    pointerup: function (event) {\n        localDOMHandlers.mouseup.call(this, event);\n    },\n    pointerout: function (event) {\n        if (!isPointerFromTouch(event)) {\n            localDOMHandlers.mouseout.call(this, event);\n        }\n    }\n};\nzrUtil.each(['click', 'dblclick', 'contextmenu'], function (name) {\n    localDOMHandlers[name] = function (event) {\n        event = normalizeEvent(this.dom, event);\n        this.trigger(name, event);\n    };\n});\nvar globalDOMHandlers = {\n    pointermove: function (event) {\n        if (!isPointerFromTouch(event)) {\n            globalDOMHandlers.mousemove.call(this, event);\n        }\n    },\n    pointerup: function (event) {\n        globalDOMHandlers.mouseup.call(this, event);\n    },\n    mousemove: function (event) {\n        this.trigger('mousemove', event);\n    },\n    mouseup: function (event) {\n        var pointerCaptureReleasing = this.__pointerCapturing;\n        this.__togglePointerCapture(false);\n        this.trigger('mouseup', event);\n        if (pointerCaptureReleasing) {\n            event.zrEventControl = 'only_globalout';\n            this.trigger('mouseout', event);\n        }\n    }\n};\nfunction mountLocalDOMEventListeners(instance, scope) {\n    var domHandlers = scope.domHandlers;\n    if (env.pointerEventsSupported) {\n        zrUtil.each(localNativeListenerNames.pointer, function (nativeEventName) {\n            mountSingleDOMEventListener(scope, nativeEventName, function (event) {\n                domHandlers[nativeEventName].call(instance, event);\n            });\n        });\n    }\n    else {\n        if (env.touchEventsSupported) {\n            zrUtil.each(localNativeListenerNames.touch, function (nativeEventName) {\n                mountSingleDOMEventListener(scope, nativeEventName, function (event) {\n                    domHandlers[nativeEventName].call(instance, event);\n                    setTouchTimer(scope);\n                });\n            });\n        }\n        zrUtil.each(localNativeListenerNames.mouse, function (nativeEventName) {\n            mountSingleDOMEventListener(scope, nativeEventName, function (event) {\n                event = getNativeEvent(event);\n                if (!scope.touching) {\n                    domHandlers[nativeEventName].call(instance, event);\n                }\n            });\n        });\n    }\n}\nfunction mountGlobalDOMEventListeners(instance, scope) {\n    if (env.pointerEventsSupported) {\n        zrUtil.each(globalNativeListenerNames.pointer, mount);\n    }\n    else if (!env.touchEventsSupported) {\n        zrUtil.each(globalNativeListenerNames.mouse, mount);\n    }\n    function mount(nativeEventName) {\n        function nativeEventListener(event) {\n            event = getNativeEvent(event);\n            if (!isLocalEl(instance, event.target)) {\n                event = normalizeGlobalEvent(instance, event);\n                scope.domHandlers[nativeEventName].call(instance, event);\n            }\n        }\n        mountSingleDOMEventListener(scope, nativeEventName, nativeEventListener, { capture: true });\n    }\n}\nfunction mountSingleDOMEventListener(scope, nativeEventName, listener, opt) {\n    scope.mounted[nativeEventName] = listener;\n    scope.listenerOpts[nativeEventName] = opt;\n    addEventListener(scope.domTarget, nativeEventName, listener, opt);\n}\nfunction unmountDOMEventListeners(scope) {\n    var mounted = scope.mounted;\n    for (var nativeEventName in mounted) {\n        if (mounted.hasOwnProperty(nativeEventName)) {\n            removeEventListener(scope.domTarget, nativeEventName, mounted[nativeEventName], scope.listenerOpts[nativeEventName]);\n        }\n    }\n    scope.mounted = {};\n}\nvar DOMHandlerScope = (function () {\n    function DOMHandlerScope(domTarget, domHandlers) {\n        this.mounted = {};\n        this.listenerOpts = {};\n        this.touching = false;\n        this.domTarget = domTarget;\n        this.domHandlers = domHandlers;\n    }\n    return DOMHandlerScope;\n}());\nvar HandlerDomProxy = (function (_super) {\n    __extends(HandlerDomProxy, _super);\n    function HandlerDomProxy(dom, painterRoot) {\n        var _this = _super.call(this) || this;\n        _this.__pointerCapturing = false;\n        _this.dom = dom;\n        _this.painterRoot = painterRoot;\n        _this._localHandlerScope = new DOMHandlerScope(dom, localDOMHandlers);\n        if (globalEventSupported) {\n            _this._globalHandlerScope = new DOMHandlerScope(document, globalDOMHandlers);\n        }\n        mountLocalDOMEventListeners(_this, _this._localHandlerScope);\n        return _this;\n    }\n    HandlerDomProxy.prototype.dispose = function () {\n        unmountDOMEventListeners(this._localHandlerScope);\n        if (globalEventSupported) {\n            unmountDOMEventListeners(this._globalHandlerScope);\n        }\n    };\n    HandlerDomProxy.prototype.setCursor = function (cursorStyle) {\n        this.dom.style && (this.dom.style.cursor = cursorStyle || 'default');\n    };\n    HandlerDomProxy.prototype.__togglePointerCapture = function (isPointerCapturing) {\n        this.__mayPointerCapture = null;\n        if (globalEventSupported\n            && ((+this.__pointerCapturing) ^ (+isPointerCapturing))) {\n            this.__pointerCapturing = isPointerCapturing;\n            var globalHandlerScope = this._globalHandlerScope;\n            isPointerCapturing\n                ? mountGlobalDOMEventListeners(this, globalHandlerScope)\n                : unmountDOMEventListeners(globalHandlerScope);\n        }\n    };\n    return HandlerDomProxy;\n}(Eventful));\nexport default HandlerDomProxy;\n"],"names":["mouseHandlerNames","pointerEventNameMap","globalEventSupported","env","localNativeListenerNames","pointerdown","pointerup","pointermove","pointerout","mouse","touch","pointer","zrUtil","name","nm","replace","hasOwnProperty","globalNativeListenerNames","wheelEventSupported","isPointerFromTouch","event","pointerType","markTouch","zrByTouch","isLocalEl","instance","el","elTmp","isLocal","nodeType","domBelongToZr","painterRoot","parentNode","FakeGlobalEvent","this","stopPropagation","stopImmediatePropagation","preventDefault","type","target","currentTarget","dom","clientX","clientY","localDOMHandlers","mousedown","normalizeEvent","__mayPointerCapture","zrX","zrY","trigger","mousemove","downPoint","__togglePointerCapture","mouseup","mouseout","toElement","relatedTarget","__pointerCapturing","zrEventControl","wheel","mousewheel","touchstart","__lastTouchMoment","Date","handler","processGesture","call","touchmove","touchend","click","globalDOMHandlers","pointerCaptureReleasing","mountSingleDOMEventListener","scope","nativeEventName","listener","opt","mounted","listenerOpts","addEventListener","domTarget","unmountDOMEventListeners","removeEventListener","DOMHandlerScope","domHandlers","touching","HandlerDomProxy","_super","_this","_localHandlerScope","_globalHandlerScope","document","touchTimer","clearTimeout","setTimeout","setTouchTimer","getNativeEvent","__extends","prototype","dispose","setCursor","cursorStyle","style","cursor","isPointerCapturing","globalHandlerScope","mount","normalizeGlobalEvent","capture","mountGlobalDOMEventListeners","Eventful"],"sourceRoot":""}