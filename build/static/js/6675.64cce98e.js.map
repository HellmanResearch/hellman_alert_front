{"version":3,"file":"static/js/6675.64cce98e.js","mappings":"gGAAA,IAIIA,EAJYC,EAAQ,MAITC,CAHJD,EAAQ,OAGY,YAE/BE,EAAOC,QAAUJ,C,wBCNjB,IAAIK,EAAYJ,EAAQ,OACpBK,EAAaL,EAAQ,OACrBM,EAAUN,EAAQ,OAClBO,EAAUP,EAAQ,OAClBQ,EAAUR,EAAQ,OAStB,SAASS,EAAKC,GACZ,IAAIC,GAAS,EACTC,EAAoB,MAAXF,EAAkB,EAAIA,EAAQE,OAG3C,IADAC,KAAKC,UACIH,EAAQC,GAAQ,CACvB,IAAIG,EAAQL,EAAQC,GACpBE,KAAKG,IAAID,EAAM,GAAIA,EAAM,GAC3B,CACF,CAGAN,EAAKQ,UAAUH,MAAQV,EACvBK,EAAKQ,UAAkB,OAAIZ,EAC3BI,EAAKQ,UAAUC,IAAMZ,EACrBG,EAAKQ,UAAUE,IAAMZ,EACrBE,EAAKQ,UAAUD,IAAMR,EAErBN,EAAOC,QAAUM,C,wBC/BjB,IAAIW,EAAiBpB,EAAQ,OACzBqB,EAAkBrB,EAAQ,MAC1BsB,EAAetB,EAAQ,OACvBuB,EAAevB,EAAQ,OACvBwB,EAAexB,EAAQ,OAS3B,SAASyB,EAAUf,GACjB,IAAIC,GAAS,EACTC,EAAoB,MAAXF,EAAkB,EAAIA,EAAQE,OAG3C,IADAC,KAAKC,UACIH,EAAQC,GAAQ,CACvB,IAAIG,EAAQL,EAAQC,GACpBE,KAAKG,IAAID,EAAM,GAAIA,EAAM,GAC3B,CACF,CAGAU,EAAUR,UAAUH,MAAQM,EAC5BK,EAAUR,UAAkB,OAAII,EAChCI,EAAUR,UAAUC,IAAMI,EAC1BG,EAAUR,UAAUE,IAAMI,EAC1BE,EAAUR,UAAUD,IAAMQ,EAE1BtB,EAAOC,QAAUsB,C,wBC/BjB,IAIIC,EAJY1B,EAAQ,MAIdC,CAHCD,EAAQ,OAGO,OAE1BE,EAAOC,QAAUuB,C,wBCNjB,IAAIC,EAAgB3B,EAAQ,OACxB4B,EAAiB5B,EAAQ,MACzB6B,EAAc7B,EAAQ,OACtB8B,EAAc9B,EAAQ,OACtB+B,EAAc/B,EAAQ,OAS1B,SAASgC,EAAStB,GAChB,IAAIC,GAAS,EACTC,EAAoB,MAAXF,EAAkB,EAAIA,EAAQE,OAG3C,IADAC,KAAKC,UACIH,EAAQC,GAAQ,CACvB,IAAIG,EAAQL,EAAQC,GACpBE,KAAKG,IAAID,EAAM,GAAIA,EAAM,GAC3B,CACF,CAGAiB,EAASf,UAAUH,MAAQa,EAC3BK,EAASf,UAAkB,OAAIW,EAC/BI,EAASf,UAAUC,IAAMW,EACzBG,EAASf,UAAUE,IAAMW,EACzBE,EAASf,UAAUD,IAAMe,EAEzB7B,EAAOC,QAAU6B,C,wBC/BjB,IAIIC,EAJYjC,EAAQ,MAIVC,CAHHD,EAAQ,OAGW,WAE9BE,EAAOC,QAAU8B,C,wBCNjB,IAIIC,EAJYlC,EAAQ,MAIdC,CAHCD,EAAQ,OAGO,OAE1BE,EAAOC,QAAU+B,C,wBCNjB,IAAIF,EAAWhC,EAAQ,OACnBmC,EAAcnC,EAAQ,OACtBoC,EAAcpC,EAAQ,OAU1B,SAASqC,EAASC,GAChB,IAAI3B,GAAS,EACTC,EAAmB,MAAV0B,EAAiB,EAAIA,EAAO1B,OAGzC,IADAC,KAAK0B,SAAW,IAAIP,IACXrB,EAAQC,GACfC,KAAK2B,IAAIF,EAAO3B,GAEpB,CAGA0B,EAASpB,UAAUuB,IAAMH,EAASpB,UAAUwB,KAAON,EACnDE,EAASpB,UAAUE,IAAMiB,EAEzBlC,EAAOC,QAAUkC,C,wBC1BjB,IAAIZ,EAAYzB,EAAQ,OACpB0C,EAAa1C,EAAQ,OACrB2C,EAAc3C,EAAQ,OACtB4C,EAAW5C,EAAQ,OACnB6C,EAAW7C,EAAQ,OACnB8C,EAAW9C,EAAQ,OASvB,SAAS+C,EAAMrC,GACb,IAAIsC,EAAOnC,KAAK0B,SAAW,IAAId,EAAUf,GACzCG,KAAKoC,KAAOD,EAAKC,IACnB,CAGAF,EAAM9B,UAAUH,MAAQ4B,EACxBK,EAAM9B,UAAkB,OAAI0B,EAC5BI,EAAM9B,UAAUC,IAAM0B,EACtBG,EAAM9B,UAAUE,IAAM0B,EACtBE,EAAM9B,UAAUD,IAAM8B,EAEtB5C,EAAOC,QAAU4C,C,wBC1BjB,IAGIG,EAHOlD,EAAQ,OAGDkD,OAElBhD,EAAOC,QAAU+C,C,wBCLjB,IAGIC,EAHOnD,EAAQ,OAGGmD,WAEtBjD,EAAOC,QAAUgD,C,uBCLjB,IAIIC,EAJYpD,EAAQ,MAIVC,CAHHD,EAAQ,OAGW,WAE9BE,EAAOC,QAAUiD,C,8CCsCDC,EAAIC,GAAAA,IAAAA,IAAAA,EAAAA,UAAAA,OAA+BC,EAAAA,MAAAA,EAAAA,EAAAA,EAAAA,EAAAA,GAAAA,EAAAA,EAAAA,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAAA,UAAAA,GAQtBC,MAElBC,MAAM,8BACeH,GAC7BC,EAAK3C,OAAS,IAAM2C,EAAKG,KAAI,YAAAC,MAAAA,IAASA,EAAAA,GAAAA,IAAMC,KAAK,KAAO,iECvC3CC,EAAQC,GAAAA,QACdA,KAAWA,EAAMC,EAAAA,CAAAA,SAKXC,EAAYF,GAAAA,QACtBA,IAAAA,SAawBA,GAAAA,IACxBA,GAA0B,iBAAVA,EAAoB,OAAO,MAC1CG,EAAQC,OAAOC,eAAeL,GAAAA,GACtB,OAAVG,EAAAA,OAAAA,EACI,IAEFG,EACLF,OAAOG,eAAeC,KAAKL,EAAO,gBAAkBA,EAAMM,YAAAA,OAEvDH,IAASF,QAGG,mBAARE,GACPI,SAASC,SAASH,KAAKF,KAAUM,CAAAA,CA1B7BZ,CAEUA,IACda,MAAMC,QAAQd,MACZA,EAAMe,MACNf,EAAMS,YAAYM,IACpBC,EAAMhB,IACNiB,EAAMjB,GAAAA,CA0DR,SAAgBkB,EAAKC,EAAUC,EAAWC,QAAAA,IAAAA,IAAAA,GAAAA,GAAiB,IACtDC,EAAYH,IACbE,EAAiBjB,OAAOmB,KAAOC,GAASL,GAAKM,SAAQ,YACjDJ,GAAiC,iBAARK,GAAkBN,EAAKM,EAAKP,EAAIO,GAAMP,EAAAA,IAGrEA,EAAIM,SAAQ,SAACxE,EAAYJ,GAAAA,OAAeuE,EAAKvE,EAAOI,EAAOkE,EAAAA,GAAAA,CAAAA,SAK7CG,EAAYK,GAAAA,IAErBC,EAAgCD,EAAM1B,GAAAA,OACrC2B,EACJA,EAAMC,EAAQ,EACbD,EAAMC,EAAQ,EACbD,EAAMC,EACRhB,MAAMC,QAAQa,GAAAA,EAEdX,EAAMW,GAAAA,EAENV,EAAMU,GAAAA,EAAAA,CAAAA,CAAAA,SAMMtE,EAAIsE,EAAYG,GAAAA,OAAAA,IACxBR,EAAYK,GAChBA,EAAMtE,IAAIyE,GACV1B,OAAOjD,UAAUoD,eAAeC,KAAKmB,EAAOG,EAAAA,CAUhD,SAAgB5E,EAAIyE,EAAYI,EAA6B/B,GAAAA,IACtDgC,EAAIV,EAAYK,GAAAA,IAClBK,EAAoBL,EAAMzE,IAAI6E,EAAgB/B,GAAAA,IACzCgC,GACRL,EAAMM,OAAOF,GACbJ,EAAMjD,IAAIsB,IACJ2B,EAAMI,GAAkB/B,CAAAA,CAAAA,SAIhBkC,EAAGC,EAAQC,GAAAA,OAEtBD,IAAMC,EACI,IAAND,GAAW,EAAIA,GAAM,EAAIC,EAEzBD,GAAMA,GAAKC,GAAMA,CAAAA,CAAAA,SAKVpB,EAAMqB,GAAAA,OACdC,GAAUD,aAAkBzE,GAAAA,CAAAA,SAIpBqD,EAAMoB,GAAAA,OACdE,GAAUF,aAAkBjE,GAAAA,CAAAA,SAGpBoE,EAAOZ,GAAAA,OACfA,EAAMa,GAASb,EAAMc,CAAAA,CAAAA,SAIbC,EAAYC,GAAAA,GACvB/B,MAAMC,QAAQ8B,GAAO,OAAO/B,MAAM1D,UAAU0F,MAAMrC,KAAKoC,GAAAA,IACrDE,EAAcC,EAA0BH,UACvCE,EAAY7C,GAAAA,IAAAA,IACfsB,EAAOC,EAAQsB,GACVE,EAAI,EAAGA,EAAIzB,EAAKzE,OAAQkG,IAAK,KAC/BtB,EAAWH,EAAKyB,GAChBC,EAAOH,EAAYpB,IAAAA,IACrBuB,EAAKC,WACRD,EAAKC,UAAW,EAChBD,EAAKE,cAAe,IAKjBF,EAAK7F,KAAO6F,EAAK/F,OACpB4F,EAAYpB,GAAO,CAClByB,cAAc,EACdD,UAAU,EACVE,WAAYH,EAAKG,WACjBpD,MAAO4C,EAAKlB,IAAAA,CAAAA,OAGRtB,OAAOiD,OAAOjD,OAAOC,eAAeuC,GAAOE,EAAAA,CAAAA,SAWnCQ,EAAUnC,EAAUoC,GAAAA,YAAAA,IAAAA,IAAAA,GAAAA,GAC/BC,EAASrC,IAAQpB,EAAQoB,KAASjB,EAAYiB,KAC9CG,EAAYH,GAAO,IACtBA,EAAIjE,IAAMiE,EAAIzC,IAAMyC,EAAInE,MAAQmE,EAAIc,OAASwB,GAE9CrD,OAAOkD,OAAOnC,GACVoC,GAAMrC,EAAKC,GAAK,SAACO,EAAK1B,GAAAA,OAAUsD,EAAOtD,GAAAA,EAAO,QALamB,CAMxDA,CAGR,SAASsC,IACRlE,EAAI,YAGWiE,EAASrC,GAAAA,OACb,MAAPA,GAA8B,iBAARA,GAEnBf,OAAOoD,SAASrC,EAAAA,CAAAA,SCzKRuC,EACfC,GAAAA,IAEMC,EAASC,EAAQF,GAAAA,OAClBC,GACJrE,EAAI,GAAIoE,GAGFC,CAAAA,CC3BR,SAAgBE,IAAAA,OAERC,CAAAA,CAAAA,SAkBQC,EACfC,EACAC,GAEIA,IACHR,EAAU,WACVO,EAAME,EAAW,GACjBF,EAAMG,EAAkB,GACxBH,EAAMI,EAAiBH,EAAAA,CAAAA,SAITI,EAAYL,GAC3BM,EAAWN,GACXA,EAAMO,EAAQ/C,QAAQgD,GAEtBR,EAAMO,EAAU,cAGDD,EAAWN,GACtBA,IAAUF,IACbA,EAAeE,EAAMS,EAAAA,CAAAA,SAIPC,EAAWC,GAAAA,OAClBb,EArCD,CACNS,EAAS,GACTE,EAmCkCX,EAlClCc,EAkCgDD,EA/BhDE,GAAAA,EACAC,EAAoB,GAiCtB,SAASN,EAAYO,GAAAA,IACdpD,EAAoBoD,EAAM/E,GAAAA,IAE/B2B,EAAMC,GAAAA,IACND,EAAMC,EAEND,EAAMqD,IACFrD,EAAMsD,GAAAA,CAAW,UC9DPC,EAAcC,EAAanB,GAC1CA,EAAMc,EAAqBd,EAAMO,EAAQ1H,OAAAA,IACnCuI,EAAYpB,EAAMO,EAAS,GAC3Bc,OAAAA,IAAaF,GAAwBA,IAAWC,EAAAA,OACjDpB,EAAMY,EAAOU,GACjB7B,EAAU,OAAO8B,EAAiBvB,EAAOmB,EAAQE,GAC9CA,GACCD,EAAUpF,GAAawF,IAC1BnB,EAAYL,GACZ1E,EAAI,IAEDW,EAAYkF,KAEfA,EAASM,EAASzB,EAAOmB,GACpBnB,EAAMS,GAASiB,EAAY1B,EAAOmB,IAEpCnB,EAAME,GACTT,EAAU,WAAWkC,EACpBP,EAAUpF,GAAayC,EACvB0C,EACAnB,EAAME,EACNF,EAAMG,IAKRgB,EAASM,EAASzB,EAAOoB,EAAW,IAErCf,EAAYL,GACRA,EAAME,GACTF,EAAMI,EAAgBJ,EAAME,EAAUF,EAAMG,GAEtCgB,IAAWS,EAAUT,OAAAA,CAASU,CAGtC,SAASJ,EAASK,EAAuB/F,EAAYgG,GAAAA,GAEhDxC,EAASxD,GAAQ,OAAOA,EAAAA,IAEtB4B,EAAoB5B,EAAMC,GAAAA,IAE3B2B,EAAAA,OACJV,EACClB,GACA,SAAC0B,EAAKuE,GAAAA,OACLC,EAAiBH,EAAWnE,EAAO5B,EAAO0B,EAAKuE,EAAYD,EAAAA,IAAAA,GAGtDhG,EAAAA,GAGJ4B,EAAMuE,IAAWJ,EAAW,OAAO/F,EAAAA,IAElC4B,EAAM6D,EAAAA,OACVE,EAAYI,EAAWnE,EAAMc,GAAAA,GACtBd,EAAMc,EAAAA,IAGTd,EAAMwE,EAAY,CACtBxE,EAAMwE,GAAAA,EACNxE,EAAMuE,EAAOpB,IAAAA,IACPK,EAAAA,IAELxD,EAAMC,GAAAA,IAAiCD,EAAMC,EACzCD,EAAMa,EAAQE,EAAYf,EAAMyE,GACjCzE,EAAMa,EAKVvB,EAAAA,IACCU,EAAMC,EAA0B,IAAIzD,IAAIgH,GAAUA,GAClD,SAAC1D,EAAKuE,GAAAA,OACLC,EAAiBH,EAAWnE,EAAOwD,EAAQ1D,EAAKuE,EAAYD,EAAAA,IAG9DL,EAAYI,EAAWX,GAAAA,GAEnBY,GAAQD,EAAU5B,GACrBT,EAAU,WAAW4C,EACpB1E,EACAoE,EACAD,EAAU5B,EACV4B,EAAU3B,EAAAA,CAAAA,OAINxC,EAAMa,CAAAA,CAGd,SAASyD,EACRH,EACAQ,EACAC,EACA1E,EACAmE,EACAQ,GAAAA,GAGI1G,EAAQkG,GAAa,KASlBS,EAAMhB,EAASK,EAAWE,EAP/BQ,GACAF,GAAAA,IACAA,EAAa1E,IACZxE,EAAKkJ,EAA8CI,EAAY7E,GAC7D2E,EAAUG,OAAO9E,QAAAA,GACjBgE,GAGJ5I,EAAIsJ,EAAc1E,EAAM4E,IAGpB3G,EAAQ2G,GAEL,OADNX,EAAUjB,GAAAA,CAAiB,IAIzB5E,EAAY+F,KAAgBzC,EAASyC,GAAa,KAChDF,EAAUlB,EAAOgC,GAAed,EAAUhB,EAAqB,EAAG,OAQvEW,EAASK,EAAWE,GAEfM,GAAgBA,EAAYJ,EAAOzB,GACvCiB,EAAYI,EAAWE,EAAAA,CAAAA,CAI1B,SAASN,EAAY1B,EAAmBjE,EAAYuD,QAAAA,IAAAA,IAAAA,GAAAA,GAC/CU,EAAMY,EAAOgC,GAAe5C,EAAMa,GACrCxB,EAAOtD,EAAOuD,EAAAA,CC8EhB,SAASuD,EAAK9B,EAAgBlD,GAAAA,IACvBF,EAAQoD,EAAM/E,GAAAA,OACL2B,EAAQY,EAAOZ,GAASoD,GACzBlD,EAAAA,CAcf,SAASiF,EACRC,EACAlF,GAAAA,GAGMA,KAAQkF,EAAAA,IAAAA,IACV7G,EAAQC,OAAOC,eAAe2G,GAC3B7G,GAAO,KACP8C,EAAO7C,OAAO6G,yBAAyB9G,EAAO2B,GAAAA,GAChDmB,EAAM,OAAOA,EACjB9C,EAAQC,OAAOC,eAAeF,EAAAA,CAAAA,CAAAA,SAKhB+G,EAAYtF,GACtBA,EAAM6D,IACV7D,EAAM6D,GAAAA,EACF7D,EAAM8C,GACTwC,EAAYtF,EAAM8C,GAAAA,CAAAA,SAKLyC,EAAYvF,GACtBA,EAAMa,IACVb,EAAMa,EAAQE,EAAYf,EAAMc,GAAAA,CCnDlC,SAAgB0E,EACfxC,EACA5E,EACAqH,GAAAA,IAGMrC,EAAiBhE,EAAMhB,GAC1B0D,EAAU,UAAU4D,EAAUtH,EAAOqH,GACrCpG,EAAMjB,GACN0D,EAAU,UAAU6D,EAAUvH,EAAOqH,GACrCzC,EAAMW,EAAAA,SD1LT3C,EACAyE,GAAAA,IAEMvG,EAAUD,MAAMC,QAAQ8B,GACxBhB,EAAoB,CACzBC,EAAOf,EAAAA,EAAkC,EAEzCqF,EAAQkB,EAASA,EAAOlB,EAASrC,IAEjC2B,GAAAA,EAEAW,GAAAA,EAEAO,EAAW,CAAC,EAEZjC,EAAS2C,EAET3E,EAAOE,EAEPyD,EAAQ,KAER5D,EAAO,KAEPwC,EAAS,KACTuC,GAAAA,GASGnF,EAAYT,EACZ6F,EAA2CC,EAC3C5G,IACHuB,EAAS,CAACT,GACV6F,EAAQE,GAAAA,IAAAA,EAGeC,MAAMC,UAAUxF,EAAQoF,GAAzCK,EAAAA,EAAAA,OAAQC,EAAAA,EAAAA,MAAAA,OACfnG,EAAMyE,EAAS0B,EACfnG,EAAMqD,EAAU6C,EACTC,CAAAA,CC+IExC,CACWvF,EAAOqH,GACxB3D,EAAU,OAAOsE,EAAgBhI,EAAOqH,GAAAA,OAE7BA,EAASA,EAAOlB,EAASrC,KACjCU,EAAQ7F,KAAKqG,GACZA,CAAAA,CAAAA,SCjOQiD,EAAQjI,GAAAA,OAClBD,EAAQC,IAAQT,EAAI,GAAIS,GAI9B,SAASkI,EAAYlI,GAAAA,IACfE,EAAYF,GAAQ,OAAOA,EAAAA,IAE5BmI,EADEvG,EAAgC5B,EAAMC,GAEtCmI,EAAW9G,EAAYtB,GAAAA,GACzB4B,EAAO,KAERA,EAAM6D,IACN7D,EAAMC,EAAQ,IAAM6B,EAAU,OAAO2E,EAAYzG,IAElD,OAAOA,EAAMc,EAEdd,EAAMwE,GAAAA,EACN+B,EAAOG,EAAWtI,EAAOoI,GACzBxG,EAAMwE,GAAAA,CAAa,MAEnB+B,EAAOG,EAAWtI,EAAOoI,GAAAA,OAG1BlH,EAAKiH,GAAM,SAACzG,EAAKuE,GACZrE,GN8E0CE,SAI5BH,EAA2BG,GAAAA,OAAAA,IAEvCR,EAAYK,GAA0BA,EAAMvE,IAAI0E,GAAQH,EAAMG,EAAAA,CMpFvD1E,CAAIwE,EAAMc,EAAOhB,KAASuE,GACvC/I,EAAIiL,EAAMzG,EAAKwG,EAAYjC,GAAAA,IAAAA,IAGrBmC,EAA4B,IAAIhK,IAAI+J,GAAQA,CAAAA,CAxBpD,CAHoBnI,EAAAA,CA8BpB,SAASsI,EAAWtI,EAAYoI,GAAAA,OAEvBA,GAAAA,KAAAA,EAAAA,OAEC,IAAIxK,IAAIoC,GAAAA,KAAAA,EAAAA,OAGRa,MAAM0H,KAAKvI,GAAAA,OAEb2C,EAAY3C,EAAAA,CAAAA,SClCJwI,IAAAA,SA8ENC,EACR3G,EACAsB,GAAAA,IAEIH,EAAOH,EAAYhB,GAAAA,OACnBmB,EACHA,EAAKG,WAAaA,EAElBN,EAAYhB,GAAQmB,EAAO,CAC1BE,cAAc,EACdC,WAAAA,EACAhG,IAAAA,WAAAA,IACOwE,EAAQ7E,KAAKkD,GAAAA,OAGZyH,EAAYtK,IAAIwE,EAAOE,EAAAA,EAE/B5E,IAAAA,SAAe8C,GAAAA,IACR4B,EAAQ7E,KAAKkD,GAGnByH,EAAYxK,IAAI0E,EAAOE,EAAM9B,EAAAA,GAIzBiD,CAAAA,CAAAA,SAICyF,EAAiBC,GAAAA,IAKpB,IAAI3F,EAAI2F,EAAO7L,OAAS,EAAGkG,GAAK,EAAGA,IAAK,KACtCpB,EAAkB+G,EAAO3F,GAAG/C,GAAAA,IAC7B2B,EAAM6D,EAAAA,OACF7D,EAAMC,GAAAA,KAAAA,EAER+G,EAAgBhH,IAAQsF,EAAYtF,GAAAA,MAAAA,KAAAA,EAGpCiH,EAAiBjH,IAAQsF,EAAYtF,GAAAA,CAAAA,CAAAA,SA6DrCiH,EAAiBjH,GAAAA,IAAAA,IAClBc,EAAiBd,EAAjBc,EAAO2D,EAAUzE,EAAVyE,EAIR9E,EAAOC,EAAQ6E,GACZrD,EAAIzB,EAAKzE,OAAS,EAAGkG,GAAK,EAAGA,IAAK,KACpCtB,EAAWH,EAAKyB,GAAAA,GAClBtB,IAAQzB,EAAAA,CAAAA,IACN6I,EAAYpG,EAAMhB,GAAAA,QAAAA,IAEpBoH,IAA4BzL,EAAIqF,EAAOhB,GAAAA,OAAAA,EACnC,IAKD1B,EAAQqG,EAAO3E,GACfE,EAAoB5B,GAASA,EAAMC,GAAAA,GACrC2B,EAAQA,EAAMc,IAAUoG,GAAa5G,EAAGlC,EAAO8I,GAAAA,OAAAA,CAC3C,MAOJC,IAAgBrG,EAAMzC,GAAAA,OACrBsB,EAAKzE,SAAW0E,EAAQkB,GAAO5F,QAAUiM,EAAc,EAAI,YAG1DH,EAAgBhH,GAAAA,IACjByE,EAAUzE,EAAVyE,EAAAA,GACHA,EAAOvJ,SAAW8E,EAAMc,EAAM5F,OAAQ,OAAO,MAS3CkM,EAAa5I,OAAO6G,yBACzBZ,EACAA,EAAOvJ,OAAS,MAGbkM,IAAeA,EAAW5L,IAAK,OAAO,MAErC,IAAI4F,EAAI,EAAGA,EAAIqD,EAAOvJ,OAAQkG,IAAAA,IAC7BqD,EAAO9F,eAAeyC,GAAI,OAAO,UAGhC,CAU0CpB,IAxK5CkB,EAAoD,CAAC,GN9CpDc,SAIPD,EACAsF,GAEKpF,EAAQF,KAAYE,EAAQF,GAAasF,EAAAA,CMkN9CC,CAAW,MAAO,CACjBlB,EAAAA,SA5MApF,EACAyE,GAAAA,IAEMvG,EAAUD,MAAMC,QAAQ8B,GACxBoC,EAAAA,SA1BiBlE,EAAkB8B,GAAAA,GACrC9B,EAAS,SACNkE,EAAYnE,MAAM+B,EAAK9F,QACpBkG,EAAI,EAAGA,EAAIJ,EAAK9F,OAAQkG,IAChC5C,OAAO+I,eAAenE,EAAO,GAAKhC,EAAGyF,EAAczF,GAAG,WAChDgC,CAAAA,CAAAA,IAEDlC,EAAcC,EAA0BH,UACvCE,EAAY7C,GAAAA,IAAAA,IACbsB,EAAOC,EAAQsB,GACZE,EAAI,EAAGA,EAAIzB,EAAKzE,OAAQkG,IAAK,KAC/BtB,EAAWH,EAAKyB,GACtBF,EAAYpB,GAAO+G,EAClB/G,EACAZ,KAAagC,EAAYpB,GAAK0B,WAAAA,CAAAA,OAGzBhD,OAAOiD,OAAOjD,OAAOC,eAAeuC,GAAOE,EAAAA,CAS7CkC,CAAuBlE,EAAS8B,GAEhChB,EAAwC,CAC7CC,EAAOf,EAAAA,EAAgC,EACvCqF,EAAQkB,EAASA,EAAOlB,EAASrC,IACjC2B,GAAAA,EACAW,GAAAA,EACAO,EAAW,CAAC,EACZjC,EAAS2C,EAET3E,EAAOE,EAEPyD,EAAQrB,EACRvC,EAAO,KACPyC,GAAAA,EACAsC,GAAAA,GAAW,OAGZpH,OAAO+I,eAAenE,EAAO/E,EAAa,CACzCD,MAAO4B,EAEPsB,UAAU,IAEJ8B,CAAAA,EAkLPQ,EAAAA,SAvPAvB,EACAmB,EACAE,GAEKA,EASJvF,EAAQqF,IACPA,EAAOnF,GAA0BkG,IAAWlC,GAE7CyE,EAAiBzE,EAAMO,IAXnBP,EAAME,GAAAA,SAwHHiF,EAAuBC,GAAAA,GAC1BA,GAA4B,iBAAXA,EAAAA,CAAAA,IAChBzH,EAA8ByH,EAAOpJ,GAAAA,GACtC2B,EAAAA,CAAAA,IACEc,EAAmCd,EAAnCc,EAAO2D,EAA4BzE,EAA5ByE,EAAQM,EAAoB/E,EAApB+E,EAAW9E,EAASD,EAATC,EAAAA,GAAAA,IAC7BA,EAKHX,EAAKmF,GAAQ,YACP3E,IAAgBzB,SAAAA,IAEhByC,EAAchB,IAAuBrE,EAAIqF,EAAOhB,GAGzCiF,EAAUjF,IAErB0H,EAAuB/C,EAAO3E,KAJ9BiF,EAAUjF,IAAAA,EACVwF,EAAYtF,IAAAA,IAOdV,EAAKwB,GAAO,iBAAAhB,IAEP2E,EAAO3E,IAAuBrE,EAAIgJ,EAAQ3E,KAC7CiF,EAAUjF,IAAAA,EACVwF,EAAYtF,GAAAA,SAGR,GAAI,IAAAC,EAA8B,IACpC+G,EAAgBhH,KACnBsF,EAAYtF,GACZ+E,EAAU7J,QAAS,GAGhBuJ,EAAOvJ,OAAS4F,EAAM5F,OAAQ,IAC5B,IAAIkG,EAAIqD,EAAOvJ,OAAQkG,EAAIN,EAAM5F,OAAQkG,IAAK2D,EAAU3D,IAAAA,OAAK,IAE7D,IAAIA,EAAIN,EAAM5F,OAAQkG,EAAIqD,EAAOvJ,OAAQkG,IAAK2D,EAAU3D,IAAAA,EAAK,QAI7DsG,EAAMC,KAAKD,IAAIjD,EAAOvJ,OAAQ4F,EAAM5F,QAEjCkG,EAAI,EAAGA,EAAIsG,EAAKtG,IAEnBqD,EAAO9F,eAAeyC,KAC1B2D,EAAU3D,IAAAA,QAAK,IAEZ2D,EAAU3D,IAAkBoG,EAAuB/C,EAAOrD,GAAAA,CAAAA,CAAAA,CAAAA,CAzKrDmB,CACcF,EAAMO,EAAS,IAGvCkE,EAAiBzE,EAAMO,GAAAA,EA+OxB6D,EAAAA,SAboBzG,GAAAA,OAAAA,IACbA,EAAMC,EACVgH,EAAiBjH,GACjBgH,EAAgBhH,EAAAA,GAAAA,C,iFC5Jb5B,IAAAA,ENnFJ+D,EOpBEyF,EACa,oBAAXpK,QAAiD,iBAAhBA,OAAO,KACnCkD,EAAwB,oBAAR1E,IAChB2E,EAAwB,oBAARnE,IAChBqL,EACK,oBAAV7B,YAAAA,IACAA,MAAMC,WACM,oBAAZ6B,QAKK7D,EAAmB2D,EAC7BpK,OAAOuK,IAAI,yBACR,oBAAkB,GAUX5I,EAA2ByI,EACrCpK,OAAOuK,IAAI,mBACV,qBAES1J,EAA6BuJ,EACvCpK,OAAOuK,IAAI,eACV,iBTAE/I,GSIa,oBAAVxB,QAAyBA,OAAOwK,STJhBxJ,GAAAA,OAAOjD,UAAUsD,aA4B7Be,EACO,oBAAZkI,SAA2BA,QAAQlI,QACvCkI,QAAQlI,aAAAA,IACDpB,OAAOyJ,sBACd,YAAA1I,OACAf,OAAO0J,oBAAoB3I,GAAKyF,OAC/BxG,OAAOyJ,sBAAsB1I,GAAAA,EAEHf,OAAO0J,oBAEzB/G,EACZ3C,OAAO2C,2BACP,SAAmCV,GAAAA,IAE5BqE,EAAW,CAAC,EAAD,OACjBlF,EAAQa,GAAQZ,SAAQ,YACvBiF,EAAIhF,GAAOtB,OAAO6G,yBAAyB5E,EAAQX,EAAAA,IAE7CgF,CAAAA,ECnEH7C,EA4BF,CAAC,EGyDQ6D,EAAwC,CACpDtK,IAAAA,SAAIwE,EAAOE,GAAAA,GACNA,IAAS7B,EAAa,OAAO2B,EAAAA,IAE3BoF,EAASxE,EAAOZ,GAAAA,IACjBvE,EAAI2J,EAAQlF,GAAAA,OAwInB,SAA2BF,EAAmBoF,EAAalF,GAAAA,IAAAA,EACpDmB,EAAO8D,EAAuBC,EAAQlF,GAAAA,OACrCmB,EACJ,UAAWA,EACVA,EAAKjD,MAAAA,QAAAA,EAGLiD,EAAK7F,WAAAA,IAAAA,OAAAA,EAAL2M,EAAUvJ,KAAKoB,EAAMyE,QAAAA,CACtBP,CARJ,CAtI4BlE,EAAOoF,EAAQlF,GAAAA,IAEnC9B,EAAQgH,EAAOlF,GAAAA,OACjBF,EAAMwE,IAAelG,EAAYF,GAC7BA,EAIJA,IAAU8G,EAAKlF,EAAMc,EAAOZ,IAC/BqF,EAAYvF,GACJA,EAAMa,EAAOX,GAAesF,EACnCxF,EAAMuE,EAAOtB,EACb7E,EACA4B,IAGK5B,CAAAA,EAER3C,IAAAA,SAAIuE,EAAOE,GAAAA,OACHA,KAAQU,EAAOZ,EAAAA,EAEvBJ,QAAAA,SAAQI,GAAAA,OACA8H,QAAQlI,QAAQgB,EAAOZ,GAAAA,EAE/B1E,IAAAA,SACC0E,EACAE,EACA9B,GAAAA,IAEMiD,EAAO8D,EAAuBvE,EAAOZ,GAAQE,GAAAA,GAC/CmB,MAAAA,OAAAA,EAAAA,EAAM/F,IAAK,OAGd+F,EAAK/F,IAAIsD,KAAKoB,EAAMyE,EAAQrG,IAAAA,EACrB,IAEH4B,EAAM6D,EAAW,KAGfwC,EAAUnB,EAAKtE,EAAOZ,GAAQE,GAE9BkI,EAAiC/B,MAAAA,OAAAA,EAAAA,EAAUhI,GAAAA,GAC7C+J,GAAgBA,EAAatH,IAAU1C,EAAAA,OAC1C4B,EAAMa,EAAOX,GAAQ9B,EACrB4B,EAAM+E,EAAU7E,IAAAA,GAAQ,EACjB,GAEJI,EAAGlC,EAAOiI,UAAAA,IAAajI,GAAuB3C,EAAIuE,EAAMc,EAAOZ,IAClE,OAAO,EACRqF,EAAYvF,GACZsF,EAAYtF,EAAAA,CAAAA,OAIZA,EAAMa,EAAOX,KAAU9B,GAEN,iBAAVA,SAAAA,IAENA,GAAuB8B,KAAQF,EAAMa,KAKvCb,EAAMa,EAAOX,GAAQ9B,EACrB4B,EAAM+E,EAAU7E,IAAAA,GAAQ,EACjB,EAERmI,eAAAA,SAAerI,EAAOE,GAAAA,YAAAA,IAEjBgF,EAAKlF,EAAMc,EAAOZ,IAAuBA,KAAQF,EAAMc,GAC1Dd,EAAM+E,EAAU7E,IAAAA,EAChBqF,EAAYvF,GACZsF,EAAYtF,WAGLA,EAAM+E,EAAU7E,GAGpBF,EAAMa,UAAcb,EAAMa,EAAMX,IAAAA,CAC7B,EAIRmF,yBAAAA,SAAyBrF,EAAOE,GAAAA,IACzBoI,EAAQ1H,EAAOZ,GACfqB,EAAOyG,QAAQzC,yBAAyBiD,EAAOpI,GAAAA,OAChDmB,EACE,CACNC,UAAU,EACVC,aAAc,IAAAvB,EAAMC,GAA2C,WAATC,EACtDsB,WAAYH,EAAKG,WACjBpD,MAAOkK,EAAMpI,IALImB,CAAAA,EAQnBkG,eAAAA,WACC5J,EAAI,KAELc,eAAAA,SAAeuB,GAAAA,OACPxB,OAAOC,eAAeuB,EAAMc,EAAAA,EAEpCyH,eAAAA,WACC5K,EAAI,MAQAoI,EAA8C,CAAC,EACrDzG,EAAKwG,GAAa,SAAChG,EAAK0I,GAEvBzC,EAAWjG,GAAO,kBACjB2I,UAAU,GAAKA,UAAU,GAAG,GACrBD,EAAGE,MAAMvN,KAAMsN,UAAAA,CAAAA,IAGxB1C,EAAWsC,eAAiB,SAASrI,EAAOE,GAAAA,OAGpC6F,EAAWzK,IAAKsD,KAAKzD,KAAM6E,EAAOE,OAAAA,EAAMgE,EAEhD6B,EAAWzK,IAAM,SAAS0E,EAAOE,EAAM9B,GAAAA,OAE/B0H,EAAYxK,IAAKsD,KAAKzD,KAAM6E,EAAM,GAAIE,EAAM9B,EAAO4B,EAAM,SCpMpD2I,EAAb,oBAAAC,EAKaC,GAAAA,IAAAA,EAAAA,KAAAA,KAAAA,EAJWhB,EAAAA,KAAAA,GAAAA,EAEA,aA4BH,SAAC7G,EAAW8H,EAAcxG,GAAAA,GAEzB,mBAATtB,GAAyC,mBAAX8H,EAAuB,KACzDC,EAAcD,EACpBA,EAAS9H,EAAAA,IAEHgI,EAAOC,EAAAA,OACN,SAENjI,GAAAA,IAAAA,EAAAA,UAAAA,IAAAA,IAAAA,EAAO+H,GAAAA,IAAAA,IAAAA,EAAAA,UAAAA,OACJlL,EAAAA,MAAAA,EAAAA,EAAAA,EAAAA,EAAAA,GAAAA,EAAAA,EAAAA,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAAA,UAAAA,GAAAA,OAEImL,EAAKE,QAAQlI,GAAM,SAACoC,GAAAA,IAAAA,EAAAA,OAAAA,EAAmB0F,GAAOlK,KAAAA,MAAAA,EAAAA,CAAKuK,EAAM/F,GAAAA,OAAUvF,GAAAA,GAAAA,CAAAA,CAAAA,IAQxE2F,EAAAA,GAJkB,mBAAXsF,GAAuBnL,EAAI,YAClC2E,GAAwD,mBAAlBA,GACzC3E,EAAI,GAKDW,EAAY0C,GAAO,KAChBqB,EAAQU,EAAWkG,GACnB9C,EAAQX,EAAYyD,EAAMjI,OAAAA,GAC5BoI,GAAAA,EAAW,IAEd5F,EAASsF,EAAO3C,GAChBiD,GAAAA,CAIgB/G,CAJL,QAGP+G,EAAU1G,EAAYL,GACrBM,EAAWN,EAAAA,CAAAA,MAEM,oBAAZ9F,SAA2BiH,aAAkBjH,QAChDiH,EAAO6F,MACb,YAAA7F,OACCpB,EAAkBC,EAAOC,GAClBiB,EAAcC,EAAQnB,EAAAA,IAE9B,YAAAzE,MACC8E,EAAYL,GACNzE,CAAAA,KAITwE,EAAkBC,EAAOC,GAClBiB,EAAcC,EAAQnB,GAAAA,CACvB,IAAKrB,GAAwB,iBAATA,EAAmB,cAC7CwC,EAASsF,EAAO9H,MACUwC,EAASxC,GAC/BwC,IAAWS,IAAST,OAAAA,GACpByF,EAAKhE,GAAavD,EAAO8B,GAAAA,GACzBlB,EAAe,KACZgH,EAAa,GACbC,EAAc,GACpBzH,EAAU,WAAWkC,EAA4BhD,EAAMwC,EAAQ8F,EAAGC,GAClEjH,EAAcgH,EAAGC,EAAAA,CAAAA,OAEX/F,CAAAA,CACD7F,EAAI,GAAIqD,EAAAA,EAAAA,KAAAA,mBAG0B,SACzCwI,EACAC,GAAAA,GAGoB,mBAATD,EAAAA,OACH,SAACxJ,GAAAA,IAAAA,IAAAA,EAAAA,UAAAA,OAAenC,EAAAA,MAAAA,EAAAA,EAAAA,EAAAA,EAAAA,GAAAA,EAAAA,EAAAA,EAAAA,EAAAA,IAAAA,EAAAA,EAAAA,GAAAA,UAAAA,GAAAA,OACtBoL,EAAKS,mBAAmB1J,GAAO,SAACoD,GAAAA,OAAeoG,EAAAA,WAAAA,EAAAA,CAAKpG,GAAAA,OAAUvF,GAAAA,GAAAA,EAAAA,IAG5D8L,EAAkBC,EAChBpG,EAASyF,EAAKC,QAAQM,EAAMC,GAAM,SAACH,EAAYC,GACpDI,EAAUL,EACVM,EAAiBL,CAAAA,IAAAA,MAGK,oBAAZhN,SAA2BiH,aAAkBjH,QAChDiH,EAAO6F,MAAK,SAAAQ,GAAAC,MAAa,CAACA,EAAWH,EAAUC,EAAAA,IAEhD,CAACpG,EAAQmG,EAAUC,EAAAA,EA5GQ,kBAAvBf,MAAAA,OAAAA,EAAAA,EAAQkB,aAClB5O,KAAK6O,cAAcnB,EAAQkB,YACM,kBAAvBlB,MAAAA,OAAAA,EAAAA,EAAQoB,aAClB9O,KAAK+O,cAAcrB,EAAQoB,WAAAA,CAAAA,IAAAA,EAAAA,EAAAA,UAAAA,OAAAA,EA4G7BE,YAAAA,SAAiCnJ,GAC3B1C,EAAY0C,IAAOrD,EAAI,GACxBQ,EAAQ6C,KAAOA,EAAOqF,EAAQrF,IAAAA,IAC5BqB,EAAQU,EAAW5H,MACnBgL,EAAQX,EAAYrK,KAAM6F,OAAAA,GAAMkD,OACtCiC,EAAM9H,GAAauH,GAAAA,EACnBjD,EAAWN,GACJ8D,CAAAA,EAAAA,EAGRiE,YAAAA,SACChH,EACAd,GAAAA,IAOeD,GALWe,GAAUA,EAAc/E,IAK3CkG,EAAAA,OACPnC,EAAkBC,EAAOC,GAClBiB,OAAAA,EAAyBlB,EAAAA,EAAAA,EAQjC6H,cAAAA,SAAc9L,GAAAA,KACR6G,EAAc7G,CAAAA,EAAAA,EASpB4L,cAAAA,SAAc5L,GACTA,IAAUyJ,GACblK,EAAI,SAEAgG,EAAcvF,CAAAA,EAAAA,EAGpBiM,aAAAA,SAAkCrJ,EAAS2I,GAAAA,IAGtCvI,EAAAA,IACCA,EAAIuI,EAAQzO,OAAS,EAAGkG,GAAK,EAAGA,IAAK,KACnCkJ,EAAQX,EAAQvI,GAAAA,GACI,IAAtBkJ,EAAMlG,KAAKlJ,QAA6B,YAAboP,EAAMC,GAAkB,CACtDvJ,EAAOsJ,EAAMlM,MAAAA,KAAAA,CAAAA,CAMXgD,GAAK,IACRuI,EAAUA,EAAQ1I,MAAMG,EAAI,QAGvBoJ,EAAmB1I,EAAU,WAAW2I,EAAAA,OAC1CtM,EAAQ6C,GAEJwJ,EAAiBxJ,EAAM2I,GAGxBxO,KAAK+N,QAAQlI,GAAM,SAACoC,GAAAA,OAC1BoH,EAAiBpH,EAAOuG,EAAAA,GAAAA,EAAAA,CAAAA,CA3L3B,GGZM3G,EAAQ,IAAI2F,EAqBLO,GAAoBlG,EAAMkG,QAOgBlG,EAAM0G,mBAAmBgB,KAC/E1H,GAQ4BA,EAAMkH,cAAcQ,KAAK1H,GAQzBA,EAAMgH,cAAcU,KAAK1H,GAO1BA,EAAMqH,aAAaK,KAAK1H,GAMzBA,EAAMmH,YAAYO,KAAK1H,GAUvBA,EAAMoH,YAAYM,KAAK1H,GAAAA,EAAAA,GAAAA,E","sources":["../node_modules/lodash/_DataView.js","../node_modules/lodash/_Hash.js","../node_modules/lodash/_ListCache.js","../node_modules/lodash/_Map.js","../node_modules/lodash/_MapCache.js","../node_modules/lodash/_Promise.js","../node_modules/lodash/_Set.js","../node_modules/lodash/_SetCache.js","../node_modules/lodash/_Stack.js","../node_modules/lodash/_Symbol.js","../node_modules/lodash/_Uint8Array.js","../node_modules/lodash/_WeakMap.js","../node_modules/immer/src/utils/errors.ts","../node_modules/immer/src/utils/common.ts","../node_modules/immer/src/utils/plugins.ts","../node_modules/immer/src/core/scope.ts","../node_modules/immer/src/core/finalize.ts","../node_modules/immer/src/core/proxy.ts","../node_modules/immer/src/core/immerClass.ts","../node_modules/immer/src/core/current.ts","../node_modules/immer/src/plugins/es5.ts","../node_modules/immer/src/immer.ts","../node_modules/immer/src/utils/env.ts"],"sourcesContent":["var getNative = require('./_getNative'),\n    root = require('./_root');\n\n/* Built-in method references that are verified to be native. */\nvar DataView = getNative(root, 'DataView');\n\nmodule.exports = DataView;\n","var hashClear = require('./_hashClear'),\n    hashDelete = require('./_hashDelete'),\n    hashGet = require('./_hashGet'),\n    hashHas = require('./_hashHas'),\n    hashSet = require('./_hashSet');\n\n/**\n * Creates a hash object.\n *\n * @private\n * @constructor\n * @param {Array} [entries] The key-value pairs to cache.\n */\nfunction Hash(entries) {\n  var index = -1,\n      length = entries == null ? 0 : entries.length;\n\n  this.clear();\n  while (++index < length) {\n    var entry = entries[index];\n    this.set(entry[0], entry[1]);\n  }\n}\n\n// Add methods to `Hash`.\nHash.prototype.clear = hashClear;\nHash.prototype['delete'] = hashDelete;\nHash.prototype.get = hashGet;\nHash.prototype.has = hashHas;\nHash.prototype.set = hashSet;\n\nmodule.exports = Hash;\n","var listCacheClear = require('./_listCacheClear'),\n    listCacheDelete = require('./_listCacheDelete'),\n    listCacheGet = require('./_listCacheGet'),\n    listCacheHas = require('./_listCacheHas'),\n    listCacheSet = require('./_listCacheSet');\n\n/**\n * Creates an list cache object.\n *\n * @private\n * @constructor\n * @param {Array} [entries] The key-value pairs to cache.\n */\nfunction ListCache(entries) {\n  var index = -1,\n      length = entries == null ? 0 : entries.length;\n\n  this.clear();\n  while (++index < length) {\n    var entry = entries[index];\n    this.set(entry[0], entry[1]);\n  }\n}\n\n// Add methods to `ListCache`.\nListCache.prototype.clear = listCacheClear;\nListCache.prototype['delete'] = listCacheDelete;\nListCache.prototype.get = listCacheGet;\nListCache.prototype.has = listCacheHas;\nListCache.prototype.set = listCacheSet;\n\nmodule.exports = ListCache;\n","var getNative = require('./_getNative'),\n    root = require('./_root');\n\n/* Built-in method references that are verified to be native. */\nvar Map = getNative(root, 'Map');\n\nmodule.exports = Map;\n","var mapCacheClear = require('./_mapCacheClear'),\n    mapCacheDelete = require('./_mapCacheDelete'),\n    mapCacheGet = require('./_mapCacheGet'),\n    mapCacheHas = require('./_mapCacheHas'),\n    mapCacheSet = require('./_mapCacheSet');\n\n/**\n * Creates a map cache object to store key-value pairs.\n *\n * @private\n * @constructor\n * @param {Array} [entries] The key-value pairs to cache.\n */\nfunction MapCache(entries) {\n  var index = -1,\n      length = entries == null ? 0 : entries.length;\n\n  this.clear();\n  while (++index < length) {\n    var entry = entries[index];\n    this.set(entry[0], entry[1]);\n  }\n}\n\n// Add methods to `MapCache`.\nMapCache.prototype.clear = mapCacheClear;\nMapCache.prototype['delete'] = mapCacheDelete;\nMapCache.prototype.get = mapCacheGet;\nMapCache.prototype.has = mapCacheHas;\nMapCache.prototype.set = mapCacheSet;\n\nmodule.exports = MapCache;\n","var getNative = require('./_getNative'),\n    root = require('./_root');\n\n/* Built-in method references that are verified to be native. */\nvar Promise = getNative(root, 'Promise');\n\nmodule.exports = Promise;\n","var getNative = require('./_getNative'),\n    root = require('./_root');\n\n/* Built-in method references that are verified to be native. */\nvar Set = getNative(root, 'Set');\n\nmodule.exports = Set;\n","var MapCache = require('./_MapCache'),\n    setCacheAdd = require('./_setCacheAdd'),\n    setCacheHas = require('./_setCacheHas');\n\n/**\n *\n * Creates an array cache object to store unique values.\n *\n * @private\n * @constructor\n * @param {Array} [values] The values to cache.\n */\nfunction SetCache(values) {\n  var index = -1,\n      length = values == null ? 0 : values.length;\n\n  this.__data__ = new MapCache;\n  while (++index < length) {\n    this.add(values[index]);\n  }\n}\n\n// Add methods to `SetCache`.\nSetCache.prototype.add = SetCache.prototype.push = setCacheAdd;\nSetCache.prototype.has = setCacheHas;\n\nmodule.exports = SetCache;\n","var ListCache = require('./_ListCache'),\n    stackClear = require('./_stackClear'),\n    stackDelete = require('./_stackDelete'),\n    stackGet = require('./_stackGet'),\n    stackHas = require('./_stackHas'),\n    stackSet = require('./_stackSet');\n\n/**\n * Creates a stack cache object to store key-value pairs.\n *\n * @private\n * @constructor\n * @param {Array} [entries] The key-value pairs to cache.\n */\nfunction Stack(entries) {\n  var data = this.__data__ = new ListCache(entries);\n  this.size = data.size;\n}\n\n// Add methods to `Stack`.\nStack.prototype.clear = stackClear;\nStack.prototype['delete'] = stackDelete;\nStack.prototype.get = stackGet;\nStack.prototype.has = stackHas;\nStack.prototype.set = stackSet;\n\nmodule.exports = Stack;\n","var root = require('./_root');\n\n/** Built-in value references. */\nvar Symbol = root.Symbol;\n\nmodule.exports = Symbol;\n","var root = require('./_root');\n\n/** Built-in value references. */\nvar Uint8Array = root.Uint8Array;\n\nmodule.exports = Uint8Array;\n","var getNative = require('./_getNative'),\n    root = require('./_root');\n\n/* Built-in method references that are verified to be native. */\nvar WeakMap = getNative(root, 'WeakMap');\n\nmodule.exports = WeakMap;\n","const errors = {\n\t0: \"Illegal state\",\n\t1: \"Immer drafts cannot have computed properties\",\n\t2: \"This object has been frozen and should not be mutated\",\n\t3(data: any) {\n\t\treturn (\n\t\t\t\"Cannot use a proxy that has been revoked. Did you pass an object from inside an immer function to an async process? \" +\n\t\t\tdata\n\t\t)\n\t},\n\t4: \"An immer producer returned a new value *and* modified its draft. Either return a new value *or* modify the draft.\",\n\t5: \"Immer forbids circular references\",\n\t6: \"The first or second argument to `produce` must be a function\",\n\t7: \"The third argument to `produce` must be a function or undefined\",\n\t8: \"First argument to `createDraft` must be a plain object, an array, or an immerable object\",\n\t9: \"First argument to `finishDraft` must be a draft returned by `createDraft`\",\n\t10: \"The given draft is already finalized\",\n\t11: \"Object.defineProperty() cannot be used on an Immer draft\",\n\t12: \"Object.setPrototypeOf() cannot be used on an Immer draft\",\n\t13: \"Immer only supports deleting array indices\",\n\t14: \"Immer only supports setting array indices and the 'length' property\",\n\t15(path: string) {\n\t\treturn \"Cannot apply patch, path doesn't resolve: \" + path\n\t},\n\t16: 'Sets cannot have \"replace\" patches.',\n\t17(op: string) {\n\t\treturn \"Unsupported patch operation: \" + op\n\t},\n\t18(plugin: string) {\n\t\treturn `The plugin for '${plugin}' has not been loaded into Immer. To enable the plugin, import and call \\`enable${plugin}()\\` when initializing your application.`\n\t},\n\t20: \"Cannot use proxies if Proxy, Proxy.revocable or Reflect are not available\",\n\t21(thing: string) {\n\t\treturn `produce can only be called on things that are draftable: plain objects, arrays, Map, Set or classes that are marked with '[immerable]: true'. Got '${thing}'`\n\t},\n\t22(thing: string) {\n\t\treturn `'current' expects a draft, got: ${thing}`\n\t},\n\t23(thing: string) {\n\t\treturn `'original' expects a draft, got: ${thing}`\n\t},\n\t24: \"Patching reserved attributes like __proto__, prototype and constructor is not allowed\"\n} as const\n\nexport function die(error: keyof typeof errors, ...args: any[]): never {\n\tif (__DEV__) {\n\t\tconst e = errors[error]\n\t\tconst msg = !e\n\t\t\t? \"unknown error nr: \" + error\n\t\t\t: typeof e === \"function\"\n\t\t\t? e.apply(null, args as any)\n\t\t\t: e\n\t\tthrow new Error(`[Immer] ${msg}`)\n\t}\n\tthrow new Error(\n\t\t`[Immer] minified error nr: ${error}${\n\t\t\targs.length ? \" \" + args.map(s => `'${s}'`).join(\",\") : \"\"\n\t\t}. Find the full error at: https://bit.ly/3cXEKWf`\n\t)\n}\n","import {\n\tDRAFT_STATE,\n\tDRAFTABLE,\n\thasSet,\n\tObjectish,\n\tDrafted,\n\tAnyObject,\n\tAnyMap,\n\tAnySet,\n\tImmerState,\n\thasMap,\n\tArchtype,\n\tdie\n} from \"../internal\"\n\n/** Returns true if the given value is an Immer draft */\n/*#__PURE__*/\nexport function isDraft(value: any): boolean {\n\treturn !!value && !!value[DRAFT_STATE]\n}\n\n/** Returns true if the given value can be drafted by Immer */\n/*#__PURE__*/\nexport function isDraftable(value: any): boolean {\n\tif (!value) return false\n\treturn (\n\t\tisPlainObject(value) ||\n\t\tArray.isArray(value) ||\n\t\t!!value[DRAFTABLE] ||\n\t\t!!value.constructor[DRAFTABLE] ||\n\t\tisMap(value) ||\n\t\tisSet(value)\n\t)\n}\n\nconst objectCtorString = Object.prototype.constructor.toString()\n/*#__PURE__*/\nexport function isPlainObject(value: any): boolean {\n\tif (!value || typeof value !== \"object\") return false\n\tconst proto = Object.getPrototypeOf(value)\n\tif (proto === null) {\n\t\treturn true\n\t}\n\tconst Ctor =\n\t\tObject.hasOwnProperty.call(proto, \"constructor\") && proto.constructor\n\n\tif (Ctor === Object) return true\n\n\treturn (\n\t\ttypeof Ctor == \"function\" &&\n\t\tFunction.toString.call(Ctor) === objectCtorString\n\t)\n}\n\n/** Get the underlying object that is represented by the given draft */\n/*#__PURE__*/\nexport function original<T>(value: T): T | undefined\nexport function original(value: Drafted<any>): any {\n\tif (!isDraft(value)) die(23, value)\n\treturn value[DRAFT_STATE].base_\n}\n\n/*#__PURE__*/\nexport const ownKeys: (target: AnyObject) => PropertyKey[] =\n\ttypeof Reflect !== \"undefined\" && Reflect.ownKeys\n\t\t? Reflect.ownKeys\n\t\t: typeof Object.getOwnPropertySymbols !== \"undefined\"\n\t\t? obj =>\n\t\t\t\tObject.getOwnPropertyNames(obj).concat(\n\t\t\t\t\tObject.getOwnPropertySymbols(obj) as any\n\t\t\t\t)\n\t\t: /* istanbul ignore next */ Object.getOwnPropertyNames\n\nexport const getOwnPropertyDescriptors =\n\tObject.getOwnPropertyDescriptors ||\n\tfunction getOwnPropertyDescriptors(target: any) {\n\t\t// Polyfill needed for Hermes and IE, see https://github.com/facebook/hermes/issues/274\n\t\tconst res: any = {}\n\t\townKeys(target).forEach(key => {\n\t\t\tres[key] = Object.getOwnPropertyDescriptor(target, key)\n\t\t})\n\t\treturn res\n\t}\n\nexport function each<T extends Objectish>(\n\tobj: T,\n\titer: (key: string | number, value: any, source: T) => void,\n\tenumerableOnly?: boolean\n): void\nexport function each(obj: any, iter: any, enumerableOnly = false) {\n\tif (getArchtype(obj) === Archtype.Object) {\n\t\t;(enumerableOnly ? Object.keys : ownKeys)(obj).forEach(key => {\n\t\t\tif (!enumerableOnly || typeof key !== \"symbol\") iter(key, obj[key], obj)\n\t\t})\n\t} else {\n\t\tobj.forEach((entry: any, index: any) => iter(index, entry, obj))\n\t}\n}\n\n/*#__PURE__*/\nexport function getArchtype(thing: any): Archtype {\n\t/* istanbul ignore next */\n\tconst state: undefined | ImmerState = thing[DRAFT_STATE]\n\treturn state\n\t\t? state.type_ > 3\n\t\t\t? state.type_ - 4 // cause Object and Array map back from 4 and 5\n\t\t\t: (state.type_ as any) // others are the same\n\t\t: Array.isArray(thing)\n\t\t? Archtype.Array\n\t\t: isMap(thing)\n\t\t? Archtype.Map\n\t\t: isSet(thing)\n\t\t? Archtype.Set\n\t\t: Archtype.Object\n}\n\n/*#__PURE__*/\nexport function has(thing: any, prop: PropertyKey): boolean {\n\treturn getArchtype(thing) === Archtype.Map\n\t\t? thing.has(prop)\n\t\t: Object.prototype.hasOwnProperty.call(thing, prop)\n}\n\n/*#__PURE__*/\nexport function get(thing: AnyMap | AnyObject, prop: PropertyKey): any {\n\t// @ts-ignore\n\treturn getArchtype(thing) === Archtype.Map ? thing.get(prop) : thing[prop]\n}\n\n/*#__PURE__*/\nexport function set(thing: any, propOrOldValue: PropertyKey, value: any) {\n\tconst t = getArchtype(thing)\n\tif (t === Archtype.Map) thing.set(propOrOldValue, value)\n\telse if (t === Archtype.Set) {\n\t\tthing.delete(propOrOldValue)\n\t\tthing.add(value)\n\t} else thing[propOrOldValue] = value\n}\n\n/*#__PURE__*/\nexport function is(x: any, y: any): boolean {\n\t// From: https://github.com/facebook/fbjs/blob/c69904a511b900266935168223063dd8772dfc40/packages/fbjs/src/core/shallowEqual.js\n\tif (x === y) {\n\t\treturn x !== 0 || 1 / x === 1 / y\n\t} else {\n\t\treturn x !== x && y !== y\n\t}\n}\n\n/*#__PURE__*/\nexport function isMap(target: any): target is AnyMap {\n\treturn hasMap && target instanceof Map\n}\n\n/*#__PURE__*/\nexport function isSet(target: any): target is AnySet {\n\treturn hasSet && target instanceof Set\n}\n/*#__PURE__*/\nexport function latest(state: ImmerState): any {\n\treturn state.copy_ || state.base_\n}\n\n/*#__PURE__*/\nexport function shallowCopy(base: any) {\n\tif (Array.isArray(base)) return Array.prototype.slice.call(base)\n\tconst descriptors = getOwnPropertyDescriptors(base)\n\tdelete descriptors[DRAFT_STATE as any]\n\tlet keys = ownKeys(descriptors)\n\tfor (let i = 0; i < keys.length; i++) {\n\t\tconst key: any = keys[i]\n\t\tconst desc = descriptors[key]\n\t\tif (desc.writable === false) {\n\t\t\tdesc.writable = true\n\t\t\tdesc.configurable = true\n\t\t}\n\t\t// like object.assign, we will read any _own_, get/set accessors. This helps in dealing\n\t\t// with libraries that trap values, like mobx or vue\n\t\t// unlike object.assign, non-enumerables will be copied as well\n\t\tif (desc.get || desc.set)\n\t\t\tdescriptors[key] = {\n\t\t\t\tconfigurable: true,\n\t\t\t\twritable: true, // could live with !!desc.set as well here...\n\t\t\t\tenumerable: desc.enumerable,\n\t\t\t\tvalue: base[key]\n\t\t\t}\n\t}\n\treturn Object.create(Object.getPrototypeOf(base), descriptors)\n}\n\n/**\n * Freezes draftable objects. Returns the original object.\n * By default freezes shallowly, but if the second argument is `true` it will freeze recursively.\n *\n * @param obj\n * @param deep\n */\nexport function freeze<T>(obj: T, deep?: boolean): T\nexport function freeze<T>(obj: any, deep: boolean = false): T {\n\tif (isFrozen(obj) || isDraft(obj) || !isDraftable(obj)) return obj\n\tif (getArchtype(obj) > 1 /* Map or Set */) {\n\t\tobj.set = obj.add = obj.clear = obj.delete = dontMutateFrozenCollections as any\n\t}\n\tObject.freeze(obj)\n\tif (deep) each(obj, (key, value) => freeze(value, true), true)\n\treturn obj\n}\n\nfunction dontMutateFrozenCollections() {\n\tdie(2)\n}\n\nexport function isFrozen(obj: any): boolean {\n\tif (obj == null || typeof obj !== \"object\") return true\n\t// See #600, IE dies on non-objects in Object.isFrozen\n\treturn Object.isFrozen(obj)\n}\n","import {\n\tImmerState,\n\tPatch,\n\tImmerScope,\n\tDrafted,\n\tAnyObject,\n\tImmerBaseState,\n\tAnyMap,\n\tAnySet,\n\tProxyType,\n\tdie\n} from \"../internal\"\n\n/** Plugin utilities */\nconst plugins: {\n\tPatches?: {\n\t\tgeneratePatches_(\n\t\t\tstate: ImmerState,\n\t\t\tbasePath: PatchPath,\n\t\t\tpatches: Patch[],\n\t\t\tinversePatches: Patch[]\n\t\t): void\n\t\tgenerateReplacementPatches_(\n\t\t\tbase: any,\n\t\t\treplacement: any,\n\t\t\tpatches: Patch[],\n\t\t\tinversePatches: Patch[]\n\t\t): void\n\t\tapplyPatches_<T>(draft: T, patches: Patch[]): T\n\t}\n\tES5?: {\n\t\twillFinalizeES5_(scope: ImmerScope, result: any, isReplaced: boolean): void\n\t\tcreateES5Proxy_<T>(\n\t\t\tbase: T,\n\t\t\tparent?: ImmerState\n\t\t): Drafted<T, ES5ObjectState | ES5ArrayState>\n\t\thasChanges_(state: ES5ArrayState | ES5ObjectState): boolean\n\t}\n\tMapSet?: {\n\t\tproxyMap_<T extends AnyMap>(target: T, parent?: ImmerState): T\n\t\tproxySet_<T extends AnySet>(target: T, parent?: ImmerState): T\n\t}\n} = {}\n\ntype Plugins = typeof plugins\n\nexport function getPlugin<K extends keyof Plugins>(\n\tpluginKey: K\n): Exclude<Plugins[K], undefined> {\n\tconst plugin = plugins[pluginKey]\n\tif (!plugin) {\n\t\tdie(18, pluginKey)\n\t}\n\t// @ts-ignore\n\treturn plugin\n}\n\nexport function loadPlugin<K extends keyof Plugins>(\n\tpluginKey: K,\n\timplementation: Plugins[K]\n): void {\n\tif (!plugins[pluginKey]) plugins[pluginKey] = implementation\n}\n\n/** ES5 Plugin */\n\ninterface ES5BaseState extends ImmerBaseState {\n\tassigned_: {[key: string]: any}\n\tparent_?: ImmerState\n\trevoked_: boolean\n}\n\nexport interface ES5ObjectState extends ES5BaseState {\n\ttype_: ProxyType.ES5Object\n\tdraft_: Drafted<AnyObject, ES5ObjectState>\n\tbase_: AnyObject\n\tcopy_: AnyObject | null\n}\n\nexport interface ES5ArrayState extends ES5BaseState {\n\ttype_: ProxyType.ES5Array\n\tdraft_: Drafted<AnyObject, ES5ArrayState>\n\tbase_: any\n\tcopy_: any\n}\n\n/** Map / Set plugin */\n\nexport interface MapState extends ImmerBaseState {\n\ttype_: ProxyType.Map\n\tcopy_: AnyMap | undefined\n\tassigned_: Map<any, boolean> | undefined\n\tbase_: AnyMap\n\trevoked_: boolean\n\tdraft_: Drafted<AnyMap, MapState>\n}\n\nexport interface SetState extends ImmerBaseState {\n\ttype_: ProxyType.Set\n\tcopy_: AnySet | undefined\n\tbase_: AnySet\n\tdrafts_: Map<any, Drafted> // maps the original value to the draft value in the new set\n\trevoked_: boolean\n\tdraft_: Drafted<AnySet, SetState>\n}\n\n/** Patches plugin */\n\nexport type PatchPath = (string | number)[]\n","import {\n\tPatch,\n\tPatchListener,\n\tDrafted,\n\tImmer,\n\tDRAFT_STATE,\n\tImmerState,\n\tProxyType,\n\tgetPlugin\n} from \"../internal\"\nimport {die} from \"../utils/errors\"\n\n/** Each scope represents a `produce` call. */\n\nexport interface ImmerScope {\n\tpatches_?: Patch[]\n\tinversePatches_?: Patch[]\n\tcanAutoFreeze_: boolean\n\tdrafts_: any[]\n\tparent_?: ImmerScope\n\tpatchListener_?: PatchListener\n\timmer_: Immer\n\tunfinalizedDrafts_: number\n}\n\nlet currentScope: ImmerScope | undefined\n\nexport function getCurrentScope() {\n\tif (__DEV__ && !currentScope) die(0)\n\treturn currentScope!\n}\n\nfunction createScope(\n\tparent_: ImmerScope | undefined,\n\timmer_: Immer\n): ImmerScope {\n\treturn {\n\t\tdrafts_: [],\n\t\tparent_,\n\t\timmer_,\n\t\t// Whenever the modified draft contains a draft from another scope, we\n\t\t// need to prevent auto-freezing so the unowned draft can be finalized.\n\t\tcanAutoFreeze_: true,\n\t\tunfinalizedDrafts_: 0\n\t}\n}\n\nexport function usePatchesInScope(\n\tscope: ImmerScope,\n\tpatchListener?: PatchListener\n) {\n\tif (patchListener) {\n\t\tgetPlugin(\"Patches\") // assert we have the plugin\n\t\tscope.patches_ = []\n\t\tscope.inversePatches_ = []\n\t\tscope.patchListener_ = patchListener\n\t}\n}\n\nexport function revokeScope(scope: ImmerScope) {\n\tleaveScope(scope)\n\tscope.drafts_.forEach(revokeDraft)\n\t// @ts-ignore\n\tscope.drafts_ = null\n}\n\nexport function leaveScope(scope: ImmerScope) {\n\tif (scope === currentScope) {\n\t\tcurrentScope = scope.parent_\n\t}\n}\n\nexport function enterScope(immer: Immer) {\n\treturn (currentScope = createScope(currentScope, immer))\n}\n\nfunction revokeDraft(draft: Drafted) {\n\tconst state: ImmerState = draft[DRAFT_STATE]\n\tif (\n\t\tstate.type_ === ProxyType.ProxyObject ||\n\t\tstate.type_ === ProxyType.ProxyArray\n\t)\n\t\tstate.revoke_()\n\telse state.revoked_ = true\n}\n","import {\n\tImmerScope,\n\tDRAFT_STATE,\n\tisDraftable,\n\tNOTHING,\n\tPatchPath,\n\teach,\n\thas,\n\tfreeze,\n\tImmerState,\n\tisDraft,\n\tSetState,\n\tset,\n\tProxyType,\n\tgetPlugin,\n\tdie,\n\trevokeScope,\n\tisFrozen,\n\tshallowCopy\n} from \"../internal\"\n\nexport function processResult(result: any, scope: ImmerScope) {\n\tscope.unfinalizedDrafts_ = scope.drafts_.length\n\tconst baseDraft = scope.drafts_![0]\n\tconst isReplaced = result !== undefined && result !== baseDraft\n\tif (!scope.immer_.useProxies_)\n\t\tgetPlugin(\"ES5\").willFinalizeES5_(scope, result, isReplaced)\n\tif (isReplaced) {\n\t\tif (baseDraft[DRAFT_STATE].modified_) {\n\t\t\trevokeScope(scope)\n\t\t\tdie(4)\n\t\t}\n\t\tif (isDraftable(result)) {\n\t\t\t// Finalize the result in case it contains (or is) a subset of the draft.\n\t\t\tresult = finalize(scope, result)\n\t\t\tif (!scope.parent_) maybeFreeze(scope, result)\n\t\t}\n\t\tif (scope.patches_) {\n\t\t\tgetPlugin(\"Patches\").generateReplacementPatches_(\n\t\t\t\tbaseDraft[DRAFT_STATE].base_,\n\t\t\t\tresult,\n\t\t\t\tscope.patches_,\n\t\t\t\tscope.inversePatches_!\n\t\t\t)\n\t\t}\n\t} else {\n\t\t// Finalize the base draft.\n\t\tresult = finalize(scope, baseDraft, [])\n\t}\n\trevokeScope(scope)\n\tif (scope.patches_) {\n\t\tscope.patchListener_!(scope.patches_, scope.inversePatches_!)\n\t}\n\treturn result !== NOTHING ? result : undefined\n}\n\nfunction finalize(rootScope: ImmerScope, value: any, path?: PatchPath) {\n\t// Don't recurse in tho recursive data structures\n\tif (isFrozen(value)) return value\n\n\tconst state: ImmerState = value[DRAFT_STATE]\n\t// A plain object, might need freezing, might contain drafts\n\tif (!state) {\n\t\teach(\n\t\t\tvalue,\n\t\t\t(key, childValue) =>\n\t\t\t\tfinalizeProperty(rootScope, state, value, key, childValue, path),\n\t\t\ttrue // See #590, don't recurse into non-enumerable of non drafted objects\n\t\t)\n\t\treturn value\n\t}\n\t// Never finalize drafts owned by another scope.\n\tif (state.scope_ !== rootScope) return value\n\t// Unmodified draft, return the (frozen) original\n\tif (!state.modified_) {\n\t\tmaybeFreeze(rootScope, state.base_, true)\n\t\treturn state.base_\n\t}\n\t// Not finalized yet, let's do that now\n\tif (!state.finalized_) {\n\t\tstate.finalized_ = true\n\t\tstate.scope_.unfinalizedDrafts_--\n\t\tconst result =\n\t\t\t// For ES5, create a good copy from the draft first, with added keys and without deleted keys.\n\t\t\tstate.type_ === ProxyType.ES5Object || state.type_ === ProxyType.ES5Array\n\t\t\t\t? (state.copy_ = shallowCopy(state.draft_))\n\t\t\t\t: state.copy_\n\t\t// Finalize all children of the copy\n\t\t// For sets we clone before iterating, otherwise we can get in endless loop due to modifying during iteration, see #628\n\t\t// Although the original test case doesn't seem valid anyway, so if this in the way we can turn the next line\n\t\t// back to each(result, ....)\n\t\teach(\n\t\t\tstate.type_ === ProxyType.Set ? new Set(result) : result,\n\t\t\t(key, childValue) =>\n\t\t\t\tfinalizeProperty(rootScope, state, result, key, childValue, path)\n\t\t)\n\t\t// everything inside is frozen, we can freeze here\n\t\tmaybeFreeze(rootScope, result, false)\n\t\t// first time finalizing, let's create those patches\n\t\tif (path && rootScope.patches_) {\n\t\t\tgetPlugin(\"Patches\").generatePatches_(\n\t\t\t\tstate,\n\t\t\t\tpath,\n\t\t\t\trootScope.patches_,\n\t\t\t\trootScope.inversePatches_!\n\t\t\t)\n\t\t}\n\t}\n\treturn state.copy_\n}\n\nfunction finalizeProperty(\n\trootScope: ImmerScope,\n\tparentState: undefined | ImmerState,\n\ttargetObject: any,\n\tprop: string | number,\n\tchildValue: any,\n\trootPath?: PatchPath\n) {\n\tif (__DEV__ && childValue === targetObject) die(5)\n\tif (isDraft(childValue)) {\n\t\tconst path =\n\t\t\trootPath &&\n\t\t\tparentState &&\n\t\t\tparentState!.type_ !== ProxyType.Set && // Set objects are atomic since they have no keys.\n\t\t\t!has((parentState as Exclude<ImmerState, SetState>).assigned_!, prop) // Skip deep patches for assigned keys.\n\t\t\t\t? rootPath!.concat(prop)\n\t\t\t\t: undefined\n\t\t// Drafts owned by `scope` are finalized here.\n\t\tconst res = finalize(rootScope, childValue, path)\n\t\tset(targetObject, prop, res)\n\t\t// Drafts from another scope must prevented to be frozen\n\t\t// if we got a draft back from finalize, we're in a nested produce and shouldn't freeze\n\t\tif (isDraft(res)) {\n\t\t\trootScope.canAutoFreeze_ = false\n\t\t} else return\n\t}\n\t// Search new objects for unfinalized drafts. Frozen objects should never contain drafts.\n\tif (isDraftable(childValue) && !isFrozen(childValue)) {\n\t\tif (!rootScope.immer_.autoFreeze_ && rootScope.unfinalizedDrafts_ < 1) {\n\t\t\t// optimization: if an object is not a draft, and we don't have to\n\t\t\t// deepfreeze everything, and we are sure that no drafts are left in the remaining object\n\t\t\t// cause we saw and finalized all drafts already; we can stop visiting the rest of the tree.\n\t\t\t// This benefits especially adding large data tree's without further processing.\n\t\t\t// See add-data.js perf test\n\t\t\treturn\n\t\t}\n\t\tfinalize(rootScope, childValue)\n\t\t// immer deep freezes plain objects, so if there is no parent state, we freeze as well\n\t\tif (!parentState || !parentState.scope_.parent_)\n\t\t\tmaybeFreeze(rootScope, childValue)\n\t}\n}\n\nfunction maybeFreeze(scope: ImmerScope, value: any, deep = false) {\n\tif (scope.immer_.autoFreeze_ && scope.canAutoFreeze_) {\n\t\tfreeze(value, deep)\n\t}\n}\n","import {\n\teach,\n\thas,\n\tis,\n\tisDraftable,\n\tshallowCopy,\n\tlatest,\n\tImmerBaseState,\n\tImmerState,\n\tDrafted,\n\tAnyObject,\n\tAnyArray,\n\tObjectish,\n\tgetCurrentScope,\n\tDRAFT_STATE,\n\tdie,\n\tcreateProxy,\n\tProxyType\n} from \"../internal\"\n\ninterface ProxyBaseState extends ImmerBaseState {\n\tassigned_: {\n\t\t[property: string]: boolean\n\t}\n\tparent_?: ImmerState\n\trevoke_(): void\n}\n\nexport interface ProxyObjectState extends ProxyBaseState {\n\ttype_: ProxyType.ProxyObject\n\tbase_: any\n\tcopy_: any\n\tdraft_: Drafted<AnyObject, ProxyObjectState>\n}\n\nexport interface ProxyArrayState extends ProxyBaseState {\n\ttype_: ProxyType.ProxyArray\n\tbase_: AnyArray\n\tcopy_: AnyArray | null\n\tdraft_: Drafted<AnyArray, ProxyArrayState>\n}\n\ntype ProxyState = ProxyObjectState | ProxyArrayState\n\n/**\n * Returns a new draft of the `base` object.\n *\n * The second argument is the parent draft-state (used internally).\n */\nexport function createProxyProxy<T extends Objectish>(\n\tbase: T,\n\tparent?: ImmerState\n): Drafted<T, ProxyState> {\n\tconst isArray = Array.isArray(base)\n\tconst state: ProxyState = {\n\t\ttype_: isArray ? ProxyType.ProxyArray : (ProxyType.ProxyObject as any),\n\t\t// Track which produce call this is associated with.\n\t\tscope_: parent ? parent.scope_ : getCurrentScope()!,\n\t\t// True for both shallow and deep changes.\n\t\tmodified_: false,\n\t\t// Used during finalization.\n\t\tfinalized_: false,\n\t\t// Track which properties have been assigned (true) or deleted (false).\n\t\tassigned_: {},\n\t\t// The parent draft state.\n\t\tparent_: parent,\n\t\t// The base state.\n\t\tbase_: base,\n\t\t// The base proxy.\n\t\tdraft_: null as any, // set below\n\t\t// The base copy with any updated values.\n\t\tcopy_: null,\n\t\t// Called by the `produce` function.\n\t\trevoke_: null as any,\n\t\tisManual_: false\n\t}\n\n\t// the traps must target something, a bit like the 'real' base.\n\t// but also, we need to be able to determine from the target what the relevant state is\n\t// (to avoid creating traps per instance to capture the state in closure,\n\t// and to avoid creating weird hidden properties as well)\n\t// So the trick is to use 'state' as the actual 'target'! (and make sure we intercept everything)\n\t// Note that in the case of an array, we put the state in an array to have better Reflect defaults ootb\n\tlet target: T = state as any\n\tlet traps: ProxyHandler<object | Array<any>> = objectTraps\n\tif (isArray) {\n\t\ttarget = [state] as any\n\t\ttraps = arrayTraps\n\t}\n\n\tconst {revoke, proxy} = Proxy.revocable(target, traps)\n\tstate.draft_ = proxy as any\n\tstate.revoke_ = revoke\n\treturn proxy as any\n}\n\n/**\n * Object drafts\n */\nexport const objectTraps: ProxyHandler<ProxyState> = {\n\tget(state, prop) {\n\t\tif (prop === DRAFT_STATE) return state\n\n\t\tconst source = latest(state)\n\t\tif (!has(source, prop)) {\n\t\t\t// non-existing or non-own property...\n\t\t\treturn readPropFromProto(state, source, prop)\n\t\t}\n\t\tconst value = source[prop]\n\t\tif (state.finalized_ || !isDraftable(value)) {\n\t\t\treturn value\n\t\t}\n\t\t// Check for existing draft in modified state.\n\t\t// Assigned values are never drafted. This catches any drafts we created, too.\n\t\tif (value === peek(state.base_, prop)) {\n\t\t\tprepareCopy(state)\n\t\t\treturn (state.copy_![prop as any] = createProxy(\n\t\t\t\tstate.scope_.immer_,\n\t\t\t\tvalue,\n\t\t\t\tstate\n\t\t\t))\n\t\t}\n\t\treturn value\n\t},\n\thas(state, prop) {\n\t\treturn prop in latest(state)\n\t},\n\townKeys(state) {\n\t\treturn Reflect.ownKeys(latest(state))\n\t},\n\tset(\n\t\tstate: ProxyObjectState,\n\t\tprop: string /* strictly not, but helps TS */,\n\t\tvalue\n\t) {\n\t\tconst desc = getDescriptorFromProto(latest(state), prop)\n\t\tif (desc?.set) {\n\t\t\t// special case: if this write is captured by a setter, we have\n\t\t\t// to trigger it with the correct context\n\t\t\tdesc.set.call(state.draft_, value)\n\t\t\treturn true\n\t\t}\n\t\tif (!state.modified_) {\n\t\t\t// the last check is because we need to be able to distinguish setting a non-existing to undefined (which is a change)\n\t\t\t// from setting an existing property with value undefined to undefined (which is not a change)\n\t\t\tconst current = peek(latest(state), prop)\n\t\t\t// special case, if we assigning the original value to a draft, we can ignore the assignment\n\t\t\tconst currentState: ProxyObjectState = current?.[DRAFT_STATE]\n\t\t\tif (currentState && currentState.base_ === value) {\n\t\t\t\tstate.copy_![prop] = value\n\t\t\t\tstate.assigned_[prop] = false\n\t\t\t\treturn true\n\t\t\t}\n\t\t\tif (is(value, current) && (value !== undefined || has(state.base_, prop)))\n\t\t\t\treturn true\n\t\t\tprepareCopy(state)\n\t\t\tmarkChanged(state)\n\t\t}\n\n\t\tif (\n\t\t\tstate.copy_![prop] === value &&\n\t\t\t// special case: NaN\n\t\t\ttypeof value !== \"number\" &&\n\t\t\t// special case: handle new props with value 'undefined'\n\t\t\t(value !== undefined || prop in state.copy_)\n\t\t)\n\t\t\treturn true\n\n\t\t// @ts-ignore\n\t\tstate.copy_![prop] = value\n\t\tstate.assigned_[prop] = true\n\t\treturn true\n\t},\n\tdeleteProperty(state, prop: string) {\n\t\t// The `undefined` check is a fast path for pre-existing keys.\n\t\tif (peek(state.base_, prop) !== undefined || prop in state.base_) {\n\t\t\tstate.assigned_[prop] = false\n\t\t\tprepareCopy(state)\n\t\t\tmarkChanged(state)\n\t\t} else {\n\t\t\t// if an originally not assigned property was deleted\n\t\t\tdelete state.assigned_[prop]\n\t\t}\n\t\t// @ts-ignore\n\t\tif (state.copy_) delete state.copy_[prop]\n\t\treturn true\n\t},\n\t// Note: We never coerce `desc.value` into an Immer draft, because we can't make\n\t// the same guarantee in ES5 mode.\n\tgetOwnPropertyDescriptor(state, prop) {\n\t\tconst owner = latest(state)\n\t\tconst desc = Reflect.getOwnPropertyDescriptor(owner, prop)\n\t\tif (!desc) return desc\n\t\treturn {\n\t\t\twritable: true,\n\t\t\tconfigurable: state.type_ !== ProxyType.ProxyArray || prop !== \"length\",\n\t\t\tenumerable: desc.enumerable,\n\t\t\tvalue: owner[prop]\n\t\t}\n\t},\n\tdefineProperty() {\n\t\tdie(11)\n\t},\n\tgetPrototypeOf(state) {\n\t\treturn Object.getPrototypeOf(state.base_)\n\t},\n\tsetPrototypeOf() {\n\t\tdie(12)\n\t}\n}\n\n/**\n * Array drafts\n */\n\nconst arrayTraps: ProxyHandler<[ProxyArrayState]> = {}\neach(objectTraps, (key, fn) => {\n\t// @ts-ignore\n\tarrayTraps[key] = function() {\n\t\targuments[0] = arguments[0][0]\n\t\treturn fn.apply(this, arguments)\n\t}\n})\narrayTraps.deleteProperty = function(state, prop) {\n\tif (__DEV__ && isNaN(parseInt(prop as any))) die(13)\n\t// @ts-ignore\n\treturn arrayTraps.set!.call(this, state, prop, undefined)\n}\narrayTraps.set = function(state, prop, value) {\n\tif (__DEV__ && prop !== \"length\" && isNaN(parseInt(prop as any))) die(14)\n\treturn objectTraps.set!.call(this, state[0], prop, value, state[0])\n}\n\n// Access a property without creating an Immer draft.\nfunction peek(draft: Drafted, prop: PropertyKey) {\n\tconst state = draft[DRAFT_STATE]\n\tconst source = state ? latest(state) : draft\n\treturn source[prop]\n}\n\nfunction readPropFromProto(state: ImmerState, source: any, prop: PropertyKey) {\n\tconst desc = getDescriptorFromProto(source, prop)\n\treturn desc\n\t\t? `value` in desc\n\t\t\t? desc.value\n\t\t\t: // This is a very special case, if the prop is a getter defined by the\n\t\t\t  // prototype, we should invoke it with the draft as context!\n\t\t\t  desc.get?.call(state.draft_)\n\t\t: undefined\n}\n\nfunction getDescriptorFromProto(\n\tsource: any,\n\tprop: PropertyKey\n): PropertyDescriptor | undefined {\n\t// 'in' checks proto!\n\tif (!(prop in source)) return undefined\n\tlet proto = Object.getPrototypeOf(source)\n\twhile (proto) {\n\t\tconst desc = Object.getOwnPropertyDescriptor(proto, prop)\n\t\tif (desc) return desc\n\t\tproto = Object.getPrototypeOf(proto)\n\t}\n\treturn undefined\n}\n\nexport function markChanged(state: ImmerState) {\n\tif (!state.modified_) {\n\t\tstate.modified_ = true\n\t\tif (state.parent_) {\n\t\t\tmarkChanged(state.parent_)\n\t\t}\n\t}\n}\n\nexport function prepareCopy(state: {base_: any; copy_: any}) {\n\tif (!state.copy_) {\n\t\tstate.copy_ = shallowCopy(state.base_)\n\t}\n}\n","import {\n\tIProduceWithPatches,\n\tIProduce,\n\tImmerState,\n\tDrafted,\n\tisDraftable,\n\tprocessResult,\n\tPatch,\n\tObjectish,\n\tDRAFT_STATE,\n\tDraft,\n\tPatchListener,\n\tisDraft,\n\tisMap,\n\tisSet,\n\tcreateProxyProxy,\n\tgetPlugin,\n\tdie,\n\thasProxies,\n\tenterScope,\n\trevokeScope,\n\tleaveScope,\n\tusePatchesInScope,\n\tgetCurrentScope,\n\tNOTHING,\n\tfreeze,\n\tcurrent\n} from \"../internal\"\n\ninterface ProducersFns {\n\tproduce: IProduce\n\tproduceWithPatches: IProduceWithPatches\n}\n\nexport class Immer implements ProducersFns {\n\tuseProxies_: boolean = hasProxies\n\n\tautoFreeze_: boolean = true\n\n\tconstructor(config?: {useProxies?: boolean; autoFreeze?: boolean}) {\n\t\tif (typeof config?.useProxies === \"boolean\")\n\t\t\tthis.setUseProxies(config!.useProxies)\n\t\tif (typeof config?.autoFreeze === \"boolean\")\n\t\t\tthis.setAutoFreeze(config!.autoFreeze)\n\t}\n\n\t/**\n\t * The `produce` function takes a value and a \"recipe function\" (whose\n\t * return value often depends on the base state). The recipe function is\n\t * free to mutate its first argument however it wants. All mutations are\n\t * only ever applied to a __copy__ of the base state.\n\t *\n\t * Pass only a function to create a \"curried producer\" which relieves you\n\t * from passing the recipe function every time.\n\t *\n\t * Only plain objects and arrays are made mutable. All other objects are\n\t * considered uncopyable.\n\t *\n\t * Note: This function is __bound__ to its `Immer` instance.\n\t *\n\t * @param {any} base - the initial state\n\t * @param {Function} producer - function that receives a proxy of the base state as first argument and which can be freely modified\n\t * @param {Function} patchListener - optional function that will be called with all the patches produced here\n\t * @returns {any} a new state, or the initial state if nothing was modified\n\t */\n\tproduce: IProduce = (base: any, recipe?: any, patchListener?: any) => {\n\t\t// curried invocation\n\t\tif (typeof base === \"function\" && typeof recipe !== \"function\") {\n\t\t\tconst defaultBase = recipe\n\t\t\trecipe = base\n\n\t\t\tconst self = this\n\t\t\treturn function curriedProduce(\n\t\t\t\tthis: any,\n\t\t\t\tbase = defaultBase,\n\t\t\t\t...args: any[]\n\t\t\t) {\n\t\t\t\treturn self.produce(base, (draft: Drafted) => recipe.call(this, draft, ...args)) // prettier-ignore\n\t\t\t}\n\t\t}\n\n\t\tif (typeof recipe !== \"function\") die(6)\n\t\tif (patchListener !== undefined && typeof patchListener !== \"function\")\n\t\t\tdie(7)\n\n\t\tlet result\n\n\t\t// Only plain objects, arrays, and \"immerable classes\" are drafted.\n\t\tif (isDraftable(base)) {\n\t\t\tconst scope = enterScope(this)\n\t\t\tconst proxy = createProxy(this, base, undefined)\n\t\t\tlet hasError = true\n\t\t\ttry {\n\t\t\t\tresult = recipe(proxy)\n\t\t\t\thasError = false\n\t\t\t} finally {\n\t\t\t\t// finally instead of catch + rethrow better preserves original stack\n\t\t\t\tif (hasError) revokeScope(scope)\n\t\t\t\telse leaveScope(scope)\n\t\t\t}\n\t\t\tif (typeof Promise !== \"undefined\" && result instanceof Promise) {\n\t\t\t\treturn result.then(\n\t\t\t\t\tresult => {\n\t\t\t\t\t\tusePatchesInScope(scope, patchListener)\n\t\t\t\t\t\treturn processResult(result, scope)\n\t\t\t\t\t},\n\t\t\t\t\terror => {\n\t\t\t\t\t\trevokeScope(scope)\n\t\t\t\t\t\tthrow error\n\t\t\t\t\t}\n\t\t\t\t)\n\t\t\t}\n\t\t\tusePatchesInScope(scope, patchListener)\n\t\t\treturn processResult(result, scope)\n\t\t} else if (!base || typeof base !== \"object\") {\n\t\t\tresult = recipe(base)\n\t\t\tif (result === undefined) result = base\n\t\t\tif (result === NOTHING) result = undefined\n\t\t\tif (this.autoFreeze_) freeze(result, true)\n\t\t\tif (patchListener) {\n\t\t\t\tconst p: Patch[] = []\n\t\t\t\tconst ip: Patch[] = []\n\t\t\t\tgetPlugin(\"Patches\").generateReplacementPatches_(base, result, p, ip)\n\t\t\t\tpatchListener(p, ip)\n\t\t\t}\n\t\t\treturn result\n\t\t} else die(21, base)\n\t}\n\n\tproduceWithPatches: IProduceWithPatches = (\n\t\targ1: any,\n\t\targ2?: any,\n\t\targ3?: any\n\t): any => {\n\t\tif (typeof arg1 === \"function\") {\n\t\t\treturn (state: any, ...args: any[]) =>\n\t\t\t\tthis.produceWithPatches(state, (draft: any) => arg1(draft, ...args))\n\t\t}\n\n\t\tlet patches: Patch[], inversePatches: Patch[]\n\t\tconst result = this.produce(arg1, arg2, (p: Patch[], ip: Patch[]) => {\n\t\t\tpatches = p\n\t\t\tinversePatches = ip\n\t\t})\n\n\t\tif (typeof Promise !== \"undefined\" && result instanceof Promise) {\n\t\t\treturn result.then(nextState => [nextState, patches!, inversePatches!])\n\t\t}\n\t\treturn [result, patches!, inversePatches!]\n\t}\n\n\tcreateDraft<T extends Objectish>(base: T): Draft<T> {\n\t\tif (!isDraftable(base)) die(8)\n\t\tif (isDraft(base)) base = current(base)\n\t\tconst scope = enterScope(this)\n\t\tconst proxy = createProxy(this, base, undefined)\n\t\tproxy[DRAFT_STATE].isManual_ = true\n\t\tleaveScope(scope)\n\t\treturn proxy as any\n\t}\n\n\tfinishDraft<D extends Draft<any>>(\n\t\tdraft: D,\n\t\tpatchListener?: PatchListener\n\t): D extends Draft<infer T> ? T : never {\n\t\tconst state: ImmerState = draft && (draft as any)[DRAFT_STATE]\n\t\tif (__DEV__) {\n\t\t\tif (!state || !state.isManual_) die(9)\n\t\t\tif (state.finalized_) die(10)\n\t\t}\n\t\tconst {scope_: scope} = state\n\t\tusePatchesInScope(scope, patchListener)\n\t\treturn processResult(undefined, scope)\n\t}\n\n\t/**\n\t * Pass true to automatically freeze all copies created by Immer.\n\t *\n\t * By default, auto-freezing is enabled.\n\t */\n\tsetAutoFreeze(value: boolean) {\n\t\tthis.autoFreeze_ = value\n\t}\n\n\t/**\n\t * Pass true to use the ES2015 `Proxy` class when creating drafts, which is\n\t * always faster than using ES5 proxies.\n\t *\n\t * By default, feature detection is used, so calling this is rarely necessary.\n\t */\n\tsetUseProxies(value: boolean) {\n\t\tif (value && !hasProxies) {\n\t\t\tdie(20)\n\t\t}\n\t\tthis.useProxies_ = value\n\t}\n\n\tapplyPatches<T extends Objectish>(base: T, patches: Patch[]): T {\n\t\t// If a patch replaces the entire state, take that replacement as base\n\t\t// before applying patches\n\t\tlet i: number\n\t\tfor (i = patches.length - 1; i >= 0; i--) {\n\t\t\tconst patch = patches[i]\n\t\t\tif (patch.path.length === 0 && patch.op === \"replace\") {\n\t\t\t\tbase = patch.value\n\t\t\t\tbreak\n\t\t\t}\n\t\t}\n\t\t// If there was a patch that replaced the entire state, start from the\n\t\t// patch after that.\n\t\tif (i > -1) {\n\t\t\tpatches = patches.slice(i + 1)\n\t\t}\n\n\t\tconst applyPatchesImpl = getPlugin(\"Patches\").applyPatches_\n\t\tif (isDraft(base)) {\n\t\t\t// N.B: never hits if some patch a replacement, patches are never drafts\n\t\t\treturn applyPatchesImpl(base, patches)\n\t\t}\n\t\t// Otherwise, produce a copy of the base state.\n\t\treturn this.produce(base, (draft: Drafted) =>\n\t\t\tapplyPatchesImpl(draft, patches)\n\t\t)\n\t}\n}\n\nexport function createProxy<T extends Objectish>(\n\timmer: Immer,\n\tvalue: T,\n\tparent?: ImmerState\n): Drafted<T, ImmerState> {\n\t// precondition: createProxy should be guarded by isDraftable, so we know we can safely draft\n\tconst draft: Drafted = isMap(value)\n\t\t? getPlugin(\"MapSet\").proxyMap_(value, parent)\n\t\t: isSet(value)\n\t\t? getPlugin(\"MapSet\").proxySet_(value, parent)\n\t\t: immer.useProxies_\n\t\t? createProxyProxy(value, parent)\n\t\t: getPlugin(\"ES5\").createES5Proxy_(value, parent)\n\n\tconst scope = parent ? parent.scope_ : getCurrentScope()\n\tscope.drafts_.push(draft)\n\treturn draft\n}\n","import {\n\tdie,\n\tisDraft,\n\tshallowCopy,\n\teach,\n\tDRAFT_STATE,\n\tget,\n\tset,\n\tImmerState,\n\tisDraftable,\n\tArchtype,\n\tgetArchtype,\n\tgetPlugin\n} from \"../internal\"\n\n/** Takes a snapshot of the current state of a draft and finalizes it (but without freezing). This is a great utility to print the current state during debugging (no Proxies in the way). The output of current can also be safely leaked outside the producer. */\nexport function current<T>(value: T): T\nexport function current(value: any): any {\n\tif (!isDraft(value)) die(22, value)\n\treturn currentImpl(value)\n}\n\nfunction currentImpl(value: any): any {\n\tif (!isDraftable(value)) return value\n\tconst state: ImmerState | undefined = value[DRAFT_STATE]\n\tlet copy: any\n\tconst archType = getArchtype(value)\n\tif (state) {\n\t\tif (\n\t\t\t!state.modified_ &&\n\t\t\t(state.type_ < 4 || !getPlugin(\"ES5\").hasChanges_(state as any))\n\t\t)\n\t\t\treturn state.base_\n\t\t// Optimization: avoid generating new drafts during copying\n\t\tstate.finalized_ = true\n\t\tcopy = copyHelper(value, archType)\n\t\tstate.finalized_ = false\n\t} else {\n\t\tcopy = copyHelper(value, archType)\n\t}\n\n\teach(copy, (key, childValue) => {\n\t\tif (state && get(state.base_, key) === childValue) return // no need to copy or search in something that didn't change\n\t\tset(copy, key, currentImpl(childValue))\n\t})\n\t// In the future, we might consider freezing here, based on the current settings\n\treturn archType === Archtype.Set ? new Set(copy) : copy\n}\n\nfunction copyHelper(value: any, archType: number): any {\n\t// creates a shallow copy, even if it is a map or set\n\tswitch (archType) {\n\t\tcase Archtype.Map:\n\t\t\treturn new Map(value)\n\t\tcase Archtype.Set:\n\t\t\t// Set will be cloned as array temporarily, so that we can replace individual items\n\t\t\treturn Array.from(value)\n\t}\n\treturn shallowCopy(value)\n}\n","import {\n\tImmerState,\n\tDrafted,\n\tES5ArrayState,\n\tES5ObjectState,\n\teach,\n\thas,\n\tisDraft,\n\tlatest,\n\tDRAFT_STATE,\n\tis,\n\tloadPlugin,\n\tImmerScope,\n\tProxyType,\n\tgetCurrentScope,\n\tdie,\n\tmarkChanged,\n\tobjectTraps,\n\townKeys,\n\tgetOwnPropertyDescriptors\n} from \"../internal\"\n\ntype ES5State = ES5ArrayState | ES5ObjectState\n\nexport function enableES5() {\n\tfunction willFinalizeES5_(\n\t\tscope: ImmerScope,\n\t\tresult: any,\n\t\tisReplaced: boolean\n\t) {\n\t\tif (!isReplaced) {\n\t\t\tif (scope.patches_) {\n\t\t\t\tmarkChangesRecursively(scope.drafts_![0])\n\t\t\t}\n\t\t\t// This is faster when we don't care about which attributes changed.\n\t\t\tmarkChangesSweep(scope.drafts_)\n\t\t}\n\t\t// When a child draft is returned, look for changes.\n\t\telse if (\n\t\t\tisDraft(result) &&\n\t\t\t(result[DRAFT_STATE] as ES5State).scope_ === scope\n\t\t) {\n\t\t\tmarkChangesSweep(scope.drafts_)\n\t\t}\n\t}\n\n\tfunction createES5Draft(isArray: boolean, base: any) {\n\t\tif (isArray) {\n\t\t\tconst draft = new Array(base.length)\n\t\t\tfor (let i = 0; i < base.length; i++)\n\t\t\t\tObject.defineProperty(draft, \"\" + i, proxyProperty(i, true))\n\t\t\treturn draft\n\t\t} else {\n\t\t\tconst descriptors = getOwnPropertyDescriptors(base)\n\t\t\tdelete descriptors[DRAFT_STATE as any]\n\t\t\tconst keys = ownKeys(descriptors)\n\t\t\tfor (let i = 0; i < keys.length; i++) {\n\t\t\t\tconst key: any = keys[i]\n\t\t\t\tdescriptors[key] = proxyProperty(\n\t\t\t\t\tkey,\n\t\t\t\t\tisArray || !!descriptors[key].enumerable\n\t\t\t\t)\n\t\t\t}\n\t\t\treturn Object.create(Object.getPrototypeOf(base), descriptors)\n\t\t}\n\t}\n\n\tfunction createES5Proxy_<T>(\n\t\tbase: T,\n\t\tparent?: ImmerState\n\t): Drafted<T, ES5ObjectState | ES5ArrayState> {\n\t\tconst isArray = Array.isArray(base)\n\t\tconst draft = createES5Draft(isArray, base)\n\n\t\tconst state: ES5ObjectState | ES5ArrayState = {\n\t\t\ttype_: isArray ? ProxyType.ES5Array : (ProxyType.ES5Object as any),\n\t\t\tscope_: parent ? parent.scope_ : getCurrentScope(),\n\t\t\tmodified_: false,\n\t\t\tfinalized_: false,\n\t\t\tassigned_: {},\n\t\t\tparent_: parent,\n\t\t\t// base is the object we are drafting\n\t\t\tbase_: base,\n\t\t\t// draft is the draft object itself, that traps all reads and reads from either the base (if unmodified) or copy (if modified)\n\t\t\tdraft_: draft,\n\t\t\tcopy_: null,\n\t\t\trevoked_: false,\n\t\t\tisManual_: false\n\t\t}\n\n\t\tObject.defineProperty(draft, DRAFT_STATE, {\n\t\t\tvalue: state,\n\t\t\t// enumerable: false <- the default\n\t\t\twritable: true\n\t\t})\n\t\treturn draft\n\t}\n\n\t// property descriptors are recycled to make sure we don't create a get and set closure per property,\n\t// but share them all instead\n\tconst descriptors: {[prop: string]: PropertyDescriptor} = {}\n\n\tfunction proxyProperty(\n\t\tprop: string | number,\n\t\tenumerable: boolean\n\t): PropertyDescriptor {\n\t\tlet desc = descriptors[prop]\n\t\tif (desc) {\n\t\t\tdesc.enumerable = enumerable\n\t\t} else {\n\t\t\tdescriptors[prop] = desc = {\n\t\t\t\tconfigurable: true,\n\t\t\t\tenumerable,\n\t\t\t\tget(this: any) {\n\t\t\t\t\tconst state = this[DRAFT_STATE]\n\t\t\t\t\tif (__DEV__) assertUnrevoked(state)\n\t\t\t\t\t// @ts-ignore\n\t\t\t\t\treturn objectTraps.get(state, prop)\n\t\t\t\t},\n\t\t\t\tset(this: any, value) {\n\t\t\t\t\tconst state = this[DRAFT_STATE]\n\t\t\t\t\tif (__DEV__) assertUnrevoked(state)\n\t\t\t\t\t// @ts-ignore\n\t\t\t\t\tobjectTraps.set(state, prop, value)\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn desc\n\t}\n\n\t// This looks expensive, but only proxies are visited, and only objects without known changes are scanned.\n\tfunction markChangesSweep(drafts: Drafted<any, ImmerState>[]) {\n\t\t// The natural order of drafts in the `scope` array is based on when they\n\t\t// were accessed. By processing drafts in reverse natural order, we have a\n\t\t// better chance of processing leaf nodes first. When a leaf node is known to\n\t\t// have changed, we can avoid any traversal of its ancestor nodes.\n\t\tfor (let i = drafts.length - 1; i >= 0; i--) {\n\t\t\tconst state: ES5State = drafts[i][DRAFT_STATE]\n\t\t\tif (!state.modified_) {\n\t\t\t\tswitch (state.type_) {\n\t\t\t\t\tcase ProxyType.ES5Array:\n\t\t\t\t\t\tif (hasArrayChanges(state)) markChanged(state)\n\t\t\t\t\t\tbreak\n\t\t\t\t\tcase ProxyType.ES5Object:\n\t\t\t\t\t\tif (hasObjectChanges(state)) markChanged(state)\n\t\t\t\t\t\tbreak\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\tfunction markChangesRecursively(object: any) {\n\t\tif (!object || typeof object !== \"object\") return\n\t\tconst state: ES5State | undefined = object[DRAFT_STATE]\n\t\tif (!state) return\n\t\tconst {base_, draft_, assigned_, type_} = state\n\t\tif (type_ === ProxyType.ES5Object) {\n\t\t\t// Look for added keys.\n\t\t\t// probably there is a faster way to detect changes, as sweep + recurse seems to do some\n\t\t\t// unnecessary work.\n\t\t\t// also: probably we can store the information we detect here, to speed up tree finalization!\n\t\t\teach(draft_, key => {\n\t\t\t\tif ((key as any) === DRAFT_STATE) return\n\t\t\t\t// The `undefined` check is a fast path for pre-existing keys.\n\t\t\t\tif ((base_ as any)[key] === undefined && !has(base_, key)) {\n\t\t\t\t\tassigned_[key] = true\n\t\t\t\t\tmarkChanged(state)\n\t\t\t\t} else if (!assigned_[key]) {\n\t\t\t\t\t// Only untouched properties trigger recursion.\n\t\t\t\t\tmarkChangesRecursively(draft_[key])\n\t\t\t\t}\n\t\t\t})\n\t\t\t// Look for removed keys.\n\t\t\teach(base_, key => {\n\t\t\t\t// The `undefined` check is a fast path for pre-existing keys.\n\t\t\t\tif (draft_[key] === undefined && !has(draft_, key)) {\n\t\t\t\t\tassigned_[key] = false\n\t\t\t\t\tmarkChanged(state)\n\t\t\t\t}\n\t\t\t})\n\t\t} else if (type_ === ProxyType.ES5Array) {\n\t\t\tif (hasArrayChanges(state as ES5ArrayState)) {\n\t\t\t\tmarkChanged(state)\n\t\t\t\tassigned_.length = true\n\t\t\t}\n\n\t\t\tif (draft_.length < base_.length) {\n\t\t\t\tfor (let i = draft_.length; i < base_.length; i++) assigned_[i] = false\n\t\t\t} else {\n\t\t\t\tfor (let i = base_.length; i < draft_.length; i++) assigned_[i] = true\n\t\t\t}\n\n\t\t\t// Minimum count is enough, the other parts has been processed.\n\t\t\tconst min = Math.min(draft_.length, base_.length)\n\n\t\t\tfor (let i = 0; i < min; i++) {\n\t\t\t\t// Only untouched indices trigger recursion.\n\t\t\t\tif (!draft_.hasOwnProperty(i)) {\n\t\t\t\t\tassigned_[i] = true\n\t\t\t\t}\n\t\t\t\tif (assigned_[i] === undefined) markChangesRecursively(draft_[i])\n\t\t\t}\n\t\t}\n\t}\n\n\tfunction hasObjectChanges(state: ES5ObjectState) {\n\t\tconst {base_, draft_} = state\n\n\t\t// Search for added keys and changed keys. Start at the back, because\n\t\t// non-numeric keys are ordered by time of definition on the object.\n\t\tconst keys = ownKeys(draft_)\n\t\tfor (let i = keys.length - 1; i >= 0; i--) {\n\t\t\tconst key: any = keys[i]\n\t\t\tif (key === DRAFT_STATE) continue\n\t\t\tconst baseValue = base_[key]\n\t\t\t// The `undefined` check is a fast path for pre-existing keys.\n\t\t\tif (baseValue === undefined && !has(base_, key)) {\n\t\t\t\treturn true\n\t\t\t}\n\t\t\t// Once a base key is deleted, future changes go undetected, because its\n\t\t\t// descriptor is erased. This branch detects any missed changes.\n\t\t\telse {\n\t\t\t\tconst value = draft_[key]\n\t\t\t\tconst state: ImmerState = value && value[DRAFT_STATE]\n\t\t\t\tif (state ? state.base_ !== baseValue : !is(value, baseValue)) {\n\t\t\t\t\treturn true\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// At this point, no keys were added or changed.\n\t\t// Compare key count to determine if keys were deleted.\n\t\tconst baseIsDraft = !!base_[DRAFT_STATE as any]\n\t\treturn keys.length !== ownKeys(base_).length + (baseIsDraft ? 0 : 1) // + 1 to correct for DRAFT_STATE\n\t}\n\n\tfunction hasArrayChanges(state: ES5ArrayState) {\n\t\tconst {draft_} = state\n\t\tif (draft_.length !== state.base_.length) return true\n\t\t// See #116\n\t\t// If we first shorten the length, our array interceptors will be removed.\n\t\t// If after that new items are added, result in the same original length,\n\t\t// those last items will have no intercepting property.\n\t\t// So if there is no own descriptor on the last position, we know that items were removed and added\n\t\t// N.B.: splice, unshift, etc only shift values around, but not prop descriptors, so we only have to check\n\t\t// the last one\n\t\t// last descriptor can be not a trap, if the array was extended\n\t\tconst descriptor = Object.getOwnPropertyDescriptor(\n\t\t\tdraft_,\n\t\t\tdraft_.length - 1\n\t\t)\n\t\t// descriptor can be null, but only for newly created sparse arrays, eg. new Array(10)\n\t\tif (descriptor && !descriptor.get) return true\n\t\t// if we miss a property, it has been deleted, so array probobaly changed\n\t\tfor (let i = 0; i < draft_.length; i++) {\n\t\t\tif (!draft_.hasOwnProperty(i)) return true\n\t\t}\n\t\t// For all other cases, we don't have to compare, as they would have been picked up by the index setters\n\t\treturn false\n\t}\n\n\tfunction hasChanges_(state: ES5State) {\n\t\treturn state.type_ === ProxyType.ES5Object\n\t\t\t? hasObjectChanges(state)\n\t\t\t: hasArrayChanges(state)\n\t}\n\n\tfunction assertUnrevoked(state: any /*ES5State | MapState | SetState*/) {\n\t\tif (state.revoked_) die(3, JSON.stringify(latest(state)))\n\t}\n\n\tloadPlugin(\"ES5\", {\n\t\tcreateES5Proxy_,\n\t\twillFinalizeES5_,\n\t\thasChanges_\n\t})\n}\n","import {\n\tIProduce,\n\tIProduceWithPatches,\n\tImmer,\n\tDraft,\n\tImmutable\n} from \"./internal\"\n\nexport {\n\tDraft,\n\tImmutable,\n\tPatch,\n\tPatchListener,\n\toriginal,\n\tcurrent,\n\tisDraft,\n\tisDraftable,\n\tNOTHING as nothing,\n\tDRAFTABLE as immerable,\n\tfreeze\n} from \"./internal\"\n\nconst immer = new Immer()\n\n/**\n * The `produce` function takes a value and a \"recipe function\" (whose\n * return value often depends on the base state). The recipe function is\n * free to mutate its first argument however it wants. All mutations are\n * only ever applied to a __copy__ of the base state.\n *\n * Pass only a function to create a \"curried producer\" which relieves you\n * from passing the recipe function every time.\n *\n * Only plain objects and arrays are made mutable. All other objects are\n * considered uncopyable.\n *\n * Note: This function is __bound__ to its `Immer` instance.\n *\n * @param {any} base - the initial state\n * @param {Function} producer - function that receives a proxy of the base state as first argument and which can be freely modified\n * @param {Function} patchListener - optional function that will be called with all the patches produced here\n * @returns {any} a new state, or the initial state if nothing was modified\n */\nexport const produce: IProduce = immer.produce\nexport default produce\n\n/**\n * Like `produce`, but `produceWithPatches` always returns a tuple\n * [nextState, patches, inversePatches] (instead of just the next state)\n */\nexport const produceWithPatches: IProduceWithPatches = immer.produceWithPatches.bind(\n\timmer\n)\n\n/**\n * Pass true to automatically freeze all copies created by Immer.\n *\n * Always freeze by default, even in production mode\n */\nexport const setAutoFreeze = immer.setAutoFreeze.bind(immer)\n\n/**\n * Pass true to use the ES2015 `Proxy` class when creating drafts, which is\n * always faster than using ES5 proxies.\n *\n * By default, feature detection is used, so calling this is rarely necessary.\n */\nexport const setUseProxies = immer.setUseProxies.bind(immer)\n\n/**\n * Apply an array of Immer patches to the first argument.\n *\n * This function is a producer, which means copy-on-write is in effect.\n */\nexport const applyPatches = immer.applyPatches.bind(immer)\n\n/**\n * Create an Immer draft from the given base state, which may be a draft itself.\n * The draft can be modified until you finalize it with the `finishDraft` function.\n */\nexport const createDraft = immer.createDraft.bind(immer)\n\n/**\n * Finalize an Immer draft from a `createDraft` call, returning the base state\n * (if no changes were made) or a modified copy. The draft must *not* be\n * mutated afterwards.\n *\n * Pass a function as the 2nd argument to generate Immer patches based on the\n * changes that were made.\n */\nexport const finishDraft = immer.finishDraft.bind(immer)\n\n/**\n * This function is actually a no-op, but can be used to cast an immutable type\n * to an draft type and make TypeScript happy\n *\n * @param value\n */\nexport function castDraft<T>(value: T): Draft<T> {\n\treturn value as any\n}\n\n/**\n * This function is actually a no-op, but can be used to cast a mutable type\n * to an immutable type and make TypeScript happy\n * @param value\n */\nexport function castImmutable<T>(value: T): Immutable<T> {\n\treturn value as any\n}\n\nexport {Immer}\n\nexport {enableES5} from \"./plugins/es5\"\nexport {enablePatches} from \"./plugins/patches\"\nexport {enableMapSet} from \"./plugins/mapset\"\nexport {enableAllPlugins} from \"./plugins/all\"\n","// Should be no imports here!\n\n// Some things that should be evaluated before all else...\n\n// We only want to know if non-polyfilled symbols are available\nconst hasSymbol =\n\ttypeof Symbol !== \"undefined\" && typeof Symbol(\"x\") === \"symbol\"\nexport const hasMap = typeof Map !== \"undefined\"\nexport const hasSet = typeof Set !== \"undefined\"\nexport const hasProxies =\n\ttypeof Proxy !== \"undefined\" &&\n\ttypeof Proxy.revocable !== \"undefined\" &&\n\ttypeof Reflect !== \"undefined\"\n\n/**\n * The sentinel value returned by producers to replace the draft with undefined.\n */\nexport const NOTHING: Nothing = hasSymbol\n\t? Symbol.for(\"immer-nothing\")\n\t: ({[\"immer-nothing\"]: true} as any)\n\n/**\n * To let Immer treat your class instances as plain immutable objects\n * (albeit with a custom prototype), you must define either an instance property\n * or a static property on each of your custom classes.\n *\n * Otherwise, your class instance will never be drafted, which means it won't be\n * safe to mutate in a produce callback.\n */\nexport const DRAFTABLE: unique symbol = hasSymbol\n\t? Symbol.for(\"immer-draftable\")\n\t: (\"__$immer_draftable\" as any)\n\nexport const DRAFT_STATE: unique symbol = hasSymbol\n\t? Symbol.for(\"immer-state\")\n\t: (\"__$immer_state\" as any)\n\n// Even a polyfilled Symbol might provide Symbol.iterator\nexport const iteratorSymbol: typeof Symbol.iterator =\n\t(typeof Symbol != \"undefined\" && Symbol.iterator) || (\"@@iterator\" as any)\n\n/** Use a class type for `nothing` so its type is unique */\nexport class Nothing {\n\t// This lets us do `Exclude<T, Nothing>`\n\t// @ts-ignore\n\tprivate _!: unique symbol\n}\n"],"names":["DataView","require","getNative","module","exports","hashClear","hashDelete","hashGet","hashHas","hashSet","Hash","entries","index","length","this","clear","entry","set","prototype","get","has","listCacheClear","listCacheDelete","listCacheGet","listCacheHas","listCacheSet","ListCache","Map","mapCacheClear","mapCacheDelete","mapCacheGet","mapCacheHas","mapCacheSet","MapCache","Promise","Set","setCacheAdd","setCacheHas","SetCache","values","__data__","add","push","stackClear","stackDelete","stackGet","stackHas","stackSet","Stack","data","size","Symbol","Uint8Array","WeakMap","die","error","args","msg","Error","map","s","join","isDraft","value","DRAFT_STATE","isDraftable","proto","Object","getPrototypeOf","Ctor","hasOwnProperty","call","constructor","Function","toString","objectCtorString","Array","isArray","DRAFTABLE","isMap","isSet","each","obj","iter","enumerableOnly","getArchtype","keys","ownKeys","forEach","key","thing","state","type_","prop","propOrOldValue","t","delete","is","x","y","target","hasMap","hasSet","latest","copy_","base_","shallowCopy","base","slice","descriptors","getOwnPropertyDescriptors","i","desc","writable","configurable","enumerable","create","freeze","deep","isFrozen","dontMutateFrozenCollections","getPlugin","pluginKey","plugin","plugins","getCurrentScope","currentScope","usePatchesInScope","scope","patchListener","patches_","inversePatches_","patchListener_","revokeScope","leaveScope","drafts_","revokeDraft","parent_","enterScope","immer","immer_","canAutoFreeze_","unfinalizedDrafts_","draft","revoke_","revoked_","processResult","result","baseDraft","isReplaced","useProxies_","willFinalizeES5_","modified_","finalize","maybeFreeze","generateReplacementPatches_","NOTHING","undefined","rootScope","path","childValue","finalizeProperty","scope_","finalized_","draft_","generatePatches_","parentState","targetObject","rootPath","res","assigned_","concat","autoFreeze_","peek","getDescriptorFromProto","source","getOwnPropertyDescriptor","markChanged","prepareCopy","createProxy","parent","proxyMap_","proxySet_","isManual_","traps","objectTraps","arrayTraps","Proxy","revocable","revoke","proxy","createES5Proxy_","current","currentImpl","copy","archType","hasChanges_","copyHelper","from","enableES5","proxyProperty","markChangesSweep","drafts","hasArrayChanges","hasObjectChanges","baseValue","baseIsDraft","descriptor","implementation","loadPlugin","defineProperty","markChangesRecursively","object","min","Math","hasSymbol","hasProxies","Reflect","for","iterator","getOwnPropertySymbols","getOwnPropertyNames","_desc$get","currentState","deleteProperty","owner","setPrototypeOf","fn","arguments","apply","Immer","e","config","recipe","defaultBase","self","_this","produce","_this2","hasError","then","p","ip","arg1","arg2","produceWithPatches","patches","inversePatches","n","nextState","useProxies","setUseProxies","autoFreeze","setAutoFreeze","createDraft","finishDraft","applyPatches","patch","op","applyPatchesImpl","applyPatches_","bind"],"sourceRoot":""}