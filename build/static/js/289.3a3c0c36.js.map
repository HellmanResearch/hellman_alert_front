{"version":3,"file":"static/js/289.3a3c0c36.js","mappings":"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","sources":["../node_modules/echarts/lib/component/tooltip/seriesFormatTooltip.js","../node_modules/echarts/lib/component/tooltip/tooltipMarkup.js"],"sourcesContent":["\n/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\n\n\n/**\n * AUTO-GENERATED FILE. DO NOT MODIFY.\n */\n\n/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\nimport { trim, isArray, each, reduce } from 'zrender/lib/core/util.js';\nimport { retrieveVisualColorForTooltipMarker, createTooltipMarkup } from './tooltipMarkup.js';\nimport { retrieveRawValue } from '../../data/helper/dataProvider.js';\nimport { isNameSpecified } from '../../util/model.js';\nexport function defaultSeriesFormatTooltip(opt) {\n  var series = opt.series;\n  var dataIndex = opt.dataIndex;\n  var multipleSeries = opt.multipleSeries;\n  var data = series.getData();\n  var tooltipDims = data.mapDimensionsAll('defaultedTooltip');\n  var tooltipDimLen = tooltipDims.length;\n  var value = series.getRawValue(dataIndex);\n  var isValueArr = isArray(value);\n  var markerColor = retrieveVisualColorForTooltipMarker(series, dataIndex); // Complicated rule for pretty tooltip.\n\n  var inlineValue;\n  var inlineValueType;\n  var subBlocks;\n  var sortParam;\n\n  if (tooltipDimLen > 1 || isValueArr && !tooltipDimLen) {\n    var formatArrResult = formatTooltipArrayValue(value, series, dataIndex, tooltipDims, markerColor);\n    inlineValue = formatArrResult.inlineValues;\n    inlineValueType = formatArrResult.inlineValueTypes;\n    subBlocks = formatArrResult.blocks; // Only support tooltip sort by the first inline value. It's enough in most cases.\n\n    sortParam = formatArrResult.inlineValues[0];\n  } else if (tooltipDimLen) {\n    var dimInfo = data.getDimensionInfo(tooltipDims[0]);\n    sortParam = inlineValue = retrieveRawValue(data, dataIndex, tooltipDims[0]);\n    inlineValueType = dimInfo.type;\n  } else {\n    sortParam = inlineValue = isValueArr ? value[0] : value;\n  } // Do not show generated series name. It might not be readable.\n\n\n  var seriesNameSpecified = isNameSpecified(series);\n  var seriesName = seriesNameSpecified && series.name || '';\n  var itemName = data.getName(dataIndex);\n  var inlineName = multipleSeries ? seriesName : itemName;\n  return createTooltipMarkup('section', {\n    header: seriesName,\n    // When series name not specified, do not show a header line with only '-'.\n    // This case alway happen in tooltip.trigger: 'item'.\n    noHeader: multipleSeries || !seriesNameSpecified,\n    sortParam: sortParam,\n    blocks: [createTooltipMarkup('nameValue', {\n      markerType: 'item',\n      markerColor: markerColor,\n      // Do not mix display seriesName and itemName in one tooltip,\n      // which might confuses users.\n      name: inlineName,\n      // name dimension might be auto assigned, where the name might\n      // be not readable. So we check trim here.\n      noName: !trim(inlineName),\n      value: inlineValue,\n      valueType: inlineValueType\n    })].concat(subBlocks || [])\n  });\n}\n\nfunction formatTooltipArrayValue(value, series, dataIndex, tooltipDims, colorStr) {\n  // check: category-no-encode-has-axis-data in dataset.html\n  var data = series.getData();\n  var isValueMultipleLine = reduce(value, function (isValueMultipleLine, val, idx) {\n    var dimItem = data.getDimensionInfo(idx);\n    return isValueMultipleLine = isValueMultipleLine || dimItem && dimItem.tooltip !== false && dimItem.displayName != null;\n  }, false);\n  var inlineValues = [];\n  var inlineValueTypes = [];\n  var blocks = [];\n  tooltipDims.length ? each(tooltipDims, function (dim) {\n    setEachItem(retrieveRawValue(data, dataIndex, dim), dim);\n  }) // By default, all dims is used on tooltip.\n  : each(value, setEachItem);\n\n  function setEachItem(val, dim) {\n    var dimInfo = data.getDimensionInfo(dim); // If `dimInfo.tooltip` is not set, show tooltip.\n\n    if (!dimInfo || dimInfo.otherDims.tooltip === false) {\n      return;\n    }\n\n    if (isValueMultipleLine) {\n      blocks.push(createTooltipMarkup('nameValue', {\n        markerType: 'subItem',\n        markerColor: colorStr,\n        name: dimInfo.displayName,\n        value: val,\n        valueType: dimInfo.type\n      }));\n    } else {\n      inlineValues.push(val);\n      inlineValueTypes.push(dimInfo.type);\n    }\n  }\n\n  return {\n    inlineValues: inlineValues,\n    inlineValueTypes: inlineValueTypes,\n    blocks: blocks\n  };\n}","\n/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\n\n\n/**\n * AUTO-GENERATED FILE. DO NOT MODIFY.\n */\n\n/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\nimport { getTooltipMarker, encodeHTML, makeValueReadable, convertToColorString } from '../../util/format.js';\nimport { isString, each, hasOwn, isArray, map, assert, extend } from 'zrender/lib/core/util.js';\nimport { SortOrderComparator } from '../../data/helper/dataValueHelper.js';\nimport { getRandomIdBase } from '../../util/number.js';\nvar TOOLTIP_LINE_HEIGHT_CSS = 'line-height:1'; // TODO: more textStyle option\n\nfunction getTooltipTextStyle(textStyle, renderMode) {\n  var nameFontColor = textStyle.color || '#6e7079';\n  var nameFontSize = textStyle.fontSize || 12;\n  var nameFontWeight = textStyle.fontWeight || '400';\n  var valueFontColor = textStyle.color || '#464646';\n  var valueFontSize = textStyle.fontSize || 14;\n  var valueFontWeight = textStyle.fontWeight || '900';\n\n  if (renderMode === 'html') {\n    // `textStyle` is probably from user input, should be encoded to reduce security risk.\n    return {\n      // eslint-disable-next-line max-len\n      nameStyle: \"font-size:\" + encodeHTML(nameFontSize + '') + \"px;color:\" + encodeHTML(nameFontColor) + \";font-weight:\" + encodeHTML(nameFontWeight + ''),\n      // eslint-disable-next-line max-len\n      valueStyle: \"font-size:\" + encodeHTML(valueFontSize + '') + \"px;color:\" + encodeHTML(valueFontColor) + \";font-weight:\" + encodeHTML(valueFontWeight + '')\n    };\n  } else {\n    return {\n      nameStyle: {\n        fontSize: nameFontSize,\n        fill: nameFontColor,\n        fontWeight: nameFontWeight\n      },\n      valueStyle: {\n        fontSize: valueFontSize,\n        fill: valueFontColor,\n        fontWeight: valueFontWeight\n      }\n    };\n  }\n} // See `TooltipMarkupLayoutIntent['innerGapLevel']`.\n// (value from UI design)\n\n\nvar HTML_GAPS = [0, 10, 20, 30];\nvar RICH_TEXT_GAPS = ['', '\\n', '\\n\\n', '\\n\\n\\n']; // eslint-disable-next-line max-len\n\nexport function createTooltipMarkup(type, option) {\n  option.type = type;\n  return option;\n}\n\nfunction isSectionFragment(frag) {\n  return frag.type === 'section';\n}\n\nfunction getBuilder(frag) {\n  return isSectionFragment(frag) ? buildSection : buildNameValue;\n}\n\nfunction getBlockGapLevel(frag) {\n  if (isSectionFragment(frag)) {\n    var gapLevel_1 = 0;\n    var subBlockLen = frag.blocks.length;\n    var hasInnerGap_1 = subBlockLen > 1 || subBlockLen > 0 && !frag.noHeader;\n    each(frag.blocks, function (subBlock) {\n      var subGapLevel = getBlockGapLevel(subBlock); // If the some of the sub-blocks have some gaps (like 10px) inside, this block\n      // should use a larger gap (like 20px) to distinguish those sub-blocks.\n\n      if (subGapLevel >= gapLevel_1) {\n        gapLevel_1 = subGapLevel + +(hasInnerGap_1 && ( // 0 always can not be readable gap level.\n        !subGapLevel // If no header, always keep the sub gap level. Otherwise\n        // look weird in case `multipleSeries`.\n        || isSectionFragment(subBlock) && !subBlock.noHeader));\n      }\n    });\n    return gapLevel_1;\n  }\n\n  return 0;\n}\n\nfunction buildSection(ctx, fragment, topMarginForOuterGap, toolTipTextStyle) {\n  var noHeader = fragment.noHeader;\n  var gaps = getGap(getBlockGapLevel(fragment));\n  var subMarkupTextList = [];\n  var subBlocks = fragment.blocks || [];\n  assert(!subBlocks || isArray(subBlocks));\n  subBlocks = subBlocks || [];\n  var orderMode = ctx.orderMode;\n\n  if (fragment.sortBlocks && orderMode) {\n    subBlocks = subBlocks.slice();\n    var orderMap = {\n      valueAsc: 'asc',\n      valueDesc: 'desc'\n    };\n\n    if (hasOwn(orderMap, orderMode)) {\n      var comparator_1 = new SortOrderComparator(orderMap[orderMode], null);\n      subBlocks.sort(function (a, b) {\n        return comparator_1.evaluate(a.sortParam, b.sortParam);\n      });\n    } // FIXME 'seriesDesc' necessary?\n    else if (orderMode === 'seriesDesc') {\n        subBlocks.reverse();\n      }\n  }\n\n  each(subBlocks, function (subBlock, idx) {\n    var valueFormatter = fragment.valueFormatter;\n    var subMarkupText = getBuilder(subBlock)( // Inherit valueFormatter\n    valueFormatter ? extend(extend({}, ctx), {\n      valueFormatter: valueFormatter\n    }) : ctx, subBlock, idx > 0 ? gaps.html : 0, toolTipTextStyle);\n    subMarkupText != null && subMarkupTextList.push(subMarkupText);\n  });\n  var subMarkupText = ctx.renderMode === 'richText' ? subMarkupTextList.join(gaps.richText) : wrapBlockHTML(subMarkupTextList.join(''), noHeader ? topMarginForOuterGap : gaps.html);\n\n  if (noHeader) {\n    return subMarkupText;\n  }\n\n  var displayableHeader = makeValueReadable(fragment.header, 'ordinal', ctx.useUTC);\n  var nameStyle = getTooltipTextStyle(toolTipTextStyle, ctx.renderMode).nameStyle;\n\n  if (ctx.renderMode === 'richText') {\n    return wrapInlineNameRichText(ctx, displayableHeader, nameStyle) + gaps.richText + subMarkupText;\n  } else {\n    return wrapBlockHTML(\"<div style=\\\"\" + nameStyle + \";\" + TOOLTIP_LINE_HEIGHT_CSS + \";\\\">\" + encodeHTML(displayableHeader) + '</div>' + subMarkupText, topMarginForOuterGap);\n  }\n}\n\nfunction buildNameValue(ctx, fragment, topMarginForOuterGap, toolTipTextStyle) {\n  var renderMode = ctx.renderMode;\n  var noName = fragment.noName;\n  var noValue = fragment.noValue;\n  var noMarker = !fragment.markerType;\n  var name = fragment.name;\n  var useUTC = ctx.useUTC;\n\n  var valueFormatter = fragment.valueFormatter || ctx.valueFormatter || function (value) {\n    value = isArray(value) ? value : [value];\n    return map(value, function (val, idx) {\n      return makeValueReadable(val, isArray(valueTypeOption) ? valueTypeOption[idx] : valueTypeOption, useUTC);\n    });\n  };\n\n  if (noName && noValue) {\n    return;\n  }\n\n  var markerStr = noMarker ? '' : ctx.markupStyleCreator.makeTooltipMarker(fragment.markerType, fragment.markerColor || '#333', renderMode);\n  var readableName = noName ? '' : makeValueReadable(name, 'ordinal', useUTC);\n  var valueTypeOption = fragment.valueType;\n  var readableValueList = noValue ? [] : valueFormatter(fragment.value);\n  var valueAlignRight = !noMarker || !noName; // It little weird if only value next to marker but far from marker.\n\n  var valueCloseToMarker = !noMarker && noName;\n\n  var _a = getTooltipTextStyle(toolTipTextStyle, renderMode),\n      nameStyle = _a.nameStyle,\n      valueStyle = _a.valueStyle;\n\n  return renderMode === 'richText' ? (noMarker ? '' : markerStr) + (noName ? '' : wrapInlineNameRichText(ctx, readableName, nameStyle)) // Value has commas inside, so use ' ' as delimiter for multiple values.\n  + (noValue ? '' : wrapInlineValueRichText(ctx, readableValueList, valueAlignRight, valueCloseToMarker, valueStyle)) : wrapBlockHTML((noMarker ? '' : markerStr) + (noName ? '' : wrapInlineNameHTML(readableName, !noMarker, nameStyle)) + (noValue ? '' : wrapInlineValueHTML(readableValueList, valueAlignRight, valueCloseToMarker, valueStyle)), topMarginForOuterGap);\n}\n/**\n * @return markupText. null/undefined means no content.\n */\n\n\nexport function buildTooltipMarkup(fragment, markupStyleCreator, renderMode, orderMode, useUTC, toolTipTextStyle) {\n  if (!fragment) {\n    return;\n  }\n\n  var builder = getBuilder(fragment);\n  var ctx = {\n    useUTC: useUTC,\n    renderMode: renderMode,\n    orderMode: orderMode,\n    markupStyleCreator: markupStyleCreator,\n    valueFormatter: fragment.valueFormatter\n  };\n  return builder(ctx, fragment, 0, toolTipTextStyle);\n}\n\nfunction getGap(gapLevel) {\n  return {\n    html: HTML_GAPS[gapLevel],\n    richText: RICH_TEXT_GAPS[gapLevel]\n  };\n}\n\nfunction wrapBlockHTML(encodedContent, topGap) {\n  var clearfix = '<div style=\"clear:both\"></div>';\n  var marginCSS = \"margin: \" + topGap + \"px 0 0\";\n  return \"<div style=\\\"\" + marginCSS + \";\" + TOOLTIP_LINE_HEIGHT_CSS + \";\\\">\" + encodedContent + clearfix + '</div>';\n}\n\nfunction wrapInlineNameHTML(name, leftHasMarker, style) {\n  var marginCss = leftHasMarker ? 'margin-left:2px' : '';\n  return \"<span style=\\\"\" + style + \";\" + marginCss + \"\\\">\" + encodeHTML(name) + '</span>';\n}\n\nfunction wrapInlineValueHTML(valueList, alignRight, valueCloseToMarker, style) {\n  // Do not too close to marker, considering there are multiple values separated by spaces.\n  var paddingStr = valueCloseToMarker ? '10px' : '20px';\n  var alignCSS = alignRight ? \"float:right;margin-left:\" + paddingStr : '';\n  valueList = isArray(valueList) ? valueList : [valueList];\n  return \"<span style=\\\"\" + alignCSS + \";\" + style + \"\\\">\" // Value has commas inside, so use '  ' as delimiter for multiple values.\n  + map(valueList, function (value) {\n    return encodeHTML(value);\n  }).join('&nbsp;&nbsp;') + '</span>';\n}\n\nfunction wrapInlineNameRichText(ctx, name, style) {\n  return ctx.markupStyleCreator.wrapRichTextStyle(name, style);\n}\n\nfunction wrapInlineValueRichText(ctx, values, alignRight, valueCloseToMarker, style) {\n  var styles = [style];\n  var paddingLeft = valueCloseToMarker ? 10 : 20;\n  alignRight && styles.push({\n    padding: [0, 0, 0, paddingLeft],\n    align: 'right'\n  }); // Value has commas inside, so use '  ' as delimiter for multiple values.\n\n  return ctx.markupStyleCreator.wrapRichTextStyle(isArray(values) ? values.join('  ') : values, styles);\n}\n\nexport function retrieveVisualColorForTooltipMarker(series, dataIndex) {\n  var style = series.getData().getItemVisual(dataIndex, 'style');\n  var color = style[series.visualDrawType];\n  return convertToColorString(color);\n}\nexport function getPaddingFromTooltipModel(model, renderMode) {\n  var padding = model.get('padding');\n  return padding != null ? padding // We give slightly different to look pretty.\n  : renderMode === 'richText' ? [8, 10] : 10;\n}\n/**\n * The major feature is generate styles for `renderMode: 'richText'`.\n * But it also serves `renderMode: 'html'` to provide\n * \"renderMode-independent\" API.\n */\n\nvar TooltipMarkupStyleCreator =\n/** @class */\nfunction () {\n  function TooltipMarkupStyleCreator() {\n    this.richTextStyles = {}; // Notice that \"generate a style name\" usuall happens repeatly when mouse moving and\n    // displaying a tooltip. So we put the `_nextStyleNameId` as a member of each creator\n    // rather than static shared by all creators (which will cause it increase to fast).\n\n    this._nextStyleNameId = getRandomIdBase();\n  }\n\n  TooltipMarkupStyleCreator.prototype._generateStyleName = function () {\n    return '__EC_aUTo_' + this._nextStyleNameId++;\n  };\n\n  TooltipMarkupStyleCreator.prototype.makeTooltipMarker = function (markerType, colorStr, renderMode) {\n    var markerId = renderMode === 'richText' ? this._generateStyleName() : null;\n    var marker = getTooltipMarker({\n      color: colorStr,\n      type: markerType,\n      renderMode: renderMode,\n      markerId: markerId\n    });\n\n    if (isString(marker)) {\n      return marker;\n    } else {\n      if (process.env.NODE_ENV !== 'production') {\n        assert(markerId);\n      }\n\n      this.richTextStyles[markerId] = marker.style;\n      return marker.content;\n    }\n  };\n  /**\n   * @usage\n   * ```ts\n   * const styledText = markupStyleCreator.wrapRichTextStyle([\n   *     // The styles will be auto merged.\n   *     {\n   *         fontSize: 12,\n   *         color: 'blue'\n   *     },\n   *     {\n   *         padding: 20\n   *     }\n   * ]);\n   * ```\n   */\n\n\n  TooltipMarkupStyleCreator.prototype.wrapRichTextStyle = function (text, styles) {\n    var finalStl = {};\n\n    if (isArray(styles)) {\n      each(styles, function (stl) {\n        return extend(finalStl, stl);\n      });\n    } else {\n      extend(finalStl, styles);\n    }\n\n    var styleName = this._generateStyleName();\n\n    this.richTextStyles[styleName] = finalStl;\n    return \"{\" + styleName + \"|\" + text + \"}\";\n  };\n\n  return TooltipMarkupStyleCreator;\n}();\n\nexport { TooltipMarkupStyleCreator };"],"names":["defaultSeriesFormatTooltip","opt","inlineValue","inlineValueType","subBlocks","sortParam","series","dataIndex","multipleSeries","data","getData","tooltipDims","mapDimensionsAll","tooltipDimLen","length","value","getRawValue","isValueArr","isArray","markerColor","retrieveVisualColorForTooltipMarker","formatArrResult","colorStr","isValueMultipleLine","reduce","val","idx","dimItem","getDimensionInfo","tooltip","displayName","inlineValues","inlineValueTypes","blocks","setEachItem","dim","dimInfo","otherDims","push","createTooltipMarkup","markerType","name","valueType","type","each","retrieveRawValue","formatTooltipArrayValue","seriesNameSpecified","isNameSpecified","seriesName","itemName","getName","inlineName","header","noHeader","noName","trim","concat","getTooltipTextStyle","textStyle","renderMode","nameFontColor","color","nameFontSize","fontSize","nameFontWeight","fontWeight","valueFontColor","valueFontSize","valueFontWeight","nameStyle","encodeHTML","valueStyle","fill","HTML_GAPS","RICH_TEXT_GAPS","option","isSectionFragment","frag","getBuilder","buildSection","buildNameValue","getBlockGapLevel","gapLevel_1","subBlockLen","hasInnerGap_1","subBlock","subGapLevel","ctx","fragment","topMarginForOuterGap","toolTipTextStyle","gapLevel","gaps","html","richText","subMarkupTextList","assert","orderMode","sortBlocks","slice","orderMap","valueAsc","valueDesc","hasOwn","comparator_1","SortOrderComparator","sort","a","b","evaluate","reverse","valueFormatter","subMarkupText","extend","join","wrapBlockHTML","displayableHeader","makeValueReadable","useUTC","wrapInlineNameRichText","noValue","noMarker","map","valueTypeOption","markerStr","markupStyleCreator","makeTooltipMarker","readableName","readableValueList","valueAlignRight","valueCloseToMarker","_a","values","alignRight","style","styles","paddingLeft","padding","align","wrapRichTextStyle","wrapInlineValueRichText","leftHasMarker","wrapInlineNameHTML","valueList","paddingStr","alignCSS","wrapInlineValueHTML","buildTooltipMarkup","builder","encodedContent","topGap","getItemVisual","visualDrawType","convertToColorString","getPaddingFromTooltipModel","model","get","TooltipMarkupStyleCreator","this","richTextStyles","_nextStyleNameId","getRandomIdBase","prototype","_generateStyleName","markerId","marker","getTooltipMarker","isString","content","text","finalStl","stl","styleName"],"sourceRoot":""}