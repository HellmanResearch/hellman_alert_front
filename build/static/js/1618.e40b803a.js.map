{"version":3,"file":"static/js/1618.e40b803a.js","mappings":"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","sources":["../node_modules/@ctrl/tinycolor/dist/module/conversion.js","../node_modules/@ctrl/tinycolor/dist/module/css-color-names.js","../node_modules/@ctrl/tinycolor/dist/module/format-input.js","../node_modules/@ctrl/tinycolor/dist/module/from-ratio.js","../node_modules/@ctrl/tinycolor/dist/module/index.js"],"sourcesContent":["import { bound01, pad2 } from './util';\n// `rgbToHsl`, `rgbToHsv`, `hslToRgb`, `hsvToRgb` modified from:\n// <http://mjijackson.com/2008/02/rgb-to-hsl-and-rgb-to-hsv-color-model-conversion-algorithms-in-javascript>\n/**\n * Handle bounds / percentage checking to conform to CSS color spec\n * <http://www.w3.org/TR/css3-color/>\n * *Assumes:* r, g, b in [0, 255] or [0, 1]\n * *Returns:* { r, g, b } in [0, 255]\n */\nexport function rgbToRgb(r, g, b) {\n    return {\n        r: bound01(r, 255) * 255,\n        g: bound01(g, 255) * 255,\n        b: bound01(b, 255) * 255,\n    };\n}\n/**\n * Converts an RGB color value to HSL.\n * *Assumes:* r, g, and b are contained in [0, 255] or [0, 1]\n * *Returns:* { h, s, l } in [0,1]\n */\nexport function rgbToHsl(r, g, b) {\n    r = bound01(r, 255);\n    g = bound01(g, 255);\n    b = bound01(b, 255);\n    var max = Math.max(r, g, b);\n    var min = Math.min(r, g, b);\n    var h = 0;\n    var s = 0;\n    var l = (max + min) / 2;\n    if (max === min) {\n        s = 0;\n        h = 0; // achromatic\n    }\n    else {\n        var d = max - min;\n        s = l > 0.5 ? d / (2 - max - min) : d / (max + min);\n        switch (max) {\n            case r:\n                h = (g - b) / d + (g < b ? 6 : 0);\n                break;\n            case g:\n                h = (b - r) / d + 2;\n                break;\n            case b:\n                h = (r - g) / d + 4;\n                break;\n            default:\n                break;\n        }\n        h /= 6;\n    }\n    return { h: h, s: s, l: l };\n}\nfunction hue2rgb(p, q, t) {\n    if (t < 0) {\n        t += 1;\n    }\n    if (t > 1) {\n        t -= 1;\n    }\n    if (t < 1 / 6) {\n        return p + (q - p) * (6 * t);\n    }\n    if (t < 1 / 2) {\n        return q;\n    }\n    if (t < 2 / 3) {\n        return p + (q - p) * (2 / 3 - t) * 6;\n    }\n    return p;\n}\n/**\n * Converts an HSL color value to RGB.\n *\n * *Assumes:* h is contained in [0, 1] or [0, 360] and s and l are contained [0, 1] or [0, 100]\n * *Returns:* { r, g, b } in the set [0, 255]\n */\nexport function hslToRgb(h, s, l) {\n    var r;\n    var g;\n    var b;\n    h = bound01(h, 360);\n    s = bound01(s, 100);\n    l = bound01(l, 100);\n    if (s === 0) {\n        // achromatic\n        g = l;\n        b = l;\n        r = l;\n    }\n    else {\n        var q = l < 0.5 ? l * (1 + s) : l + s - l * s;\n        var p = 2 * l - q;\n        r = hue2rgb(p, q, h + 1 / 3);\n        g = hue2rgb(p, q, h);\n        b = hue2rgb(p, q, h - 1 / 3);\n    }\n    return { r: r * 255, g: g * 255, b: b * 255 };\n}\n/**\n * Converts an RGB color value to HSV\n *\n * *Assumes:* r, g, and b are contained in the set [0, 255] or [0, 1]\n * *Returns:* { h, s, v } in [0,1]\n */\nexport function rgbToHsv(r, g, b) {\n    r = bound01(r, 255);\n    g = bound01(g, 255);\n    b = bound01(b, 255);\n    var max = Math.max(r, g, b);\n    var min = Math.min(r, g, b);\n    var h = 0;\n    var v = max;\n    var d = max - min;\n    var s = max === 0 ? 0 : d / max;\n    if (max === min) {\n        h = 0; // achromatic\n    }\n    else {\n        switch (max) {\n            case r:\n                h = (g - b) / d + (g < b ? 6 : 0);\n                break;\n            case g:\n                h = (b - r) / d + 2;\n                break;\n            case b:\n                h = (r - g) / d + 4;\n                break;\n            default:\n                break;\n        }\n        h /= 6;\n    }\n    return { h: h, s: s, v: v };\n}\n/**\n * Converts an HSV color value to RGB.\n *\n * *Assumes:* h is contained in [0, 1] or [0, 360] and s and v are contained in [0, 1] or [0, 100]\n * *Returns:* { r, g, b } in the set [0, 255]\n */\nexport function hsvToRgb(h, s, v) {\n    h = bound01(h, 360) * 6;\n    s = bound01(s, 100);\n    v = bound01(v, 100);\n    var i = Math.floor(h);\n    var f = h - i;\n    var p = v * (1 - s);\n    var q = v * (1 - f * s);\n    var t = v * (1 - (1 - f) * s);\n    var mod = i % 6;\n    var r = [v, q, p, p, t, v][mod];\n    var g = [t, v, v, q, p, p][mod];\n    var b = [p, p, t, v, v, q][mod];\n    return { r: r * 255, g: g * 255, b: b * 255 };\n}\n/**\n * Converts an RGB color to hex\n *\n * Assumes r, g, and b are contained in the set [0, 255]\n * Returns a 3 or 6 character hex\n */\nexport function rgbToHex(r, g, b, allow3Char) {\n    var hex = [\n        pad2(Math.round(r).toString(16)),\n        pad2(Math.round(g).toString(16)),\n        pad2(Math.round(b).toString(16)),\n    ];\n    // Return a 3 character hex if possible\n    if (allow3Char &&\n        hex[0].startsWith(hex[0].charAt(1)) &&\n        hex[1].startsWith(hex[1].charAt(1)) &&\n        hex[2].startsWith(hex[2].charAt(1))) {\n        return hex[0].charAt(0) + hex[1].charAt(0) + hex[2].charAt(0);\n    }\n    return hex.join('');\n}\n/**\n * Converts an RGBA color plus alpha transparency to hex\n *\n * Assumes r, g, b are contained in the set [0, 255] and\n * a in [0, 1]. Returns a 4 or 8 character rgba hex\n */\n// eslint-disable-next-line max-params\nexport function rgbaToHex(r, g, b, a, allow4Char) {\n    var hex = [\n        pad2(Math.round(r).toString(16)),\n        pad2(Math.round(g).toString(16)),\n        pad2(Math.round(b).toString(16)),\n        pad2(convertDecimalToHex(a)),\n    ];\n    // Return a 4 character hex if possible\n    if (allow4Char &&\n        hex[0].startsWith(hex[0].charAt(1)) &&\n        hex[1].startsWith(hex[1].charAt(1)) &&\n        hex[2].startsWith(hex[2].charAt(1)) &&\n        hex[3].startsWith(hex[3].charAt(1))) {\n        return hex[0].charAt(0) + hex[1].charAt(0) + hex[2].charAt(0) + hex[3].charAt(0);\n    }\n    return hex.join('');\n}\n/**\n * Converts an RGBA color to an ARGB Hex8 string\n * Rarely used, but required for \"toFilter()\"\n */\nexport function rgbaToArgbHex(r, g, b, a) {\n    var hex = [\n        pad2(convertDecimalToHex(a)),\n        pad2(Math.round(r).toString(16)),\n        pad2(Math.round(g).toString(16)),\n        pad2(Math.round(b).toString(16)),\n    ];\n    return hex.join('');\n}\n/** Converts a decimal to a hex value */\nexport function convertDecimalToHex(d) {\n    return Math.round(parseFloat(d) * 255).toString(16);\n}\n/** Converts a hex value to a decimal */\nexport function convertHexToDecimal(h) {\n    return parseIntFromHex(h) / 255;\n}\n/** Parse a base-16 hex value into a base-10 integer */\nexport function parseIntFromHex(val) {\n    return parseInt(val, 16);\n}\nexport function numberInputToObject(color) {\n    return {\n        r: color >> 16,\n        g: (color & 0xff00) >> 8,\n        b: color & 0xff,\n    };\n}\n","// https://github.com/bahamas10/css-color-names/blob/master/css-color-names.json\n/**\n * @hidden\n */\nexport var names = {\n    aliceblue: '#f0f8ff',\n    antiquewhite: '#faebd7',\n    aqua: '#00ffff',\n    aquamarine: '#7fffd4',\n    azure: '#f0ffff',\n    beige: '#f5f5dc',\n    bisque: '#ffe4c4',\n    black: '#000000',\n    blanchedalmond: '#ffebcd',\n    blue: '#0000ff',\n    blueviolet: '#8a2be2',\n    brown: '#a52a2a',\n    burlywood: '#deb887',\n    cadetblue: '#5f9ea0',\n    chartreuse: '#7fff00',\n    chocolate: '#d2691e',\n    coral: '#ff7f50',\n    cornflowerblue: '#6495ed',\n    cornsilk: '#fff8dc',\n    crimson: '#dc143c',\n    cyan: '#00ffff',\n    darkblue: '#00008b',\n    darkcyan: '#008b8b',\n    darkgoldenrod: '#b8860b',\n    darkgray: '#a9a9a9',\n    darkgreen: '#006400',\n    darkgrey: '#a9a9a9',\n    darkkhaki: '#bdb76b',\n    darkmagenta: '#8b008b',\n    darkolivegreen: '#556b2f',\n    darkorange: '#ff8c00',\n    darkorchid: '#9932cc',\n    darkred: '#8b0000',\n    darksalmon: '#e9967a',\n    darkseagreen: '#8fbc8f',\n    darkslateblue: '#483d8b',\n    darkslategray: '#2f4f4f',\n    darkslategrey: '#2f4f4f',\n    darkturquoise: '#00ced1',\n    darkviolet: '#9400d3',\n    deeppink: '#ff1493',\n    deepskyblue: '#00bfff',\n    dimgray: '#696969',\n    dimgrey: '#696969',\n    dodgerblue: '#1e90ff',\n    firebrick: '#b22222',\n    floralwhite: '#fffaf0',\n    forestgreen: '#228b22',\n    fuchsia: '#ff00ff',\n    gainsboro: '#dcdcdc',\n    ghostwhite: '#f8f8ff',\n    goldenrod: '#daa520',\n    gold: '#ffd700',\n    gray: '#808080',\n    green: '#008000',\n    greenyellow: '#adff2f',\n    grey: '#808080',\n    honeydew: '#f0fff0',\n    hotpink: '#ff69b4',\n    indianred: '#cd5c5c',\n    indigo: '#4b0082',\n    ivory: '#fffff0',\n    khaki: '#f0e68c',\n    lavenderblush: '#fff0f5',\n    lavender: '#e6e6fa',\n    lawngreen: '#7cfc00',\n    lemonchiffon: '#fffacd',\n    lightblue: '#add8e6',\n    lightcoral: '#f08080',\n    lightcyan: '#e0ffff',\n    lightgoldenrodyellow: '#fafad2',\n    lightgray: '#d3d3d3',\n    lightgreen: '#90ee90',\n    lightgrey: '#d3d3d3',\n    lightpink: '#ffb6c1',\n    lightsalmon: '#ffa07a',\n    lightseagreen: '#20b2aa',\n    lightskyblue: '#87cefa',\n    lightslategray: '#778899',\n    lightslategrey: '#778899',\n    lightsteelblue: '#b0c4de',\n    lightyellow: '#ffffe0',\n    lime: '#00ff00',\n    limegreen: '#32cd32',\n    linen: '#faf0e6',\n    magenta: '#ff00ff',\n    maroon: '#800000',\n    mediumaquamarine: '#66cdaa',\n    mediumblue: '#0000cd',\n    mediumorchid: '#ba55d3',\n    mediumpurple: '#9370db',\n    mediumseagreen: '#3cb371',\n    mediumslateblue: '#7b68ee',\n    mediumspringgreen: '#00fa9a',\n    mediumturquoise: '#48d1cc',\n    mediumvioletred: '#c71585',\n    midnightblue: '#191970',\n    mintcream: '#f5fffa',\n    mistyrose: '#ffe4e1',\n    moccasin: '#ffe4b5',\n    navajowhite: '#ffdead',\n    navy: '#000080',\n    oldlace: '#fdf5e6',\n    olive: '#808000',\n    olivedrab: '#6b8e23',\n    orange: '#ffa500',\n    orangered: '#ff4500',\n    orchid: '#da70d6',\n    palegoldenrod: '#eee8aa',\n    palegreen: '#98fb98',\n    paleturquoise: '#afeeee',\n    palevioletred: '#db7093',\n    papayawhip: '#ffefd5',\n    peachpuff: '#ffdab9',\n    peru: '#cd853f',\n    pink: '#ffc0cb',\n    plum: '#dda0dd',\n    powderblue: '#b0e0e6',\n    purple: '#800080',\n    rebeccapurple: '#663399',\n    red: '#ff0000',\n    rosybrown: '#bc8f8f',\n    royalblue: '#4169e1',\n    saddlebrown: '#8b4513',\n    salmon: '#fa8072',\n    sandybrown: '#f4a460',\n    seagreen: '#2e8b57',\n    seashell: '#fff5ee',\n    sienna: '#a0522d',\n    silver: '#c0c0c0',\n    skyblue: '#87ceeb',\n    slateblue: '#6a5acd',\n    slategray: '#708090',\n    slategrey: '#708090',\n    snow: '#fffafa',\n    springgreen: '#00ff7f',\n    steelblue: '#4682b4',\n    tan: '#d2b48c',\n    teal: '#008080',\n    thistle: '#d8bfd8',\n    tomato: '#ff6347',\n    turquoise: '#40e0d0',\n    violet: '#ee82ee',\n    wheat: '#f5deb3',\n    white: '#ffffff',\n    whitesmoke: '#f5f5f5',\n    yellow: '#ffff00',\n    yellowgreen: '#9acd32',\n};\n","import { convertHexToDecimal, hslToRgb, hsvToRgb, parseIntFromHex, rgbToRgb } from './conversion';\nimport { names } from './css-color-names';\nimport { boundAlpha, convertToPercentage } from './util';\n/**\n * Given a string or object, convert that input to RGB\n *\n * Possible string inputs:\n * ```\n * \"red\"\n * \"#f00\" or \"f00\"\n * \"#ff0000\" or \"ff0000\"\n * \"#ff000000\" or \"ff000000\"\n * \"rgb 255 0 0\" or \"rgb (255, 0, 0)\"\n * \"rgb 1.0 0 0\" or \"rgb (1, 0, 0)\"\n * \"rgba (255, 0, 0, 1)\" or \"rgba 255, 0, 0, 1\"\n * \"rgba (1.0, 0, 0, 1)\" or \"rgba 1.0, 0, 0, 1\"\n * \"hsl(0, 100%, 50%)\" or \"hsl 0 100% 50%\"\n * \"hsla(0, 100%, 50%, 1)\" or \"hsla 0 100% 50%, 1\"\n * \"hsv(0, 100%, 100%)\" or \"hsv 0 100% 100%\"\n * ```\n */\nexport function inputToRGB(color) {\n    var rgb = { r: 0, g: 0, b: 0 };\n    var a = 1;\n    var s = null;\n    var v = null;\n    var l = null;\n    var ok = false;\n    var format = false;\n    if (typeof color === 'string') {\n        color = stringInputToObject(color);\n    }\n    if (typeof color === 'object') {\n        if (isValidCSSUnit(color.r) && isValidCSSUnit(color.g) && isValidCSSUnit(color.b)) {\n            rgb = rgbToRgb(color.r, color.g, color.b);\n            ok = true;\n            format = String(color.r).substr(-1) === '%' ? 'prgb' : 'rgb';\n        }\n        else if (isValidCSSUnit(color.h) && isValidCSSUnit(color.s) && isValidCSSUnit(color.v)) {\n            s = convertToPercentage(color.s);\n            v = convertToPercentage(color.v);\n            rgb = hsvToRgb(color.h, s, v);\n            ok = true;\n            format = 'hsv';\n        }\n        else if (isValidCSSUnit(color.h) && isValidCSSUnit(color.s) && isValidCSSUnit(color.l)) {\n            s = convertToPercentage(color.s);\n            l = convertToPercentage(color.l);\n            rgb = hslToRgb(color.h, s, l);\n            ok = true;\n            format = 'hsl';\n        }\n        if (Object.prototype.hasOwnProperty.call(color, 'a')) {\n            a = color.a;\n        }\n    }\n    a = boundAlpha(a);\n    return {\n        ok: ok,\n        format: color.format || format,\n        r: Math.min(255, Math.max(rgb.r, 0)),\n        g: Math.min(255, Math.max(rgb.g, 0)),\n        b: Math.min(255, Math.max(rgb.b, 0)),\n        a: a,\n    };\n}\n// <http://www.w3.org/TR/css3-values/#integers>\nvar CSS_INTEGER = '[-\\\\+]?\\\\d+%?';\n// <http://www.w3.org/TR/css3-values/#number-value>\nvar CSS_NUMBER = '[-\\\\+]?\\\\d*\\\\.\\\\d+%?';\n// Allow positive/negative integer/number.  Don't capture the either/or, just the entire outcome.\nvar CSS_UNIT = \"(?:\".concat(CSS_NUMBER, \")|(?:\").concat(CSS_INTEGER, \")\");\n// Actual matching.\n// Parentheses and commas are optional, but not required.\n// Whitespace can take the place of commas or opening paren\nvar PERMISSIVE_MATCH3 = \"[\\\\s|\\\\(]+(\".concat(CSS_UNIT, \")[,|\\\\s]+(\").concat(CSS_UNIT, \")[,|\\\\s]+(\").concat(CSS_UNIT, \")\\\\s*\\\\)?\");\nvar PERMISSIVE_MATCH4 = \"[\\\\s|\\\\(]+(\".concat(CSS_UNIT, \")[,|\\\\s]+(\").concat(CSS_UNIT, \")[,|\\\\s]+(\").concat(CSS_UNIT, \")[,|\\\\s]+(\").concat(CSS_UNIT, \")\\\\s*\\\\)?\");\nvar matchers = {\n    CSS_UNIT: new RegExp(CSS_UNIT),\n    rgb: new RegExp('rgb' + PERMISSIVE_MATCH3),\n    rgba: new RegExp('rgba' + PERMISSIVE_MATCH4),\n    hsl: new RegExp('hsl' + PERMISSIVE_MATCH3),\n    hsla: new RegExp('hsla' + PERMISSIVE_MATCH4),\n    hsv: new RegExp('hsv' + PERMISSIVE_MATCH3),\n    hsva: new RegExp('hsva' + PERMISSIVE_MATCH4),\n    hex3: /^#?([0-9a-fA-F]{1})([0-9a-fA-F]{1})([0-9a-fA-F]{1})$/,\n    hex6: /^#?([0-9a-fA-F]{2})([0-9a-fA-F]{2})([0-9a-fA-F]{2})$/,\n    hex4: /^#?([0-9a-fA-F]{1})([0-9a-fA-F]{1})([0-9a-fA-F]{1})([0-9a-fA-F]{1})$/,\n    hex8: /^#?([0-9a-fA-F]{2})([0-9a-fA-F]{2})([0-9a-fA-F]{2})([0-9a-fA-F]{2})$/,\n};\n/**\n * Permissive string parsing.  Take in a number of formats, and output an object\n * based on detected format.  Returns `{ r, g, b }` or `{ h, s, l }` or `{ h, s, v}`\n */\nexport function stringInputToObject(color) {\n    color = color.trim().toLowerCase();\n    if (color.length === 0) {\n        return false;\n    }\n    var named = false;\n    if (names[color]) {\n        color = names[color];\n        named = true;\n    }\n    else if (color === 'transparent') {\n        return { r: 0, g: 0, b: 0, a: 0, format: 'name' };\n    }\n    // Try to match string input using regular expressions.\n    // Keep most of the number bounding out of this function - don't worry about [0,1] or [0,100] or [0,360]\n    // Just return an object and let the conversion functions handle that.\n    // This way the result will be the same whether the tinycolor is initialized with string or object.\n    var match = matchers.rgb.exec(color);\n    if (match) {\n        return { r: match[1], g: match[2], b: match[3] };\n    }\n    match = matchers.rgba.exec(color);\n    if (match) {\n        return { r: match[1], g: match[2], b: match[3], a: match[4] };\n    }\n    match = matchers.hsl.exec(color);\n    if (match) {\n        return { h: match[1], s: match[2], l: match[3] };\n    }\n    match = matchers.hsla.exec(color);\n    if (match) {\n        return { h: match[1], s: match[2], l: match[3], a: match[4] };\n    }\n    match = matchers.hsv.exec(color);\n    if (match) {\n        return { h: match[1], s: match[2], v: match[3] };\n    }\n    match = matchers.hsva.exec(color);\n    if (match) {\n        return { h: match[1], s: match[2], v: match[3], a: match[4] };\n    }\n    match = matchers.hex8.exec(color);\n    if (match) {\n        return {\n            r: parseIntFromHex(match[1]),\n            g: parseIntFromHex(match[2]),\n            b: parseIntFromHex(match[3]),\n            a: convertHexToDecimal(match[4]),\n            format: named ? 'name' : 'hex8',\n        };\n    }\n    match = matchers.hex6.exec(color);\n    if (match) {\n        return {\n            r: parseIntFromHex(match[1]),\n            g: parseIntFromHex(match[2]),\n            b: parseIntFromHex(match[3]),\n            format: named ? 'name' : 'hex',\n        };\n    }\n    match = matchers.hex4.exec(color);\n    if (match) {\n        return {\n            r: parseIntFromHex(match[1] + match[1]),\n            g: parseIntFromHex(match[2] + match[2]),\n            b: parseIntFromHex(match[3] + match[3]),\n            a: convertHexToDecimal(match[4] + match[4]),\n            format: named ? 'name' : 'hex8',\n        };\n    }\n    match = matchers.hex3.exec(color);\n    if (match) {\n        return {\n            r: parseIntFromHex(match[1] + match[1]),\n            g: parseIntFromHex(match[2] + match[2]),\n            b: parseIntFromHex(match[3] + match[3]),\n            format: named ? 'name' : 'hex',\n        };\n    }\n    return false;\n}\n/**\n * Check to see if it looks like a CSS unit\n * (see `matchers` above for definition).\n */\nexport function isValidCSSUnit(color) {\n    return Boolean(matchers.CSS_UNIT.exec(String(color)));\n}\n","import { TinyColor } from './index';\nimport { convertToPercentage } from './util';\n/**\n * If input is an object, force 1 into \"1.0\" to handle ratios properly\n * String input requires \"1.0\" as input, so 1 will be treated as 1\n */\nexport function fromRatio(ratio, opts) {\n    var newColor = {\n        r: convertToPercentage(ratio.r),\n        g: convertToPercentage(ratio.g),\n        b: convertToPercentage(ratio.b),\n    };\n    if (ratio.a !== undefined) {\n        newColor.a = Number(ratio.a);\n    }\n    return new TinyColor(newColor, opts);\n}\n/** old random function */\nexport function legacyRandom() {\n    return new TinyColor({\n        r: Math.random(),\n        g: Math.random(),\n        b: Math.random(),\n    });\n}\n","import { numberInputToObject, rgbaToHex, rgbToHex, rgbToHsl, rgbToHsv } from './conversion';\nimport { names } from './css-color-names';\nimport { inputToRGB } from './format-input';\nimport { bound01, boundAlpha, clamp01 } from './util';\nvar TinyColor = /** @class */ (function () {\n    function TinyColor(color, opts) {\n        if (color === void 0) { color = ''; }\n        if (opts === void 0) { opts = {}; }\n        var _a;\n        // If input is already a tinycolor, return itself\n        if (color instanceof TinyColor) {\n            // eslint-disable-next-line no-constructor-return\n            return color;\n        }\n        if (typeof color === 'number') {\n            color = numberInputToObject(color);\n        }\n        this.originalInput = color;\n        var rgb = inputToRGB(color);\n        this.originalInput = color;\n        this.r = rgb.r;\n        this.g = rgb.g;\n        this.b = rgb.b;\n        this.a = rgb.a;\n        this.roundA = Math.round(100 * this.a) / 100;\n        this.format = (_a = opts.format) !== null && _a !== void 0 ? _a : rgb.format;\n        this.gradientType = opts.gradientType;\n        // Don't let the range of [0,255] come back in [0,1].\n        // Potentially lose a little bit of precision here, but will fix issues where\n        // .5 gets interpreted as half of the total, instead of half of 1\n        // If it was supposed to be 128, this was already taken care of by `inputToRgb`\n        if (this.r < 1) {\n            this.r = Math.round(this.r);\n        }\n        if (this.g < 1) {\n            this.g = Math.round(this.g);\n        }\n        if (this.b < 1) {\n            this.b = Math.round(this.b);\n        }\n        this.isValid = rgb.ok;\n    }\n    TinyColor.prototype.isDark = function () {\n        return this.getBrightness() < 128;\n    };\n    TinyColor.prototype.isLight = function () {\n        return !this.isDark();\n    };\n    /**\n     * Returns the perceived brightness of the color, from 0-255.\n     */\n    TinyColor.prototype.getBrightness = function () {\n        // http://www.w3.org/TR/AERT#color-contrast\n        var rgb = this.toRgb();\n        return (rgb.r * 299 + rgb.g * 587 + rgb.b * 114) / 1000;\n    };\n    /**\n     * Returns the perceived luminance of a color, from 0-1.\n     */\n    TinyColor.prototype.getLuminance = function () {\n        // http://www.w3.org/TR/2008/REC-WCAG20-20081211/#relativeluminancedef\n        var rgb = this.toRgb();\n        var R;\n        var G;\n        var B;\n        var RsRGB = rgb.r / 255;\n        var GsRGB = rgb.g / 255;\n        var BsRGB = rgb.b / 255;\n        if (RsRGB <= 0.03928) {\n            R = RsRGB / 12.92;\n        }\n        else {\n            // eslint-disable-next-line prefer-exponentiation-operator\n            R = Math.pow((RsRGB + 0.055) / 1.055, 2.4);\n        }\n        if (GsRGB <= 0.03928) {\n            G = GsRGB / 12.92;\n        }\n        else {\n            // eslint-disable-next-line prefer-exponentiation-operator\n            G = Math.pow((GsRGB + 0.055) / 1.055, 2.4);\n        }\n        if (BsRGB <= 0.03928) {\n            B = BsRGB / 12.92;\n        }\n        else {\n            // eslint-disable-next-line prefer-exponentiation-operator\n            B = Math.pow((BsRGB + 0.055) / 1.055, 2.4);\n        }\n        return 0.2126 * R + 0.7152 * G + 0.0722 * B;\n    };\n    /**\n     * Returns the alpha value of a color, from 0-1.\n     */\n    TinyColor.prototype.getAlpha = function () {\n        return this.a;\n    };\n    /**\n     * Sets the alpha value on the current color.\n     *\n     * @param alpha - The new alpha value. The accepted range is 0-1.\n     */\n    TinyColor.prototype.setAlpha = function (alpha) {\n        this.a = boundAlpha(alpha);\n        this.roundA = Math.round(100 * this.a) / 100;\n        return this;\n    };\n    /**\n     * Returns the object as a HSVA object.\n     */\n    TinyColor.prototype.toHsv = function () {\n        var hsv = rgbToHsv(this.r, this.g, this.b);\n        return { h: hsv.h * 360, s: hsv.s, v: hsv.v, a: this.a };\n    };\n    /**\n     * Returns the hsva values interpolated into a string with the following format:\n     * \"hsva(xxx, xxx, xxx, xx)\".\n     */\n    TinyColor.prototype.toHsvString = function () {\n        var hsv = rgbToHsv(this.r, this.g, this.b);\n        var h = Math.round(hsv.h * 360);\n        var s = Math.round(hsv.s * 100);\n        var v = Math.round(hsv.v * 100);\n        return this.a === 1 ? \"hsv(\".concat(h, \", \").concat(s, \"%, \").concat(v, \"%)\") : \"hsva(\".concat(h, \", \").concat(s, \"%, \").concat(v, \"%, \").concat(this.roundA, \")\");\n    };\n    /**\n     * Returns the object as a HSLA object.\n     */\n    TinyColor.prototype.toHsl = function () {\n        var hsl = rgbToHsl(this.r, this.g, this.b);\n        return { h: hsl.h * 360, s: hsl.s, l: hsl.l, a: this.a };\n    };\n    /**\n     * Returns the hsla values interpolated into a string with the following format:\n     * \"hsla(xxx, xxx, xxx, xx)\".\n     */\n    TinyColor.prototype.toHslString = function () {\n        var hsl = rgbToHsl(this.r, this.g, this.b);\n        var h = Math.round(hsl.h * 360);\n        var s = Math.round(hsl.s * 100);\n        var l = Math.round(hsl.l * 100);\n        return this.a === 1 ? \"hsl(\".concat(h, \", \").concat(s, \"%, \").concat(l, \"%)\") : \"hsla(\".concat(h, \", \").concat(s, \"%, \").concat(l, \"%, \").concat(this.roundA, \")\");\n    };\n    /**\n     * Returns the hex value of the color.\n     * @param allow3Char will shorten hex value to 3 char if possible\n     */\n    TinyColor.prototype.toHex = function (allow3Char) {\n        if (allow3Char === void 0) { allow3Char = false; }\n        return rgbToHex(this.r, this.g, this.b, allow3Char);\n    };\n    /**\n     * Returns the hex value of the color -with a # appened.\n     * @param allow3Char will shorten hex value to 3 char if possible\n     */\n    TinyColor.prototype.toHexString = function (allow3Char) {\n        if (allow3Char === void 0) { allow3Char = false; }\n        return '#' + this.toHex(allow3Char);\n    };\n    /**\n     * Returns the hex 8 value of the color.\n     * @param allow4Char will shorten hex value to 4 char if possible\n     */\n    TinyColor.prototype.toHex8 = function (allow4Char) {\n        if (allow4Char === void 0) { allow4Char = false; }\n        return rgbaToHex(this.r, this.g, this.b, this.a, allow4Char);\n    };\n    /**\n     * Returns the hex 8 value of the color -with a # appened.\n     * @param allow4Char will shorten hex value to 4 char if possible\n     */\n    TinyColor.prototype.toHex8String = function (allow4Char) {\n        if (allow4Char === void 0) { allow4Char = false; }\n        return '#' + this.toHex8(allow4Char);\n    };\n    /**\n     * Returns the object as a RGBA object.\n     */\n    TinyColor.prototype.toRgb = function () {\n        return {\n            r: Math.round(this.r),\n            g: Math.round(this.g),\n            b: Math.round(this.b),\n            a: this.a,\n        };\n    };\n    /**\n     * Returns the RGBA values interpolated into a string with the following format:\n     * \"RGBA(xxx, xxx, xxx, xx)\".\n     */\n    TinyColor.prototype.toRgbString = function () {\n        var r = Math.round(this.r);\n        var g = Math.round(this.g);\n        var b = Math.round(this.b);\n        return this.a === 1 ? \"rgb(\".concat(r, \", \").concat(g, \", \").concat(b, \")\") : \"rgba(\".concat(r, \", \").concat(g, \", \").concat(b, \", \").concat(this.roundA, \")\");\n    };\n    /**\n     * Returns the object as a RGBA object.\n     */\n    TinyColor.prototype.toPercentageRgb = function () {\n        var fmt = function (x) { return \"\".concat(Math.round(bound01(x, 255) * 100), \"%\"); };\n        return {\n            r: fmt(this.r),\n            g: fmt(this.g),\n            b: fmt(this.b),\n            a: this.a,\n        };\n    };\n    /**\n     * Returns the RGBA relative values interpolated into a string\n     */\n    TinyColor.prototype.toPercentageRgbString = function () {\n        var rnd = function (x) { return Math.round(bound01(x, 255) * 100); };\n        return this.a === 1\n            ? \"rgb(\".concat(rnd(this.r), \"%, \").concat(rnd(this.g), \"%, \").concat(rnd(this.b), \"%)\")\n            : \"rgba(\".concat(rnd(this.r), \"%, \").concat(rnd(this.g), \"%, \").concat(rnd(this.b), \"%, \").concat(this.roundA, \")\");\n    };\n    /**\n     * The 'real' name of the color -if there is one.\n     */\n    TinyColor.prototype.toName = function () {\n        if (this.a === 0) {\n            return 'transparent';\n        }\n        if (this.a < 1) {\n            return false;\n        }\n        var hex = '#' + rgbToHex(this.r, this.g, this.b, false);\n        for (var _i = 0, _a = Object.entries(names); _i < _a.length; _i++) {\n            var _b = _a[_i], key = _b[0], value = _b[1];\n            if (hex === value) {\n                return key;\n            }\n        }\n        return false;\n    };\n    TinyColor.prototype.toString = function (format) {\n        var formatSet = Boolean(format);\n        format = format !== null && format !== void 0 ? format : this.format;\n        var formattedString = false;\n        var hasAlpha = this.a < 1 && this.a >= 0;\n        var needsAlphaFormat = !formatSet && hasAlpha && (format.startsWith('hex') || format === 'name');\n        if (needsAlphaFormat) {\n            // Special case for \"transparent\", all other non-alpha formats\n            // will return rgba when there is transparency.\n            if (format === 'name' && this.a === 0) {\n                return this.toName();\n            }\n            return this.toRgbString();\n        }\n        if (format === 'rgb') {\n            formattedString = this.toRgbString();\n        }\n        if (format === 'prgb') {\n            formattedString = this.toPercentageRgbString();\n        }\n        if (format === 'hex' || format === 'hex6') {\n            formattedString = this.toHexString();\n        }\n        if (format === 'hex3') {\n            formattedString = this.toHexString(true);\n        }\n        if (format === 'hex4') {\n            formattedString = this.toHex8String(true);\n        }\n        if (format === 'hex8') {\n            formattedString = this.toHex8String();\n        }\n        if (format === 'name') {\n            formattedString = this.toName();\n        }\n        if (format === 'hsl') {\n            formattedString = this.toHslString();\n        }\n        if (format === 'hsv') {\n            formattedString = this.toHsvString();\n        }\n        return formattedString || this.toHexString();\n    };\n    TinyColor.prototype.toNumber = function () {\n        return (Math.round(this.r) << 16) + (Math.round(this.g) << 8) + Math.round(this.b);\n    };\n    TinyColor.prototype.clone = function () {\n        return new TinyColor(this.toString());\n    };\n    /**\n     * Lighten the color a given amount. Providing 100 will always return white.\n     * @param amount - valid between 1-100\n     */\n    TinyColor.prototype.lighten = function (amount) {\n        if (amount === void 0) { amount = 10; }\n        var hsl = this.toHsl();\n        hsl.l += amount / 100;\n        hsl.l = clamp01(hsl.l);\n        return new TinyColor(hsl);\n    };\n    /**\n     * Brighten the color a given amount, from 0 to 100.\n     * @param amount - valid between 1-100\n     */\n    TinyColor.prototype.brighten = function (amount) {\n        if (amount === void 0) { amount = 10; }\n        var rgb = this.toRgb();\n        rgb.r = Math.max(0, Math.min(255, rgb.r - Math.round(255 * -(amount / 100))));\n        rgb.g = Math.max(0, Math.min(255, rgb.g - Math.round(255 * -(amount / 100))));\n        rgb.b = Math.max(0, Math.min(255, rgb.b - Math.round(255 * -(amount / 100))));\n        return new TinyColor(rgb);\n    };\n    /**\n     * Darken the color a given amount, from 0 to 100.\n     * Providing 100 will always return black.\n     * @param amount - valid between 1-100\n     */\n    TinyColor.prototype.darken = function (amount) {\n        if (amount === void 0) { amount = 10; }\n        var hsl = this.toHsl();\n        hsl.l -= amount / 100;\n        hsl.l = clamp01(hsl.l);\n        return new TinyColor(hsl);\n    };\n    /**\n     * Mix the color with pure white, from 0 to 100.\n     * Providing 0 will do nothing, providing 100 will always return white.\n     * @param amount - valid between 1-100\n     */\n    TinyColor.prototype.tint = function (amount) {\n        if (amount === void 0) { amount = 10; }\n        return this.mix('white', amount);\n    };\n    /**\n     * Mix the color with pure black, from 0 to 100.\n     * Providing 0 will do nothing, providing 100 will always return black.\n     * @param amount - valid between 1-100\n     */\n    TinyColor.prototype.shade = function (amount) {\n        if (amount === void 0) { amount = 10; }\n        return this.mix('black', amount);\n    };\n    /**\n     * Desaturate the color a given amount, from 0 to 100.\n     * Providing 100 will is the same as calling greyscale\n     * @param amount - valid between 1-100\n     */\n    TinyColor.prototype.desaturate = function (amount) {\n        if (amount === void 0) { amount = 10; }\n        var hsl = this.toHsl();\n        hsl.s -= amount / 100;\n        hsl.s = clamp01(hsl.s);\n        return new TinyColor(hsl);\n    };\n    /**\n     * Saturate the color a given amount, from 0 to 100.\n     * @param amount - valid between 1-100\n     */\n    TinyColor.prototype.saturate = function (amount) {\n        if (amount === void 0) { amount = 10; }\n        var hsl = this.toHsl();\n        hsl.s += amount / 100;\n        hsl.s = clamp01(hsl.s);\n        return new TinyColor(hsl);\n    };\n    /**\n     * Completely desaturates a color into greyscale.\n     * Same as calling `desaturate(100)`\n     */\n    TinyColor.prototype.greyscale = function () {\n        return this.desaturate(100);\n    };\n    /**\n     * Spin takes a positive or negative amount within [-360, 360] indicating the change of hue.\n     * Values outside of this range will be wrapped into this range.\n     */\n    TinyColor.prototype.spin = function (amount) {\n        var hsl = this.toHsl();\n        var hue = (hsl.h + amount) % 360;\n        hsl.h = hue < 0 ? 360 + hue : hue;\n        return new TinyColor(hsl);\n    };\n    /**\n     * Mix the current color a given amount with another color, from 0 to 100.\n     * 0 means no mixing (return current color).\n     */\n    TinyColor.prototype.mix = function (color, amount) {\n        if (amount === void 0) { amount = 50; }\n        var rgb1 = this.toRgb();\n        var rgb2 = new TinyColor(color).toRgb();\n        var p = amount / 100;\n        var rgba = {\n            r: (rgb2.r - rgb1.r) * p + rgb1.r,\n            g: (rgb2.g - rgb1.g) * p + rgb1.g,\n            b: (rgb2.b - rgb1.b) * p + rgb1.b,\n            a: (rgb2.a - rgb1.a) * p + rgb1.a,\n        };\n        return new TinyColor(rgba);\n    };\n    TinyColor.prototype.analogous = function (results, slices) {\n        if (results === void 0) { results = 6; }\n        if (slices === void 0) { slices = 30; }\n        var hsl = this.toHsl();\n        var part = 360 / slices;\n        var ret = [this];\n        for (hsl.h = (hsl.h - ((part * results) >> 1) + 720) % 360; --results;) {\n            hsl.h = (hsl.h + part) % 360;\n            ret.push(new TinyColor(hsl));\n        }\n        return ret;\n    };\n    /**\n     * taken from https://github.com/infusion/jQuery-xcolor/blob/master/jquery.xcolor.js\n     */\n    TinyColor.prototype.complement = function () {\n        var hsl = this.toHsl();\n        hsl.h = (hsl.h + 180) % 360;\n        return new TinyColor(hsl);\n    };\n    TinyColor.prototype.monochromatic = function (results) {\n        if (results === void 0) { results = 6; }\n        var hsv = this.toHsv();\n        var h = hsv.h;\n        var s = hsv.s;\n        var v = hsv.v;\n        var res = [];\n        var modification = 1 / results;\n        while (results--) {\n            res.push(new TinyColor({ h: h, s: s, v: v }));\n            v = (v + modification) % 1;\n        }\n        return res;\n    };\n    TinyColor.prototype.splitcomplement = function () {\n        var hsl = this.toHsl();\n        var h = hsl.h;\n        return [\n            this,\n            new TinyColor({ h: (h + 72) % 360, s: hsl.s, l: hsl.l }),\n            new TinyColor({ h: (h + 216) % 360, s: hsl.s, l: hsl.l }),\n        ];\n    };\n    /**\n     * Compute how the color would appear on a background\n     */\n    TinyColor.prototype.onBackground = function (background) {\n        var fg = this.toRgb();\n        var bg = new TinyColor(background).toRgb();\n        return new TinyColor({\n            r: bg.r + (fg.r - bg.r) * fg.a,\n            g: bg.g + (fg.g - bg.g) * fg.a,\n            b: bg.b + (fg.b - bg.b) * fg.a,\n        });\n    };\n    /**\n     * Alias for `polyad(3)`\n     */\n    TinyColor.prototype.triad = function () {\n        return this.polyad(3);\n    };\n    /**\n     * Alias for `polyad(4)`\n     */\n    TinyColor.prototype.tetrad = function () {\n        return this.polyad(4);\n    };\n    /**\n     * Get polyad colors, like (for 1, 2, 3, 4, 5, 6, 7, 8, etc...)\n     * monad, dyad, triad, tetrad, pentad, hexad, heptad, octad, etc...\n     */\n    TinyColor.prototype.polyad = function (n) {\n        var hsl = this.toHsl();\n        var h = hsl.h;\n        var result = [this];\n        var increment = 360 / n;\n        for (var i = 1; i < n; i++) {\n            result.push(new TinyColor({ h: (h + i * increment) % 360, s: hsl.s, l: hsl.l }));\n        }\n        return result;\n    };\n    /**\n     * compare color vs current color\n     */\n    TinyColor.prototype.equals = function (color) {\n        return this.toRgbString() === new TinyColor(color).toRgbString();\n    };\n    return TinyColor;\n}());\nexport { TinyColor };\n// kept for backwards compatability with v1\nexport function tinycolor(color, opts) {\n    if (color === void 0) { color = ''; }\n    if (opts === void 0) { opts = {}; }\n    return new TinyColor(color, opts);\n}\n"],"names":["rgbToRgb","r","g","b","bound01","rgbToHsl","max","Math","min","h","s","l","d","hue2rgb","p","q","t","hslToRgb","rgbToHsv","v","hsvToRgb","i","floor","f","mod","rgbToHex","allow3Char","hex","pad2","round","toString","startsWith","charAt","join","rgbaToHex","a","allow4Char","convertDecimalToHex","rgbaToArgbHex","parseFloat","convertHexToDecimal","parseIntFromHex","val","parseInt","numberInputToObject","color","names","aliceblue","antiquewhite","aqua","aquamarine","azure","beige","bisque","black","blanchedalmond","blue","blueviolet","brown","burlywood","cadetblue","chartreuse","chocolate","coral","cornflowerblue","cornsilk","crimson","cyan","darkblue","darkcyan","darkgoldenrod","darkgray","darkgreen","darkgrey","darkkhaki","darkmagenta","darkolivegreen","darkorange","darkorchid","darkred","darksalmon","darkseagreen","darkslateblue","darkslategray","darkslategrey","darkturquoise","darkviolet","deeppink","deepskyblue","dimgray","dimgrey","dodgerblue","firebrick","floralwhite","forestgreen","fuchsia","gainsboro","ghostwhite","goldenrod","gold","gray","green","greenyellow","grey","honeydew","hotpink","indianred","indigo","ivory","khaki","lavenderblush","lavender","lawngreen","lemonchiffon","lightblue","lightcoral","lightcyan","lightgoldenrodyellow","lightgray","lightgreen","lightgrey","lightpink","lightsalmon","lightseagreen","lightskyblue","lightslategray","lightslategrey","lightsteelblue","lightyellow","lime","limegreen","linen","magenta","maroon","mediumaquamarine","mediumblue","mediumorchid","mediumpurple","mediumseagreen","mediumslateblue","mediumspringgreen","mediumturquoise","mediumvioletred","midnightblue","mintcream","mistyrose","moccasin","navajowhite","navy","oldlace","olive","olivedrab","orange","orangered","orchid","palegoldenrod","palegreen","paleturquoise","palevioletred","papayawhip","peachpuff","peru","pink","plum","powderblue","purple","rebeccapurple","red","rosybrown","royalblue","saddlebrown","salmon","sandybrown","seagreen","seashell","sienna","silver","skyblue","slateblue","slategray","slategrey","snow","springgreen","steelblue","tan","teal","thistle","tomato","turquoise","violet","wheat","white","whitesmoke","yellow","yellowgreen","inputToRGB","rgb","ok","format","stringInputToObject","isValidCSSUnit","String","substr","convertToPercentage","Object","prototype","hasOwnProperty","call","boundAlpha","CSS_UNIT","concat","PERMISSIVE_MATCH3","PERMISSIVE_MATCH4","matchers","RegExp","rgba","hsl","hsla","hsv","hsva","hex3","hex6","hex4","hex8","trim","toLowerCase","length","named","match","exec","Boolean","fromRatio","ratio","opts","newColor","undefined","Number","TinyColor","legacyRandom","random","_a","this","originalInput","roundA","gradientType","isValid","isDark","getBrightness","isLight","toRgb","getLuminance","RsRGB","GsRGB","BsRGB","pow","getAlpha","setAlpha","alpha","toHsv","toHsvString","toHsl","toHslString","toHex","toHexString","toHex8","toHex8String","toRgbString","toPercentageRgb","fmt","x","toPercentageRgbString","rnd","toName","_i","entries","_b","key","formatSet","formattedString","hasAlpha","toNumber","clone","lighten","amount","clamp01","brighten","darken","tint","mix","shade","desaturate","saturate","greyscale","spin","hue","rgb1","rgb2","analogous","results","slices","part","ret","push","complement","monochromatic","res","modification","splitcomplement","onBackground","background","fg","bg","triad","polyad","tetrad","n","result","increment","equals","tinycolor"],"sourceRoot":""}