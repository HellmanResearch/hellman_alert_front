{"version":3,"file":"static/js/5288.bf7c6517.js","mappings":"4LAgDIA,EAEJ,WACE,SAASA,IAAyB,CA+FlC,OAzFAA,EAAsBC,UAAUC,eAAiB,SAAUC,EAAQC,GAIjE,IAAIC,EAKAC,EAJAC,EAAaH,EAAQI,aAAa,QAASC,KAAKC,IAAI,eACpDC,EAAaP,EAAQI,aAAa,QAASC,KAAKC,IAAI,eACpDE,EAAYL,EAAWG,IAAI,QAC3BG,EAAYF,EAAWD,IAAI,QAIb,aAAdE,GACFT,EAAOW,OAAS,aAChBT,EAAcE,EAAWQ,iBACzBT,GAAa,GACU,aAAdO,GACTV,EAAOW,OAAS,WAChBT,EAAcM,EAAWI,iBACzBT,GAAa,GAEbH,EAAOW,OAASX,EAAOW,QAAU,aAGnC,IAAIE,EAAY,CAAC,IAAK,KAClBC,EAAqC,eAAlBd,EAAOW,OAA0B,EAAI,EACxDI,EAAcT,KAAKU,aAAeH,EAAUC,GAC5CG,EAAeJ,EAAU,EAAIC,GAC7BI,EAAa,CAACd,EAAYI,GAC1BW,EAAeD,EAAWJ,GAAkBP,IAAI,QAChDa,EAAgBF,EAAW,EAAIJ,GAAkBP,IAAI,QACrDc,EAAOrB,EAAOqB,KAGlB,GAAIA,GAAQlB,EAAY,CACtB,IAAImB,EAAkB,GACtBC,EAAAA,GAAYF,GAAM,SAAUG,EAAMC,GAChC,IAAIC,EAEAH,EAAAA,GAAeC,IACjBE,EAAUF,EAAKG,QAEfH,EAAKI,QAAQH,IACJF,EAAAA,GAAeC,EAAKK,SAC7BH,EAAUH,EAAAA,GAAc,CAAC,EAAGC,IACpBK,MAAQH,EAAQG,MAAMF,QAE9BH,EAAKK,MAAMD,QAAQH,IAEnBC,EAAUF,EAGZF,EAAgBQ,KAAKJ,EACvB,IACA1B,EAAOqB,KAAOC,CAChB,CAEA,IAAIS,EAAyBzB,KAAKyB,uBAC9BC,EAAkB,CAAC,CACrBC,KAAMlB,EACNmB,MAAMC,EAAAA,EAAAA,GAAuBhB,GAC7BjB,YAAaA,EACbkC,UAAW,CACTC,SAAS,EACTC,SAAU,GAEZC,QAAS,CAAC,SACT,CACDN,KAAMhB,EACNiB,MAAMC,EAAAA,EAAAA,GAAuBf,GAC7BmB,QAASR,EAAuBJ,UAElC,OAAOa,EAAAA,EAAAA,GAAuBlC,KAAM,CAClC0B,gBAAiBA,EACjBS,gBAAiBV,EAAuBW,OAAS,EACjDC,gBAAiBpB,EAAAA,GAAaqB,EAAAA,GAAiCZ,EAAiB1B,OAEpF,EAOAT,EAAsBC,UAAU+C,YAAc,WAC5C,IAAIC,EAAMxC,KAAKU,aACf,OAAOV,KAAKL,QAAQI,aAAayC,EAAM,OAAQxC,KAAKC,IAAIuC,EAAM,cAAcC,IAC9E,EAEOlD,CACT,CAjGA,E","sources":["../node_modules/echarts/lib/chart/helper/whiskerBoxCommon.js"],"sourcesContent":["\n/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\n\n\n/**\n * AUTO-GENERATED FILE. DO NOT MODIFY.\n */\n\n/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\nimport createSeriesDataSimply from './createSeriesDataSimply.js';\nimport * as zrUtil from 'zrender/lib/core/util.js';\nimport { getDimensionTypeByAxis } from '../../data/helper/dimensionHelper.js';\nimport { makeSeriesEncodeForAxisCoordSys } from '../../data/helper/sourceHelper.js';\n\nvar WhiskerBoxCommonMixin =\n/** @class */\nfunction () {\n  function WhiskerBoxCommonMixin() {}\n  /**\n   * @override\n   */\n\n\n  WhiskerBoxCommonMixin.prototype.getInitialData = function (option, ecModel) {\n    // When both types of xAxis and yAxis are 'value', layout is\n    // needed to be specified by user. Otherwise, layout can be\n    // judged by which axis is category.\n    var ordinalMeta;\n    var xAxisModel = ecModel.getComponent('xAxis', this.get('xAxisIndex'));\n    var yAxisModel = ecModel.getComponent('yAxis', this.get('yAxisIndex'));\n    var xAxisType = xAxisModel.get('type');\n    var yAxisType = yAxisModel.get('type');\n    var addOrdinal; // FIXME\n    // Consider time axis.\n\n    if (xAxisType === 'category') {\n      option.layout = 'horizontal';\n      ordinalMeta = xAxisModel.getOrdinalMeta();\n      addOrdinal = true;\n    } else if (yAxisType === 'category') {\n      option.layout = 'vertical';\n      ordinalMeta = yAxisModel.getOrdinalMeta();\n      addOrdinal = true;\n    } else {\n      option.layout = option.layout || 'horizontal';\n    }\n\n    var coordDims = ['x', 'y'];\n    var baseAxisDimIndex = option.layout === 'horizontal' ? 0 : 1;\n    var baseAxisDim = this._baseAxisDim = coordDims[baseAxisDimIndex];\n    var otherAxisDim = coordDims[1 - baseAxisDimIndex];\n    var axisModels = [xAxisModel, yAxisModel];\n    var baseAxisType = axisModels[baseAxisDimIndex].get('type');\n    var otherAxisType = axisModels[1 - baseAxisDimIndex].get('type');\n    var data = option.data; // Clone a new data for next setOption({}) usage.\n    // Avoid modifying current data will affect further update.\n\n    if (data && addOrdinal) {\n      var newOptionData_1 = [];\n      zrUtil.each(data, function (item, index) {\n        var newItem;\n\n        if (zrUtil.isArray(item)) {\n          newItem = item.slice(); // Modify current using data.\n\n          item.unshift(index);\n        } else if (zrUtil.isArray(item.value)) {\n          newItem = zrUtil.extend({}, item);\n          newItem.value = newItem.value.slice(); // Modify current using data.\n\n          item.value.unshift(index);\n        } else {\n          newItem = item;\n        }\n\n        newOptionData_1.push(newItem);\n      });\n      option.data = newOptionData_1;\n    }\n\n    var defaultValueDimensions = this.defaultValueDimensions;\n    var coordDimensions = [{\n      name: baseAxisDim,\n      type: getDimensionTypeByAxis(baseAxisType),\n      ordinalMeta: ordinalMeta,\n      otherDims: {\n        tooltip: false,\n        itemName: 0\n      },\n      dimsDef: ['base']\n    }, {\n      name: otherAxisDim,\n      type: getDimensionTypeByAxis(otherAxisType),\n      dimsDef: defaultValueDimensions.slice()\n    }];\n    return createSeriesDataSimply(this, {\n      coordDimensions: coordDimensions,\n      dimensionsCount: defaultValueDimensions.length + 1,\n      encodeDefaulter: zrUtil.curry(makeSeriesEncodeForAxisCoordSys, coordDimensions, this)\n    });\n  };\n  /**\n   * If horizontal, base axis is x, otherwise y.\n   * @override\n   */\n\n\n  WhiskerBoxCommonMixin.prototype.getBaseAxis = function () {\n    var dim = this._baseAxisDim;\n    return this.ecModel.getComponent(dim + 'Axis', this.get(dim + 'AxisIndex')).axis;\n  };\n\n  return WhiskerBoxCommonMixin;\n}();\n\n;\nexport { WhiskerBoxCommonMixin };"],"names":["WhiskerBoxCommonMixin","prototype","getInitialData","option","ecModel","ordinalMeta","addOrdinal","xAxisModel","getComponent","this","get","yAxisModel","xAxisType","yAxisType","layout","getOrdinalMeta","coordDims","baseAxisDimIndex","baseAxisDim","_baseAxisDim","otherAxisDim","axisModels","baseAxisType","otherAxisType","data","newOptionData_1","zrUtil","item","index","newItem","slice","unshift","value","push","defaultValueDimensions","coordDimensions","name","type","getDimensionTypeByAxis","otherDims","tooltip","itemName","dimsDef","createSeriesDataSimply","dimensionsCount","length","encodeDefaulter","makeSeriesEncodeForAxisCoordSys","getBaseAxis","dim","axis"],"sourceRoot":""}